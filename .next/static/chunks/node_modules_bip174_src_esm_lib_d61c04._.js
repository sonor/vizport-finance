(globalThis.TURBOPACK = globalThis.TURBOPACK || []).push(["static/chunks/node_modules_bip174_src_esm_lib_d61c04._.js", {

"[project]/node_modules/bip174/src/esm/lib/typeFields.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "GLOBAL_TYPE_NAMES": (()=>GLOBAL_TYPE_NAMES),
    "GlobalTypes": (()=>GlobalTypes),
    "INPUT_TYPE_NAMES": (()=>INPUT_TYPE_NAMES),
    "InputTypes": (()=>InputTypes),
    "OUTPUT_TYPE_NAMES": (()=>OUTPUT_TYPE_NAMES),
    "OutputTypes": (()=>OutputTypes)
});
var GlobalTypes;
(function(GlobalTypes) {
    GlobalTypes[GlobalTypes['UNSIGNED_TX'] = 0] = 'UNSIGNED_TX';
    GlobalTypes[GlobalTypes['GLOBAL_XPUB'] = 1] = 'GLOBAL_XPUB';
})(GlobalTypes || (GlobalTypes = {}));
const GLOBAL_TYPE_NAMES = [
    'unsignedTx',
    'globalXpub'
];
var InputTypes;
(function(InputTypes) {
    InputTypes[InputTypes['NON_WITNESS_UTXO'] = 0] = 'NON_WITNESS_UTXO';
    InputTypes[InputTypes['WITNESS_UTXO'] = 1] = 'WITNESS_UTXO';
    InputTypes[InputTypes['PARTIAL_SIG'] = 2] = 'PARTIAL_SIG';
    InputTypes[InputTypes['SIGHASH_TYPE'] = 3] = 'SIGHASH_TYPE';
    InputTypes[InputTypes['REDEEM_SCRIPT'] = 4] = 'REDEEM_SCRIPT';
    InputTypes[InputTypes['WITNESS_SCRIPT'] = 5] = 'WITNESS_SCRIPT';
    InputTypes[InputTypes['BIP32_DERIVATION'] = 6] = 'BIP32_DERIVATION';
    InputTypes[InputTypes['FINAL_SCRIPTSIG'] = 7] = 'FINAL_SCRIPTSIG';
    InputTypes[InputTypes['FINAL_SCRIPTWITNESS'] = 8] = 'FINAL_SCRIPTWITNESS';
    InputTypes[InputTypes['POR_COMMITMENT'] = 9] = 'POR_COMMITMENT';
    InputTypes[InputTypes['TAP_KEY_SIG'] = 19] = 'TAP_KEY_SIG';
    InputTypes[InputTypes['TAP_SCRIPT_SIG'] = 20] = 'TAP_SCRIPT_SIG';
    InputTypes[InputTypes['TAP_LEAF_SCRIPT'] = 21] = 'TAP_LEAF_SCRIPT';
    InputTypes[InputTypes['TAP_BIP32_DERIVATION'] = 22] = 'TAP_BIP32_DERIVATION';
    InputTypes[InputTypes['TAP_INTERNAL_KEY'] = 23] = 'TAP_INTERNAL_KEY';
    InputTypes[InputTypes['TAP_MERKLE_ROOT'] = 24] = 'TAP_MERKLE_ROOT';
})(InputTypes || (InputTypes = {}));
const INPUT_TYPE_NAMES = [
    'nonWitnessUtxo',
    'witnessUtxo',
    'partialSig',
    'sighashType',
    'redeemScript',
    'witnessScript',
    'bip32Derivation',
    'finalScriptSig',
    'finalScriptWitness',
    'porCommitment',
    'tapKeySig',
    'tapScriptSig',
    'tapLeafScript',
    'tapBip32Derivation',
    'tapInternalKey',
    'tapMerkleRoot'
];
var OutputTypes;
(function(OutputTypes) {
    OutputTypes[OutputTypes['REDEEM_SCRIPT'] = 0] = 'REDEEM_SCRIPT';
    OutputTypes[OutputTypes['WITNESS_SCRIPT'] = 1] = 'WITNESS_SCRIPT';
    OutputTypes[OutputTypes['BIP32_DERIVATION'] = 2] = 'BIP32_DERIVATION';
    OutputTypes[OutputTypes['TAP_INTERNAL_KEY'] = 5] = 'TAP_INTERNAL_KEY';
    OutputTypes[OutputTypes['TAP_TREE'] = 6] = 'TAP_TREE';
    OutputTypes[OutputTypes['TAP_BIP32_DERIVATION'] = 7] = 'TAP_BIP32_DERIVATION';
})(OutputTypes || (OutputTypes = {}));
const OUTPUT_TYPE_NAMES = [
    'redeemScript',
    'witnessScript',
    'bip32Derivation',
    'tapInternalKey',
    'tapTree',
    'tapBip32Derivation'
];
}}),
"[project]/node_modules/bip174/src/esm/lib/converter/global/globalXpub.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "canAddToArray": (()=>canAddToArray),
    "check": (()=>check),
    "decode": (()=>decode),
    "encode": (()=>encode),
    "expected": (()=>expected)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$typeFields$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bip174/src/esm/lib/typeFields.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$browser$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/uint8array-tools/src/mjs/browser.js [app-client] (ecmascript)");
;
;
const range = (n)=>[
        ...Array(n).keys()
    ];
function decode(keyVal) {
    if (keyVal.key[0] !== __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$typeFields$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GlobalTypes"].GLOBAL_XPUB) {
        throw new Error('Decode Error: could not decode globalXpub with key 0x' + __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$browser$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.toHex(keyVal.key));
    }
    if (keyVal.key.length !== 79 || ![
        2,
        3
    ].includes(keyVal.key[46])) {
        throw new Error('Decode Error: globalXpub has invalid extended pubkey in key 0x' + __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$browser$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.toHex(keyVal.key));
    }
    if (keyVal.value.length / 4 % 1 !== 0) {
        throw new Error('Decode Error: Global GLOBAL_XPUB value length should be multiple of 4');
    }
    const extendedPubkey = keyVal.key.slice(1);
    const data = {
        masterFingerprint: keyVal.value.slice(0, 4),
        extendedPubkey,
        path: 'm'
    };
    for (const i of range(keyVal.value.length / 4 - 1)){
        const val = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$browser$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.readUInt32(keyVal.value, i * 4 + 4, 'LE');
        const isHard = !!(val & 0x80000000);
        const idx = val & 0x7fffffff;
        data.path += '/' + idx.toString(10) + (isHard ? "'" : '');
    }
    return data;
}
function encode(data) {
    const head = new Uint8Array([
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$typeFields$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GlobalTypes"].GLOBAL_XPUB
    ]);
    const key = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$browser$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.concat([
        head,
        data.extendedPubkey
    ]);
    const splitPath = data.path.split('/');
    const value = new Uint8Array(splitPath.length * 4);
    value.set(data.masterFingerprint, 0);
    let offset = 4;
    splitPath.slice(1).forEach((level)=>{
        const isHard = level.slice(-1) === "'";
        let num = 0x7fffffff & parseInt(isHard ? level.slice(0, -1) : level, 10);
        if (isHard) num += 0x80000000;
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$browser$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.writeUInt32(value, offset, num, 'LE');
        offset += 4;
    });
    return {
        key,
        value
    };
}
const expected = '{ masterFingerprint: Uint8Array; extendedPubkey: Uint8Array; path: string; }';
function check(data) {
    const epk = data.extendedPubkey;
    const mfp = data.masterFingerprint;
    const p = data.path;
    return epk instanceof Uint8Array && epk.length === 78 && [
        2,
        3
    ].indexOf(epk[45]) > -1 && mfp instanceof Uint8Array && mfp.length === 4 && typeof p === 'string' && !!p.match(/^m(\/\d+'?)*$/);
}
function canAddToArray(array, item, dupeSet) {
    const dupeString = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$browser$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.toHex(item.extendedPubkey);
    if (dupeSet.has(dupeString)) return false;
    dupeSet.add(dupeString);
    return array.filter((v)=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$browser$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.compare(v.extendedPubkey, item.extendedPubkey)).length === 0;
}
}}),
"[project]/node_modules/bip174/src/esm/lib/converter/global/unsignedTx.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "encode": (()=>encode)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$typeFields$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bip174/src/esm/lib/typeFields.js [app-client] (ecmascript)");
;
function encode(data) {
    return {
        key: new Uint8Array([
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$typeFields$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GlobalTypes"].UNSIGNED_TX
        ]),
        value: data.toBuffer()
    };
}
}}),
"[project]/node_modules/bip174/src/esm/lib/converter/input/finalScriptSig.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "canAdd": (()=>canAdd),
    "check": (()=>check),
    "decode": (()=>decode),
    "encode": (()=>encode),
    "expected": (()=>expected)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$typeFields$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bip174/src/esm/lib/typeFields.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$browser$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/uint8array-tools/src/mjs/browser.js [app-client] (ecmascript)");
;
;
function decode(keyVal) {
    if (keyVal.key[0] !== __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$typeFields$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["InputTypes"].FINAL_SCRIPTSIG) {
        throw new Error('Decode Error: could not decode finalScriptSig with key 0x' + __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$browser$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.toHex(keyVal.key));
    }
    return keyVal.value;
}
function encode(data) {
    const key = new Uint8Array([
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$typeFields$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["InputTypes"].FINAL_SCRIPTSIG
    ]);
    return {
        key,
        value: data
    };
}
const expected = 'Uint8Array';
function check(data) {
    return data instanceof Uint8Array;
}
function canAdd(currentData, newData) {
    return !!currentData && !!newData && currentData.finalScriptSig === undefined;
}
}}),
"[project]/node_modules/bip174/src/esm/lib/converter/input/finalScriptWitness.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "canAdd": (()=>canAdd),
    "check": (()=>check),
    "decode": (()=>decode),
    "encode": (()=>encode),
    "expected": (()=>expected)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$typeFields$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bip174/src/esm/lib/typeFields.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$browser$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/uint8array-tools/src/mjs/browser.js [app-client] (ecmascript)");
;
;
function decode(keyVal) {
    if (keyVal.key[0] !== __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$typeFields$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["InputTypes"].FINAL_SCRIPTWITNESS) {
        throw new Error('Decode Error: could not decode finalScriptWitness with key 0x' + __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$browser$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.toHex(keyVal.key));
    }
    return keyVal.value;
}
function encode(data) {
    const key = new Uint8Array([
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$typeFields$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["InputTypes"].FINAL_SCRIPTWITNESS
    ]);
    return {
        key,
        value: data
    };
}
const expected = 'Uint8Array';
function check(data) {
    return data instanceof Uint8Array;
}
function canAdd(currentData, newData) {
    return !!currentData && !!newData && currentData.finalScriptWitness === undefined;
}
}}),
"[project]/node_modules/bip174/src/esm/lib/converter/input/nonWitnessUtxo.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "canAdd": (()=>canAdd),
    "check": (()=>check),
    "decode": (()=>decode),
    "encode": (()=>encode),
    "expected": (()=>expected)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$typeFields$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bip174/src/esm/lib/typeFields.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$browser$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/uint8array-tools/src/mjs/browser.js [app-client] (ecmascript)");
;
;
function decode(keyVal) {
    if (keyVal.key[0] !== __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$typeFields$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["InputTypes"].NON_WITNESS_UTXO) {
        throw new Error('Decode Error: could not decode nonWitnessUtxo with key 0x' + __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$browser$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.toHex(keyVal.key));
    }
    return keyVal.value;
}
function encode(data) {
    return {
        key: new Uint8Array([
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$typeFields$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["InputTypes"].NON_WITNESS_UTXO
        ]),
        value: data
    };
}
const expected = 'Uint8Array';
function check(data) {
    return data instanceof Uint8Array;
}
function canAdd(currentData, newData) {
    return !!currentData && !!newData && currentData.nonWitnessUtxo === undefined;
}
}}),
"[project]/node_modules/bip174/src/esm/lib/converter/input/partialSig.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "canAddToArray": (()=>canAddToArray),
    "check": (()=>check),
    "decode": (()=>decode),
    "encode": (()=>encode),
    "expected": (()=>expected)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$typeFields$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bip174/src/esm/lib/typeFields.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$browser$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/uint8array-tools/src/mjs/browser.js [app-client] (ecmascript)");
;
;
function decode(keyVal) {
    if (keyVal.key[0] !== __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$typeFields$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["InputTypes"].PARTIAL_SIG) {
        throw new Error('Decode Error: could not decode partialSig with key 0x' + __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$browser$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.toHex(keyVal.key));
    }
    if (!(keyVal.key.length === 34 || keyVal.key.length === 66) || ![
        2,
        3,
        4
    ].includes(keyVal.key[1])) {
        throw new Error('Decode Error: partialSig has invalid pubkey in key 0x' + __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$browser$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.toHex(keyVal.key));
    }
    const pubkey = keyVal.key.slice(1);
    return {
        pubkey,
        signature: keyVal.value
    };
}
function encode(pSig) {
    const head = new Uint8Array([
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$typeFields$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["InputTypes"].PARTIAL_SIG
    ]);
    return {
        key: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$browser$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.concat([
            head,
            pSig.pubkey
        ]),
        value: pSig.signature
    };
}
const expected = '{ pubkey: Uint8Array; signature: Uint8Array; }';
function check(data) {
    return data.pubkey instanceof Uint8Array && data.signature instanceof Uint8Array && [
        33,
        65
    ].includes(data.pubkey.length) && [
        2,
        3,
        4
    ].includes(data.pubkey[0]) && isDerSigWithSighash(data.signature);
}
function isDerSigWithSighash(buf) {
    if (!(buf instanceof Uint8Array) || buf.length < 9) return false;
    if (buf[0] !== 0x30) return false;
    if (buf.length !== buf[1] + 3) return false;
    if (buf[2] !== 0x02) return false;
    const rLen = buf[3];
    if (rLen > 33 || rLen < 1) return false;
    if (buf[3 + rLen + 1] !== 0x02) return false;
    const sLen = buf[3 + rLen + 2];
    if (sLen > 33 || sLen < 1) return false;
    if (buf.length !== 3 + rLen + 2 + sLen + 2) return false;
    return true;
}
function canAddToArray(array, item, dupeSet) {
    const dupeString = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$browser$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.toHex(item.pubkey);
    if (dupeSet.has(dupeString)) return false;
    dupeSet.add(dupeString);
    return array.filter((v)=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$browser$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.compare(v.pubkey, item.pubkey) === 0).length === 0;
}
}}),
"[project]/node_modules/bip174/src/esm/lib/converter/input/porCommitment.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "canAdd": (()=>canAdd),
    "check": (()=>check),
    "decode": (()=>decode),
    "encode": (()=>encode),
    "expected": (()=>expected)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$typeFields$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bip174/src/esm/lib/typeFields.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$browser$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/uint8array-tools/src/mjs/browser.js [app-client] (ecmascript)");
;
;
function decode(keyVal) {
    if (keyVal.key[0] !== __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$typeFields$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["InputTypes"].POR_COMMITMENT) {
        throw new Error('Decode Error: could not decode porCommitment with key 0x' + __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$browser$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.toHex(keyVal.key));
    }
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$browser$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.toUtf8(keyVal.value);
}
function encode(data) {
    const key = new Uint8Array([
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$typeFields$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["InputTypes"].POR_COMMITMENT
    ]);
    return {
        key,
        value: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$browser$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.fromUtf8(data)
    };
}
const expected = 'string';
function check(data) {
    return typeof data === 'string';
}
function canAdd(currentData, newData) {
    return !!currentData && !!newData && currentData.porCommitment === undefined;
}
}}),
"[project]/node_modules/bip174/src/esm/lib/converter/input/sighashType.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "canAdd": (()=>canAdd),
    "check": (()=>check),
    "decode": (()=>decode),
    "encode": (()=>encode),
    "expected": (()=>expected)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$typeFields$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bip174/src/esm/lib/typeFields.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$browser$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/uint8array-tools/src/mjs/browser.js [app-client] (ecmascript)");
;
;
function decode(keyVal) {
    if (keyVal.key[0] !== __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$typeFields$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["InputTypes"].SIGHASH_TYPE) {
        throw new Error('Decode Error: could not decode sighashType with key 0x' + __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$browser$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.toHex(keyVal.key));
    }
    return Number(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$browser$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.readUInt32(keyVal.value, 0, 'LE'));
}
function encode(data) {
    const key = Uint8Array.from([
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$typeFields$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["InputTypes"].SIGHASH_TYPE
    ]);
    const value = new Uint8Array(4);
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$browser$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.writeUInt32(value, 0, data, 'LE');
    return {
        key,
        value
    };
}
const expected = 'number';
function check(data) {
    return typeof data === 'number';
}
function canAdd(currentData, newData) {
    return !!currentData && !!newData && currentData.sighashType === undefined;
}
}}),
"[project]/node_modules/bip174/src/esm/lib/converter/input/tapKeySig.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "canAdd": (()=>canAdd),
    "check": (()=>check),
    "decode": (()=>decode),
    "encode": (()=>encode),
    "expected": (()=>expected)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$typeFields$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bip174/src/esm/lib/typeFields.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$browser$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/uint8array-tools/src/mjs/browser.js [app-client] (ecmascript)");
;
;
function decode(keyVal) {
    if (keyVal.key[0] !== __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$typeFields$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["InputTypes"].TAP_KEY_SIG || keyVal.key.length !== 1) {
        throw new Error('Decode Error: could not decode tapKeySig with key 0x' + __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$browser$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.toHex(keyVal.key));
    }
    if (!check(keyVal.value)) {
        throw new Error('Decode Error: tapKeySig not a valid 64-65-byte BIP340 signature');
    }
    return keyVal.value;
}
function encode(value) {
    const key = Uint8Array.from([
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$typeFields$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["InputTypes"].TAP_KEY_SIG
    ]);
    return {
        key,
        value
    };
}
const expected = 'Uint8Array';
function check(data) {
    return data instanceof Uint8Array && (data.length === 64 || data.length === 65);
}
function canAdd(currentData, newData) {
    return !!currentData && !!newData && currentData.tapKeySig === undefined;
}
}}),
"[project]/node_modules/bip174/src/esm/lib/converter/input/tapLeafScript.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "canAddToArray": (()=>canAddToArray),
    "check": (()=>check),
    "decode": (()=>decode),
    "encode": (()=>encode),
    "expected": (()=>expected)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$typeFields$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bip174/src/esm/lib/typeFields.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$browser$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/uint8array-tools/src/mjs/browser.js [app-client] (ecmascript)");
;
;
function decode(keyVal) {
    if (keyVal.key[0] !== __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$typeFields$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["InputTypes"].TAP_LEAF_SCRIPT) {
        throw new Error('Decode Error: could not decode tapLeafScript with key 0x' + __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$browser$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.toHex(keyVal.key));
    }
    if ((keyVal.key.length - 2) % 32 !== 0) {
        throw new Error('Decode Error: tapLeafScript has invalid control block in key 0x' + __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$browser$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.toHex(keyVal.key));
    }
    const leafVersion = keyVal.value[keyVal.value.length - 1];
    if ((keyVal.key[1] & 0xfe) !== leafVersion) {
        throw new Error('Decode Error: tapLeafScript bad leaf version in key 0x' + __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$browser$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.toHex(keyVal.key));
    }
    const script = keyVal.value.slice(0, -1);
    const controlBlock = keyVal.key.slice(1);
    return {
        controlBlock,
        script,
        leafVersion
    };
}
function encode(tScript) {
    const head = Uint8Array.from([
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$typeFields$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["InputTypes"].TAP_LEAF_SCRIPT
    ]);
    const verBuf = Uint8Array.from([
        tScript.leafVersion
    ]);
    return {
        key: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$browser$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.concat([
            head,
            tScript.controlBlock
        ]),
        value: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$browser$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.concat([
            tScript.script,
            verBuf
        ])
    };
}
const expected = '{ controlBlock: Uint8Array; leafVersion: number, script: Uint8Array; }';
function check(data) {
    return data.controlBlock instanceof Uint8Array && (data.controlBlock.length - 1) % 32 === 0 && (data.controlBlock[0] & 0xfe) === data.leafVersion && data.script instanceof Uint8Array;
}
function canAddToArray(array, item, dupeSet) {
    const dupeString = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$browser$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.toHex(item.controlBlock);
    if (dupeSet.has(dupeString)) return false;
    dupeSet.add(dupeString);
    return array.filter((v)=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$browser$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.compare(v.controlBlock, item.controlBlock) === 0).length === 0;
}
}}),
"[project]/node_modules/bip174/src/esm/lib/converter/input/tapMerkleRoot.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "canAdd": (()=>canAdd),
    "check": (()=>check),
    "decode": (()=>decode),
    "encode": (()=>encode),
    "expected": (()=>expected)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$typeFields$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bip174/src/esm/lib/typeFields.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$browser$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/uint8array-tools/src/mjs/browser.js [app-client] (ecmascript)");
;
;
function decode(keyVal) {
    if (keyVal.key[0] !== __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$typeFields$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["InputTypes"].TAP_MERKLE_ROOT || keyVal.key.length !== 1) {
        throw new Error('Decode Error: could not decode tapMerkleRoot with key 0x' + __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$browser$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.toHex(keyVal.key));
    }
    if (!check(keyVal.value)) {
        throw new Error('Decode Error: tapMerkleRoot not a 32-byte hash');
    }
    return keyVal.value;
}
function encode(value) {
    const key = Uint8Array.from([
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$typeFields$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["InputTypes"].TAP_MERKLE_ROOT
    ]);
    return {
        key,
        value
    };
}
const expected = 'Uint8Array';
function check(data) {
    return data instanceof Uint8Array && data.length === 32;
}
function canAdd(currentData, newData) {
    return !!currentData && !!newData && currentData.tapMerkleRoot === undefined;
}
}}),
"[project]/node_modules/bip174/src/esm/lib/converter/input/tapScriptSig.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "canAddToArray": (()=>canAddToArray),
    "check": (()=>check),
    "decode": (()=>decode),
    "encode": (()=>encode),
    "expected": (()=>expected)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$typeFields$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bip174/src/esm/lib/typeFields.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$browser$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/uint8array-tools/src/mjs/browser.js [app-client] (ecmascript)");
;
;
function decode(keyVal) {
    if (keyVal.key[0] !== __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$typeFields$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["InputTypes"].TAP_SCRIPT_SIG) {
        throw new Error('Decode Error: could not decode tapScriptSig with key 0x' + __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$browser$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.toHex(keyVal.key));
    }
    if (keyVal.key.length !== 65) {
        throw new Error('Decode Error: tapScriptSig has invalid key 0x' + __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$browser$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.toHex(keyVal.key));
    }
    if (keyVal.value.length !== 64 && keyVal.value.length !== 65) {
        throw new Error('Decode Error: tapScriptSig has invalid signature in key 0x' + __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$browser$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.toHex(keyVal.key));
    }
    const pubkey = keyVal.key.slice(1, 33);
    const leafHash = keyVal.key.slice(33);
    return {
        pubkey,
        leafHash,
        signature: keyVal.value
    };
}
function encode(tSig) {
    const head = Uint8Array.from([
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$typeFields$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["InputTypes"].TAP_SCRIPT_SIG
    ]);
    return {
        key: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$browser$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.concat([
            head,
            tSig.pubkey,
            tSig.leafHash
        ]),
        value: tSig.signature
    };
}
const expected = '{ pubkey: Uint8Array; leafHash: Uint8Array; signature: Uint8Array; }';
function check(data) {
    return data.pubkey instanceof Uint8Array && data.leafHash instanceof Uint8Array && data.signature instanceof Uint8Array && data.pubkey.length === 32 && data.leafHash.length === 32 && (data.signature.length === 64 || data.signature.length === 65);
}
function canAddToArray(array, item, dupeSet) {
    const dupeString = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$browser$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.toHex(item.pubkey) + __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$browser$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.toHex(item.leafHash);
    if (dupeSet.has(dupeString)) return false;
    dupeSet.add(dupeString);
    return array.filter((v)=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$browser$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.compare(v.pubkey, item.pubkey) === 0 && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$browser$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.compare(v.leafHash, item.leafHash) === 0).length === 0;
}
}}),
"[project]/node_modules/bip174/src/esm/lib/converter/input/witnessUtxo.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "canAdd": (()=>canAdd),
    "check": (()=>check),
    "decode": (()=>decode),
    "encode": (()=>encode),
    "expected": (()=>expected)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$typeFields$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bip174/src/esm/lib/typeFields.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$browser$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/uint8array-tools/src/mjs/browser.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$varuint$2d$bitcoin$2f$src$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/varuint-bitcoin/src/esm/index.js [app-client] (ecmascript)");
;
;
;
function decode(keyVal) {
    if (keyVal.key[0] !== __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$typeFields$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["InputTypes"].WITNESS_UTXO) {
        throw new Error('Decode Error: could not decode witnessUtxo with key 0x' + __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$browser$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.toHex(keyVal.key));
    }
    const value = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$browser$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.readInt64(keyVal.value, 0, 'LE');
    let _offset = 8;
    const { numberValue: scriptLen, bytes } = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$varuint$2d$bitcoin$2f$src$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.decode(keyVal.value, _offset);
    _offset += bytes;
    const script = keyVal.value.slice(_offset);
    if (script.length !== scriptLen) {
        throw new Error('Decode Error: WITNESS_UTXO script is not proper length');
    }
    return {
        script,
        value
    };
}
function encode(data) {
    const { script, value } = data;
    const varuintlen = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$varuint$2d$bitcoin$2f$src$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.encodingLength(script.length);
    const result = new Uint8Array(8 + varuintlen + script.length);
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$browser$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.writeInt64(result, 0, BigInt(value), 'LE');
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$varuint$2d$bitcoin$2f$src$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.encode(script.length, result, 8);
    result.set(script, 8 + varuintlen);
    return {
        key: Uint8Array.from([
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$typeFields$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["InputTypes"].WITNESS_UTXO
        ]),
        value: result
    };
}
const expected = '{ script: Uint8Array; value: bigint; }';
function check(data) {
    return data.script instanceof Uint8Array && typeof data.value === 'bigint';
}
function canAdd(currentData, newData) {
    return !!currentData && !!newData && currentData.witnessUtxo === undefined;
}
}}),
"[project]/node_modules/bip174/src/esm/lib/converter/output/tapTree.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "canAdd": (()=>canAdd),
    "check": (()=>check),
    "decode": (()=>decode),
    "encode": (()=>encode),
    "expected": (()=>expected)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$typeFields$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bip174/src/esm/lib/typeFields.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$varuint$2d$bitcoin$2f$src$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/varuint-bitcoin/src/esm/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$browser$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/uint8array-tools/src/mjs/browser.js [app-client] (ecmascript)");
;
;
;
function decode(keyVal) {
    if (keyVal.key[0] !== __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$typeFields$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["OutputTypes"].TAP_TREE || keyVal.key.length !== 1) {
        throw new Error('Decode Error: could not decode tapTree with key 0x' + __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$browser$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.toHex(keyVal.key));
    }
    let _offset = 0;
    const data = [];
    while(_offset < keyVal.value.length){
        const depth = keyVal.value[_offset++];
        const leafVersion = keyVal.value[_offset++];
        const { numberValue: scriptLen, bytes } = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$varuint$2d$bitcoin$2f$src$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.decode(keyVal.value, _offset);
        _offset += bytes;
        data.push({
            depth,
            leafVersion,
            script: keyVal.value.slice(_offset, _offset + scriptLen)
        });
        _offset += scriptLen;
    }
    return {
        leaves: data
    };
}
function encode(tree) {
    const key = Uint8Array.from([
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$typeFields$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["OutputTypes"].TAP_TREE
    ]);
    const bufs = [].concat(...tree.leaves.map((tapLeaf)=>[
            Uint8Array.of(tapLeaf.depth, tapLeaf.leafVersion),
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$varuint$2d$bitcoin$2f$src$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.encode(BigInt(tapLeaf.script.length)).buffer,
            tapLeaf.script
        ]));
    return {
        key,
        value: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$browser$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.concat(bufs)
    };
}
const expected = '{ leaves: [{ depth: number; leafVersion: number, script: Uint8Array; }] }';
function check(data) {
    return Array.isArray(data.leaves) && data.leaves.every((tapLeaf)=>tapLeaf.depth >= 0 && tapLeaf.depth <= 128 && (tapLeaf.leafVersion & 0xfe) === tapLeaf.leafVersion && tapLeaf.script instanceof Uint8Array);
}
function canAdd(currentData, newData) {
    return !!currentData && !!newData && currentData.tapTree === undefined;
}
}}),
"[project]/node_modules/bip174/src/esm/lib/converter/shared/bip32Derivation.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "makeConverter": (()=>makeConverter)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$browser$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/uint8array-tools/src/mjs/browser.js [app-client] (ecmascript)");
;
const range = (n)=>[
        ...Array(n).keys()
    ];
const isValidDERKey = (pubkey)=>pubkey.length === 33 && [
        2,
        3
    ].includes(pubkey[0]) || pubkey.length === 65 && 4 === pubkey[0];
function makeConverter(TYPE_BYTE, isValidPubkey = isValidDERKey) {
    function decode(keyVal) {
        if (keyVal.key[0] !== TYPE_BYTE) {
            throw new Error('Decode Error: could not decode bip32Derivation with key 0x' + __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$browser$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.toHex(keyVal.key));
        }
        const pubkey = keyVal.key.slice(1);
        if (!isValidPubkey(pubkey)) {
            throw new Error('Decode Error: bip32Derivation has invalid pubkey in key 0x' + __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$browser$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.toHex(keyVal.key));
        }
        if (keyVal.value.length / 4 % 1 !== 0) {
            throw new Error('Decode Error: Input BIP32_DERIVATION value length should be multiple of 4');
        }
        const data = {
            masterFingerprint: keyVal.value.slice(0, 4),
            pubkey,
            path: 'm'
        };
        for (const i of range(keyVal.value.length / 4 - 1)){
            const val = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$browser$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.readUInt32(keyVal.value, i * 4 + 4, 'LE');
            const isHard = !!(val & 0x80000000);
            const idx = val & 0x7fffffff;
            data.path += '/' + idx.toString(10) + (isHard ? "'" : '');
        }
        return data;
    }
    function encode(data) {
        const head = Uint8Array.from([
            TYPE_BYTE
        ]);
        const key = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$browser$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.concat([
            head,
            data.pubkey
        ]);
        const splitPath = data.path.split('/');
        const value = new Uint8Array(splitPath.length * 4);
        value.set(data.masterFingerprint, 0);
        let offset = 4;
        splitPath.slice(1).forEach((level)=>{
            const isHard = level.slice(-1) === "'";
            let num = 0x7fffffff & parseInt(isHard ? level.slice(0, -1) : level, 10);
            if (isHard) num += 0x80000000;
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$browser$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.writeUInt32(value, offset, num, 'LE');
            offset += 4;
        });
        return {
            key,
            value
        };
    }
    const expected = '{ masterFingerprint: Uint8Array; pubkey: Uint8Array; path: string; }';
    function check(data) {
        return data.pubkey instanceof Uint8Array && data.masterFingerprint instanceof Uint8Array && typeof data.path === 'string' && isValidPubkey(data.pubkey) && data.masterFingerprint.length === 4;
    }
    function canAddToArray(array, item, dupeSet) {
        const dupeString = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$browser$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.toHex(item.pubkey);
        if (dupeSet.has(dupeString)) return false;
        dupeSet.add(dupeString);
        return array.filter((v)=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$browser$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.compare(v.pubkey, item.pubkey) === 0).length === 0;
    }
    return {
        decode,
        encode,
        check,
        expected,
        canAddToArray
    };
}
}}),
"[project]/node_modules/bip174/src/esm/lib/converter/shared/checkPubkey.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "makeChecker": (()=>makeChecker)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$browser$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/uint8array-tools/src/mjs/browser.js [app-client] (ecmascript)");
;
function makeChecker(pubkeyTypes) {
    return checkPubkey;
    "TURBOPACK unreachable";
    function checkPubkey(keyVal) {
        let pubkey;
        if (pubkeyTypes.includes(keyVal.key[0])) {
            pubkey = keyVal.key.slice(1);
            if (!(pubkey.length === 33 || pubkey.length === 65) || ![
                2,
                3,
                4
            ].includes(pubkey[0])) {
                throw new Error('Format Error: invalid pubkey in key 0x' + __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$browser$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.toHex(keyVal.key));
            }
        }
        return pubkey;
    }
}
}}),
"[project]/node_modules/bip174/src/esm/lib/converter/shared/redeemScript.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "makeConverter": (()=>makeConverter)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$browser$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/uint8array-tools/src/mjs/browser.js [app-client] (ecmascript)");
;
function makeConverter(TYPE_BYTE) {
    function decode(keyVal) {
        if (keyVal.key[0] !== TYPE_BYTE) {
            throw new Error('Decode Error: could not decode redeemScript with key 0x' + __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$browser$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.toHex(keyVal.key));
        }
        return keyVal.value;
    }
    function encode(data) {
        const key = Uint8Array.from([
            TYPE_BYTE
        ]);
        return {
            key,
            value: data
        };
    }
    const expected = 'Uint8Array';
    function check(data) {
        return data instanceof Uint8Array;
    }
    function canAdd(currentData, newData) {
        return !!currentData && !!newData && currentData.redeemScript === undefined;
    }
    return {
        decode,
        encode,
        check,
        expected,
        canAdd
    };
}
}}),
"[project]/node_modules/bip174/src/esm/lib/converter/shared/tapBip32Derivation.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "makeConverter": (()=>makeConverter)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$varuint$2d$bitcoin$2f$src$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/varuint-bitcoin/src/esm/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$browser$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/uint8array-tools/src/mjs/browser.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$converter$2f$shared$2f$bip32Derivation$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bip174/src/esm/lib/converter/shared/bip32Derivation.js [app-client] (ecmascript)");
;
;
;
const isValidBIP340Key = (pubkey)=>pubkey.length === 32;
function makeConverter(TYPE_BYTE) {
    const parent = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$converter$2f$shared$2f$bip32Derivation$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.makeConverter(TYPE_BYTE, isValidBIP340Key);
    function decode(keyVal) {
        const { numberValue: nHashes, bytes: nHashesLen } = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$varuint$2d$bitcoin$2f$src$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.decode(keyVal.value);
        const base = parent.decode({
            key: keyVal.key,
            value: keyVal.value.slice(nHashesLen + Number(nHashes) * 32)
        });
        const leafHashes = new Array(Number(nHashes));
        for(let i = 0, _offset = nHashesLen; i < nHashes; i++, _offset += 32){
            leafHashes[i] = keyVal.value.slice(_offset, _offset + 32);
        }
        return {
            ...base,
            leafHashes
        };
    }
    function encode(data) {
        const base = parent.encode(data);
        const nHashesLen = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$varuint$2d$bitcoin$2f$src$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.encodingLength(data.leafHashes.length);
        const nHashesBuf = new Uint8Array(nHashesLen);
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$varuint$2d$bitcoin$2f$src$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.encode(data.leafHashes.length, nHashesBuf);
        const value = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$browser$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.concat([
            nHashesBuf,
            ...data.leafHashes,
            base.value
        ]);
        return {
            ...base,
            value
        };
    }
    const expected = '{ ' + 'masterFingerprint: Uint8Array; ' + 'pubkey: Uint8Array; ' + 'path: string; ' + 'leafHashes: Uint8Array[]; ' + '}';
    function check(data) {
        return Array.isArray(data.leafHashes) && data.leafHashes.every((leafHash)=>leafHash instanceof Uint8Array && leafHash.length === 32) && parent.check(data);
    }
    return {
        decode,
        encode,
        check,
        expected,
        canAddToArray: parent.canAddToArray
    };
}
}}),
"[project]/node_modules/bip174/src/esm/lib/converter/shared/tapInternalKey.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "makeConverter": (()=>makeConverter)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$browser$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/uint8array-tools/src/mjs/browser.js [app-client] (ecmascript)");
;
function makeConverter(TYPE_BYTE) {
    function decode(keyVal) {
        if (keyVal.key[0] !== TYPE_BYTE || keyVal.key.length !== 1) {
            throw new Error('Decode Error: could not decode tapInternalKey with key 0x' + __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$browser$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.toHex(keyVal.key));
        }
        if (keyVal.value.length !== 32) {
            throw new Error('Decode Error: tapInternalKey not a 32-byte x-only pubkey');
        }
        return keyVal.value;
    }
    function encode(value) {
        const key = Uint8Array.from([
            TYPE_BYTE
        ]);
        return {
            key,
            value
        };
    }
    const expected = 'Uint8Array';
    function check(data) {
        return data instanceof Uint8Array && data.length === 32;
    }
    function canAdd(currentData, newData) {
        return !!currentData && !!newData && currentData.tapInternalKey === undefined;
    }
    return {
        decode,
        encode,
        check,
        expected,
        canAdd
    };
}
}}),
"[project]/node_modules/bip174/src/esm/lib/converter/shared/witnessScript.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "makeConverter": (()=>makeConverter)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$browser$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/uint8array-tools/src/mjs/browser.js [app-client] (ecmascript)");
;
function makeConverter(TYPE_BYTE) {
    function decode(keyVal) {
        if (keyVal.key[0] !== TYPE_BYTE) {
            throw new Error('Decode Error: could not decode witnessScript with key 0x' + __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$browser$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.toHex(keyVal.key));
        }
        return keyVal.value;
    }
    function encode(data) {
        const key = Uint8Array.from([
            TYPE_BYTE
        ]);
        return {
            key,
            value: data
        };
    }
    const expected = 'Uint8Array';
    function check(data) {
        return data instanceof Uint8Array;
    }
    function canAdd(currentData, newData) {
        return !!currentData && !!newData && currentData.witnessScript === undefined;
    }
    return {
        decode,
        encode,
        check,
        expected,
        canAdd
    };
}
}}),
"[project]/node_modules/bip174/src/esm/lib/converter/index.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "globals": (()=>globals),
    "inputs": (()=>inputs),
    "outputs": (()=>outputs)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$typeFields$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bip174/src/esm/lib/typeFields.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$converter$2f$global$2f$globalXpub$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bip174/src/esm/lib/converter/global/globalXpub.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$converter$2f$global$2f$unsignedTx$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bip174/src/esm/lib/converter/global/unsignedTx.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$converter$2f$input$2f$finalScriptSig$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bip174/src/esm/lib/converter/input/finalScriptSig.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$converter$2f$input$2f$finalScriptWitness$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bip174/src/esm/lib/converter/input/finalScriptWitness.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$converter$2f$input$2f$nonWitnessUtxo$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bip174/src/esm/lib/converter/input/nonWitnessUtxo.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$converter$2f$input$2f$partialSig$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bip174/src/esm/lib/converter/input/partialSig.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$converter$2f$input$2f$porCommitment$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bip174/src/esm/lib/converter/input/porCommitment.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$converter$2f$input$2f$sighashType$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bip174/src/esm/lib/converter/input/sighashType.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$converter$2f$input$2f$tapKeySig$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bip174/src/esm/lib/converter/input/tapKeySig.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$converter$2f$input$2f$tapLeafScript$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bip174/src/esm/lib/converter/input/tapLeafScript.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$converter$2f$input$2f$tapMerkleRoot$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bip174/src/esm/lib/converter/input/tapMerkleRoot.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$converter$2f$input$2f$tapScriptSig$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bip174/src/esm/lib/converter/input/tapScriptSig.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$converter$2f$input$2f$witnessUtxo$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bip174/src/esm/lib/converter/input/witnessUtxo.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$converter$2f$output$2f$tapTree$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bip174/src/esm/lib/converter/output/tapTree.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$converter$2f$shared$2f$bip32Derivation$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bip174/src/esm/lib/converter/shared/bip32Derivation.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$converter$2f$shared$2f$checkPubkey$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bip174/src/esm/lib/converter/shared/checkPubkey.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$converter$2f$shared$2f$redeemScript$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bip174/src/esm/lib/converter/shared/redeemScript.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$converter$2f$shared$2f$tapBip32Derivation$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bip174/src/esm/lib/converter/shared/tapBip32Derivation.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$converter$2f$shared$2f$tapInternalKey$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bip174/src/esm/lib/converter/shared/tapInternalKey.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$converter$2f$shared$2f$witnessScript$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bip174/src/esm/lib/converter/shared/witnessScript.js [app-client] (ecmascript)");
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
const globals = {
    unsignedTx: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$converter$2f$global$2f$unsignedTx$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__,
    globalXpub: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$converter$2f$global$2f$globalXpub$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__,
    // pass an Array of key bytes that require pubkey beside the key
    checkPubkey: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$converter$2f$shared$2f$checkPubkey$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.makeChecker([])
};
const inputs = {
    nonWitnessUtxo: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$converter$2f$input$2f$nonWitnessUtxo$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__,
    partialSig: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$converter$2f$input$2f$partialSig$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__,
    sighashType: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$converter$2f$input$2f$sighashType$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__,
    finalScriptSig: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$converter$2f$input$2f$finalScriptSig$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__,
    finalScriptWitness: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$converter$2f$input$2f$finalScriptWitness$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__,
    porCommitment: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$converter$2f$input$2f$porCommitment$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__,
    witnessUtxo: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$converter$2f$input$2f$witnessUtxo$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__,
    bip32Derivation: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$converter$2f$shared$2f$bip32Derivation$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.makeConverter(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$typeFields$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["InputTypes"].BIP32_DERIVATION),
    redeemScript: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$converter$2f$shared$2f$redeemScript$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.makeConverter(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$typeFields$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["InputTypes"].REDEEM_SCRIPT),
    witnessScript: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$converter$2f$shared$2f$witnessScript$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.makeConverter(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$typeFields$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["InputTypes"].WITNESS_SCRIPT),
    checkPubkey: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$converter$2f$shared$2f$checkPubkey$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.makeChecker([
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$typeFields$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["InputTypes"].PARTIAL_SIG,
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$typeFields$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["InputTypes"].BIP32_DERIVATION
    ]),
    tapKeySig: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$converter$2f$input$2f$tapKeySig$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__,
    tapScriptSig: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$converter$2f$input$2f$tapScriptSig$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__,
    tapLeafScript: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$converter$2f$input$2f$tapLeafScript$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__,
    tapBip32Derivation: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$converter$2f$shared$2f$tapBip32Derivation$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.makeConverter(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$typeFields$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["InputTypes"].TAP_BIP32_DERIVATION),
    tapInternalKey: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$converter$2f$shared$2f$tapInternalKey$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.makeConverter(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$typeFields$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["InputTypes"].TAP_INTERNAL_KEY),
    tapMerkleRoot: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$converter$2f$input$2f$tapMerkleRoot$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__
};
const outputs = {
    bip32Derivation: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$converter$2f$shared$2f$bip32Derivation$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.makeConverter(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$typeFields$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["OutputTypes"].BIP32_DERIVATION),
    redeemScript: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$converter$2f$shared$2f$redeemScript$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.makeConverter(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$typeFields$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["OutputTypes"].REDEEM_SCRIPT),
    witnessScript: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$converter$2f$shared$2f$witnessScript$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.makeConverter(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$typeFields$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["OutputTypes"].WITNESS_SCRIPT),
    checkPubkey: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$converter$2f$shared$2f$checkPubkey$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.makeChecker([
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$typeFields$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["OutputTypes"].BIP32_DERIVATION
    ]),
    tapBip32Derivation: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$converter$2f$shared$2f$tapBip32Derivation$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.makeConverter(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$typeFields$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["OutputTypes"].TAP_BIP32_DERIVATION),
    tapTree: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$converter$2f$output$2f$tapTree$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__,
    tapInternalKey: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$converter$2f$shared$2f$tapInternalKey$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.makeConverter(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$typeFields$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["OutputTypes"].TAP_INTERNAL_KEY)
};
;
}}),
"[project]/node_modules/bip174/src/esm/lib/converter/tools.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "keyValToBuffer": (()=>keyValToBuffer),
    "keyValsToBuffer": (()=>keyValsToBuffer),
    "range": (()=>range),
    "reverseBuffer": (()=>reverseBuffer)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$varuint$2d$bitcoin$2f$src$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/varuint-bitcoin/src/esm/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$browser$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/uint8array-tools/src/mjs/browser.js [app-client] (ecmascript)");
;
;
const range = (n)=>[
        ...Array(n).keys()
    ];
function reverseBuffer(buffer) {
    if (buffer.length < 1) return buffer;
    let j = buffer.length - 1;
    let tmp = 0;
    for(let i = 0; i < buffer.length / 2; i++){
        tmp = buffer[i];
        buffer[i] = buffer[j];
        buffer[j] = tmp;
        j--;
    }
    return buffer;
}
function keyValsToBuffer(keyVals) {
    const buffers = keyVals.map(keyValToBuffer);
    buffers.push(Uint8Array.from([
        0
    ]));
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$browser$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.concat(buffers);
}
function keyValToBuffer(keyVal) {
    const keyLen = keyVal.key.length;
    const valLen = keyVal.value.length;
    const keyVarIntLen = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$varuint$2d$bitcoin$2f$src$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.encodingLength(keyLen);
    const valVarIntLen = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$varuint$2d$bitcoin$2f$src$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.encodingLength(valLen);
    const buffer = new Uint8Array(keyVarIntLen + keyLen + valVarIntLen + valLen);
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$varuint$2d$bitcoin$2f$src$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.encode(keyLen, buffer, 0);
    buffer.set(keyVal.key, keyVarIntLen);
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$varuint$2d$bitcoin$2f$src$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.encode(valLen, buffer, keyVarIntLen + keyLen);
    buffer.set(keyVal.value, keyVarIntLen + keyLen + valVarIntLen);
    return buffer;
}
}}),
"[project]/node_modules/bip174/src/esm/lib/parser/fromBuffer.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "checkKeyBuffer": (()=>checkKeyBuffer),
    "psbtFromBuffer": (()=>psbtFromBuffer),
    "psbtFromKeyVals": (()=>psbtFromKeyVals)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$converter$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bip174/src/esm/lib/converter/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$converter$2f$tools$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bip174/src/esm/lib/converter/tools.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$varuint$2d$bitcoin$2f$src$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/varuint-bitcoin/src/esm/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$browser$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/uint8array-tools/src/mjs/browser.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$typeFields$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bip174/src/esm/lib/typeFields.js [app-client] (ecmascript)");
;
;
;
;
;
function psbtFromBuffer(buffer, txGetter) {
    let offset = 0;
    function varSlice() {
        const { numberValue: keyLen, bytes } = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$varuint$2d$bitcoin$2f$src$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.decode(buffer, offset);
        offset += bytes;
        const key = buffer.slice(offset, offset + Number(keyLen));
        offset += Number(keyLen);
        return key;
    }
    function readUInt32BE() {
        const num = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$browser$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.readUInt32(buffer, offset, 'BE');
        offset += 4;
        return num;
    }
    function readUInt8() {
        const num = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$browser$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.readUInt8(buffer, offset);
        offset += 1;
        return num;
    }
    function getKeyValue() {
        const key = varSlice();
        const value = varSlice();
        return {
            key,
            value
        };
    }
    function checkEndOfKeyValPairs() {
        if (offset >= buffer.length) {
            throw new Error('Format Error: Unexpected End of PSBT');
        }
        const isEnd = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$browser$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.readUInt8(buffer, offset) === 0;
        if (isEnd) {
            offset++;
        }
        return isEnd;
    }
    if (readUInt32BE() !== 0x70736274) {
        throw new Error('Format Error: Invalid Magic Number');
    }
    if (readUInt8() !== 0xff) {
        throw new Error('Format Error: Magic Number must be followed by 0xff separator');
    }
    const globalMapKeyVals = [];
    const globalKeyIndex = {};
    while(!checkEndOfKeyValPairs()){
        const keyVal = getKeyValue();
        const hexKey = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$browser$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.toHex(keyVal.key);
        if (globalKeyIndex[hexKey]) {
            throw new Error('Format Error: Keys must be unique for global keymap: key ' + hexKey);
        }
        globalKeyIndex[hexKey] = 1;
        globalMapKeyVals.push(keyVal);
    }
    const unsignedTxMaps = globalMapKeyVals.filter((keyVal)=>keyVal.key[0] === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$typeFields$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GlobalTypes"].UNSIGNED_TX);
    if (unsignedTxMaps.length !== 1) {
        throw new Error('Format Error: Only one UNSIGNED_TX allowed');
    }
    const unsignedTx = txGetter(unsignedTxMaps[0].value);
    // Get input and output counts to loop the respective fields
    const { inputCount, outputCount } = unsignedTx.getInputOutputCounts();
    const inputKeyVals = [];
    const outputKeyVals = [];
    // Get input fields
    for (const index of (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$converter$2f$tools$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["range"])(inputCount)){
        const inputKeyIndex = {};
        const input = [];
        while(!checkEndOfKeyValPairs()){
            const keyVal = getKeyValue();
            const hexKey = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$browser$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.toHex(keyVal.key);
            if (inputKeyIndex[hexKey]) {
                throw new Error('Format Error: Keys must be unique for each input: ' + 'input index ' + index + ' key ' + hexKey);
            }
            inputKeyIndex[hexKey] = 1;
            input.push(keyVal);
        }
        inputKeyVals.push(input);
    }
    for (const index of (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$converter$2f$tools$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["range"])(outputCount)){
        const outputKeyIndex = {};
        const output = [];
        while(!checkEndOfKeyValPairs()){
            const keyVal = getKeyValue();
            const hexKey = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$browser$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.toHex(keyVal.key);
            if (outputKeyIndex[hexKey]) {
                throw new Error('Format Error: Keys must be unique for each output: ' + 'output index ' + index + ' key ' + hexKey);
            }
            outputKeyIndex[hexKey] = 1;
            output.push(keyVal);
        }
        outputKeyVals.push(output);
    }
    return psbtFromKeyVals(unsignedTx, {
        globalMapKeyVals,
        inputKeyVals,
        outputKeyVals
    });
}
function checkKeyBuffer(type, keyBuf, keyNum) {
    if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$browser$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.compare(keyBuf, Uint8Array.from([
        keyNum
    ]))) {
        throw new Error(// `Format Error: Invalid ${type} key: ${keyBuf.toString('hex')}`,
        `Format Error: Invalid ${type} key: ${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$browser$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.toHex(keyBuf)}`);
    }
}
function psbtFromKeyVals(unsignedTx, { globalMapKeyVals, inputKeyVals, outputKeyVals }) {
    // That was easy :-)
    const globalMap = {
        unsignedTx
    };
    let txCount = 0;
    for (const keyVal of globalMapKeyVals){
        // If a globalMap item needs pubkey, uncomment
        // const pubkey = convert.globals.checkPubkey(keyVal);
        switch(keyVal.key[0]){
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$typeFields$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GlobalTypes"].UNSIGNED_TX:
                checkKeyBuffer('global', keyVal.key, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$typeFields$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GlobalTypes"].UNSIGNED_TX);
                if (txCount > 0) {
                    throw new Error('Format Error: GlobalMap has multiple UNSIGNED_TX');
                }
                txCount++;
                break;
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$typeFields$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GlobalTypes"].GLOBAL_XPUB:
                if (globalMap.globalXpub === undefined) {
                    globalMap.globalXpub = [];
                }
                globalMap.globalXpub.push(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$converter$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.globals.globalXpub.decode(keyVal));
                break;
            default:
                // This will allow inclusion during serialization.
                if (!globalMap.unknownKeyVals) globalMap.unknownKeyVals = [];
                globalMap.unknownKeyVals.push(keyVal);
        }
    }
    // Get input and output counts to loop the respective fields
    const inputCount = inputKeyVals.length;
    const outputCount = outputKeyVals.length;
    const inputs = [];
    const outputs = [];
    // Get input fields
    for (const index of (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$converter$2f$tools$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["range"])(inputCount)){
        const input = {};
        for (const keyVal of inputKeyVals[index]){
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$converter$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.inputs.checkPubkey(keyVal);
            switch(keyVal.key[0]){
                case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$typeFields$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["InputTypes"].NON_WITNESS_UTXO:
                    checkKeyBuffer('input', keyVal.key, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$typeFields$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["InputTypes"].NON_WITNESS_UTXO);
                    if (input.nonWitnessUtxo !== undefined) {
                        throw new Error('Format Error: Input has multiple NON_WITNESS_UTXO');
                    }
                    input.nonWitnessUtxo = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$converter$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.inputs.nonWitnessUtxo.decode(keyVal);
                    break;
                case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$typeFields$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["InputTypes"].WITNESS_UTXO:
                    checkKeyBuffer('input', keyVal.key, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$typeFields$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["InputTypes"].WITNESS_UTXO);
                    if (input.witnessUtxo !== undefined) {
                        throw new Error('Format Error: Input has multiple WITNESS_UTXO');
                    }
                    input.witnessUtxo = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$converter$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.inputs.witnessUtxo.decode(keyVal);
                    break;
                case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$typeFields$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["InputTypes"].PARTIAL_SIG:
                    if (input.partialSig === undefined) {
                        input.partialSig = [];
                    }
                    input.partialSig.push(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$converter$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.inputs.partialSig.decode(keyVal));
                    break;
                case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$typeFields$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["InputTypes"].SIGHASH_TYPE:
                    checkKeyBuffer('input', keyVal.key, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$typeFields$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["InputTypes"].SIGHASH_TYPE);
                    if (input.sighashType !== undefined) {
                        throw new Error('Format Error: Input has multiple SIGHASH_TYPE');
                    }
                    input.sighashType = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$converter$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.inputs.sighashType.decode(keyVal);
                    break;
                case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$typeFields$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["InputTypes"].REDEEM_SCRIPT:
                    checkKeyBuffer('input', keyVal.key, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$typeFields$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["InputTypes"].REDEEM_SCRIPT);
                    if (input.redeemScript !== undefined) {
                        throw new Error('Format Error: Input has multiple REDEEM_SCRIPT');
                    }
                    input.redeemScript = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$converter$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.inputs.redeemScript.decode(keyVal);
                    break;
                case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$typeFields$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["InputTypes"].WITNESS_SCRIPT:
                    checkKeyBuffer('input', keyVal.key, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$typeFields$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["InputTypes"].WITNESS_SCRIPT);
                    if (input.witnessScript !== undefined) {
                        throw new Error('Format Error: Input has multiple WITNESS_SCRIPT');
                    }
                    input.witnessScript = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$converter$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.inputs.witnessScript.decode(keyVal);
                    break;
                case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$typeFields$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["InputTypes"].BIP32_DERIVATION:
                    if (input.bip32Derivation === undefined) {
                        input.bip32Derivation = [];
                    }
                    input.bip32Derivation.push(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$converter$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.inputs.bip32Derivation.decode(keyVal));
                    break;
                case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$typeFields$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["InputTypes"].FINAL_SCRIPTSIG:
                    checkKeyBuffer('input', keyVal.key, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$typeFields$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["InputTypes"].FINAL_SCRIPTSIG);
                    input.finalScriptSig = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$converter$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.inputs.finalScriptSig.decode(keyVal);
                    break;
                case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$typeFields$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["InputTypes"].FINAL_SCRIPTWITNESS:
                    checkKeyBuffer('input', keyVal.key, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$typeFields$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["InputTypes"].FINAL_SCRIPTWITNESS);
                    input.finalScriptWitness = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$converter$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.inputs.finalScriptWitness.decode(keyVal);
                    break;
                case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$typeFields$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["InputTypes"].POR_COMMITMENT:
                    checkKeyBuffer('input', keyVal.key, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$typeFields$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["InputTypes"].POR_COMMITMENT);
                    input.porCommitment = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$converter$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.inputs.porCommitment.decode(keyVal);
                    break;
                case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$typeFields$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["InputTypes"].TAP_KEY_SIG:
                    checkKeyBuffer('input', keyVal.key, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$typeFields$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["InputTypes"].TAP_KEY_SIG);
                    input.tapKeySig = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$converter$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.inputs.tapKeySig.decode(keyVal);
                    break;
                case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$typeFields$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["InputTypes"].TAP_SCRIPT_SIG:
                    if (input.tapScriptSig === undefined) {
                        input.tapScriptSig = [];
                    }
                    input.tapScriptSig.push(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$converter$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.inputs.tapScriptSig.decode(keyVal));
                    break;
                case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$typeFields$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["InputTypes"].TAP_LEAF_SCRIPT:
                    if (input.tapLeafScript === undefined) {
                        input.tapLeafScript = [];
                    }
                    input.tapLeafScript.push(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$converter$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.inputs.tapLeafScript.decode(keyVal));
                    break;
                case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$typeFields$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["InputTypes"].TAP_BIP32_DERIVATION:
                    if (input.tapBip32Derivation === undefined) {
                        input.tapBip32Derivation = [];
                    }
                    input.tapBip32Derivation.push(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$converter$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.inputs.tapBip32Derivation.decode(keyVal));
                    break;
                case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$typeFields$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["InputTypes"].TAP_INTERNAL_KEY:
                    checkKeyBuffer('input', keyVal.key, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$typeFields$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["InputTypes"].TAP_INTERNAL_KEY);
                    input.tapInternalKey = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$converter$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.inputs.tapInternalKey.decode(keyVal);
                    break;
                case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$typeFields$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["InputTypes"].TAP_MERKLE_ROOT:
                    checkKeyBuffer('input', keyVal.key, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$typeFields$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["InputTypes"].TAP_MERKLE_ROOT);
                    input.tapMerkleRoot = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$converter$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.inputs.tapMerkleRoot.decode(keyVal);
                    break;
                default:
                    // This will allow inclusion during serialization.
                    if (!input.unknownKeyVals) input.unknownKeyVals = [];
                    input.unknownKeyVals.push(keyVal);
            }
        }
        inputs.push(input);
    }
    for (const index of (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$converter$2f$tools$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["range"])(outputCount)){
        const output = {};
        for (const keyVal of outputKeyVals[index]){
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$converter$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.outputs.checkPubkey(keyVal);
            switch(keyVal.key[0]){
                case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$typeFields$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["OutputTypes"].REDEEM_SCRIPT:
                    checkKeyBuffer('output', keyVal.key, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$typeFields$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["OutputTypes"].REDEEM_SCRIPT);
                    if (output.redeemScript !== undefined) {
                        throw new Error('Format Error: Output has multiple REDEEM_SCRIPT');
                    }
                    output.redeemScript = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$converter$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.outputs.redeemScript.decode(keyVal);
                    break;
                case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$typeFields$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["OutputTypes"].WITNESS_SCRIPT:
                    checkKeyBuffer('output', keyVal.key, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$typeFields$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["OutputTypes"].WITNESS_SCRIPT);
                    if (output.witnessScript !== undefined) {
                        throw new Error('Format Error: Output has multiple WITNESS_SCRIPT');
                    }
                    output.witnessScript = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$converter$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.outputs.witnessScript.decode(keyVal);
                    break;
                case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$typeFields$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["OutputTypes"].BIP32_DERIVATION:
                    if (output.bip32Derivation === undefined) {
                        output.bip32Derivation = [];
                    }
                    output.bip32Derivation.push(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$converter$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.outputs.bip32Derivation.decode(keyVal));
                    break;
                case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$typeFields$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["OutputTypes"].TAP_INTERNAL_KEY:
                    checkKeyBuffer('output', keyVal.key, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$typeFields$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["OutputTypes"].TAP_INTERNAL_KEY);
                    output.tapInternalKey = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$converter$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.outputs.tapInternalKey.decode(keyVal);
                    break;
                case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$typeFields$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["OutputTypes"].TAP_TREE:
                    checkKeyBuffer('output', keyVal.key, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$typeFields$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["OutputTypes"].TAP_TREE);
                    output.tapTree = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$converter$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.outputs.tapTree.decode(keyVal);
                    break;
                case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$typeFields$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["OutputTypes"].TAP_BIP32_DERIVATION:
                    if (output.tapBip32Derivation === undefined) {
                        output.tapBip32Derivation = [];
                    }
                    output.tapBip32Derivation.push(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$converter$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.outputs.tapBip32Derivation.decode(keyVal));
                    break;
                default:
                    if (!output.unknownKeyVals) output.unknownKeyVals = [];
                    output.unknownKeyVals.push(keyVal);
            }
        }
        outputs.push(output);
    }
    return {
        globalMap,
        inputs,
        outputs
    };
}
}}),
"[project]/node_modules/bip174/src/esm/lib/parser/toBuffer.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "psbtToBuffer": (()=>psbtToBuffer),
    "psbtToKeyVals": (()=>psbtToKeyVals)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$converter$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bip174/src/esm/lib/converter/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$converter$2f$tools$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bip174/src/esm/lib/converter/tools.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$browser$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/uint8array-tools/src/mjs/browser.js [app-client] (ecmascript)");
;
;
;
function psbtToBuffer({ globalMap, inputs, outputs }) {
    const { globalKeyVals, inputKeyVals, outputKeyVals } = psbtToKeyVals({
        globalMap,
        inputs,
        outputs
    });
    const globalBuffer = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$converter$2f$tools$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["keyValsToBuffer"])(globalKeyVals);
    const keyValsOrEmptyToBuffer = (keyVals)=>keyVals.length === 0 ? [
            Uint8Array.from([
                0
            ])
        ] : keyVals.map(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$converter$2f$tools$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["keyValsToBuffer"]);
    const inputBuffers = keyValsOrEmptyToBuffer(inputKeyVals);
    const outputBuffers = keyValsOrEmptyToBuffer(outputKeyVals);
    const header = new Uint8Array(5);
    header.set([
        0x70,
        0x73,
        0x62,
        0x74,
        0xff
    ], 0);
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$browser$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.concat([
        header,
        globalBuffer
    ].concat(inputBuffers, outputBuffers));
}
const sortKeyVals = (a, b)=>{
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$browser$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.compare(a.key, b.key);
};
function keyValsFromMap(keyValMap, converterFactory) {
    const keyHexSet = new Set();
    const keyVals = Object.entries(keyValMap).reduce((result, [key, value])=>{
        if (key === 'unknownKeyVals') return result;
        // We are checking for undefined anyways. So ignore TS error
        // @ts-ignore
        const converter = converterFactory[key];
        if (converter === undefined) return result;
        const encodedKeyVals = (Array.isArray(value) ? value : [
            value
        ]).map(converter.encode);
        const keyHexes = encodedKeyVals.map((kv)=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$browser$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.toHex(kv.key));
        keyHexes.forEach((hex)=>{
            if (keyHexSet.has(hex)) throw new Error('Serialize Error: Duplicate key: ' + hex);
            keyHexSet.add(hex);
        });
        return result.concat(encodedKeyVals);
    }, []);
    // Get other keyVals that have not yet been gotten
    const otherKeyVals = keyValMap.unknownKeyVals ? keyValMap.unknownKeyVals.filter((keyVal)=>{
        return !keyHexSet.has(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$browser$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.toHex(keyVal.key));
    }) : [];
    return keyVals.concat(otherKeyVals).sort(sortKeyVals);
}
function psbtToKeyVals({ globalMap, inputs, outputs }) {
    // First parse the global keyVals
    // Get any extra keyvals to pass along
    return {
        globalKeyVals: keyValsFromMap(globalMap, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$converter$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.globals),
        inputKeyVals: inputs.map((i)=>keyValsFromMap(i, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$converter$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.inputs)),
        outputKeyVals: outputs.map((o)=>keyValsFromMap(o, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$converter$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.outputs))
    };
}
}}),
"[project]/node_modules/bip174/src/esm/lib/parser/index.js [app-client] (ecmascript) <locals>": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({});
;
;
}}),
"[project]/node_modules/bip174/src/esm/lib/parser/index.js [app-client] (ecmascript) <module evaluation>": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, t: __turbopack_require_real__ } = __turbopack_context__;
{
__turbopack_esm__({});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$parser$2f$fromBuffer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bip174/src/esm/lib/parser/fromBuffer.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$parser$2f$toBuffer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bip174/src/esm/lib/parser/toBuffer.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$parser$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/node_modules/bip174/src/esm/lib/parser/index.js [app-client] (ecmascript) <locals>");
}}),
"[project]/node_modules/bip174/src/esm/lib/combiner/index.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "combine": (()=>combine)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$parser$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_import__("[project]/node_modules/bip174/src/esm/lib/parser/index.js [app-client] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$browser$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/uint8array-tools/src/mjs/browser.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$parser$2f$toBuffer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bip174/src/esm/lib/parser/toBuffer.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$parser$2f$fromBuffer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bip174/src/esm/lib/parser/fromBuffer.js [app-client] (ecmascript)");
;
;
function combine(psbts) {
    const self = psbts[0];
    const selfKeyVals = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$parser$2f$toBuffer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["psbtToKeyVals"])(self);
    const others = psbts.slice(1);
    if (others.length === 0) throw new Error('Combine: Nothing to combine');
    const selfTx = getTx(self);
    if (selfTx === undefined) {
        throw new Error('Combine: Self missing transaction');
    }
    const selfGlobalSet = getKeySet(selfKeyVals.globalKeyVals);
    const selfInputSets = selfKeyVals.inputKeyVals.map(getKeySet);
    const selfOutputSets = selfKeyVals.outputKeyVals.map(getKeySet);
    for (const other of others){
        const otherTx = getTx(other);
        if (otherTx === undefined || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$browser$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.compare(otherTx.toBuffer(), selfTx.toBuffer()) !== 0) {
            throw new Error('Combine: One of the Psbts does not have the same transaction.');
        }
        const otherKeyVals = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$parser$2f$toBuffer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["psbtToKeyVals"])(other);
        const otherGlobalSet = getKeySet(otherKeyVals.globalKeyVals);
        otherGlobalSet.forEach(keyPusher(selfGlobalSet, selfKeyVals.globalKeyVals, otherKeyVals.globalKeyVals));
        const otherInputSets = otherKeyVals.inputKeyVals.map(getKeySet);
        otherInputSets.forEach((inputSet, idx)=>inputSet.forEach(keyPusher(selfInputSets[idx], selfKeyVals.inputKeyVals[idx], otherKeyVals.inputKeyVals[idx])));
        const otherOutputSets = otherKeyVals.outputKeyVals.map(getKeySet);
        otherOutputSets.forEach((outputSet, idx)=>outputSet.forEach(keyPusher(selfOutputSets[idx], selfKeyVals.outputKeyVals[idx], otherKeyVals.outputKeyVals[idx])));
    }
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$parser$2f$fromBuffer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["psbtFromKeyVals"])(selfTx, {
        globalMapKeyVals: selfKeyVals.globalKeyVals,
        inputKeyVals: selfKeyVals.inputKeyVals,
        outputKeyVals: selfKeyVals.outputKeyVals
    });
}
function keyPusher(selfSet, selfKeyVals, otherKeyVals) {
    return (key)=>{
        if (selfSet.has(key)) return;
        const newKv = otherKeyVals.filter((kv)=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$browser$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.toHex(kv.key) === key)[0];
        selfKeyVals.push(newKv);
        selfSet.add(key);
    };
}
function getTx(psbt) {
    return psbt.globalMap.unsignedTx;
}
function getKeySet(keyVals) {
    const set = new Set();
    keyVals.forEach((keyVal)=>{
        const hex = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$browser$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.toHex(keyVal.key);
        if (set.has(hex)) throw new Error('Combine: KeyValue Map keys should be unique');
        set.add(hex);
    });
    return set;
}
}}),
"[project]/node_modules/bip174/src/esm/lib/utils.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "addInputAttributes": (()=>addInputAttributes),
    "addOutputAttributes": (()=>addOutputAttributes),
    "checkForInput": (()=>checkForInput),
    "checkForOutput": (()=>checkForOutput),
    "checkHasKey": (()=>checkHasKey),
    "defaultLocktimeSetter": (()=>defaultLocktimeSetter),
    "defaultVersionSetter": (()=>defaultVersionSetter),
    "getEnumLength": (()=>getEnumLength),
    "inputCheckUncleanFinalized": (()=>inputCheckUncleanFinalized),
    "updateGlobal": (()=>updateGlobal),
    "updateInput": (()=>updateInput),
    "updateOutput": (()=>updateOutput)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$converter$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bip174/src/esm/lib/converter/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$browser$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/uint8array-tools/src/mjs/browser.js [app-client] (ecmascript)");
;
;
function checkForInput(inputs, inputIndex) {
    const input = inputs[inputIndex];
    if (input === undefined) throw new Error(`No input #${inputIndex}`);
    return input;
}
function checkForOutput(outputs, outputIndex) {
    const output = outputs[outputIndex];
    if (output === undefined) throw new Error(`No output #${outputIndex}`);
    return output;
}
function checkHasKey(checkKeyVal, keyVals, enumLength) {
    if (checkKeyVal.key[0] < enumLength) {
        throw new Error(`Use the method for your specific key instead of addUnknownKeyVal*`);
    }
    if (keyVals && keyVals.filter((kv)=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$browser$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.compare(kv.key, checkKeyVal.key) === 0).length !== 0) {
        throw new Error(`Duplicate Key: ${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$browser$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.toHex(checkKeyVal.key)}`);
    }
}
function getEnumLength(myenum) {
    let count = 0;
    Object.keys(myenum).forEach((val)=>{
        if (Number(isNaN(Number(val)))) {
            count++;
        }
    });
    return count;
}
function inputCheckUncleanFinalized(inputIndex, input) {
    let result = false;
    if (input.nonWitnessUtxo || input.witnessUtxo) {
        const needScriptSig = !!input.redeemScript;
        const needWitnessScript = !!input.witnessScript;
        const scriptSigOK = !needScriptSig || !!input.finalScriptSig;
        const witnessScriptOK = !needWitnessScript || !!input.finalScriptWitness;
        const hasOneFinal = !!input.finalScriptSig || !!input.finalScriptWitness;
        result = scriptSigOK && witnessScriptOK && hasOneFinal;
    }
    if (result === false) {
        throw new Error(`Input #${inputIndex} has too much or too little data to clean`);
    }
}
function throwForUpdateMaker(typeName, name, expected, data) {
    throw new Error(`Data for ${typeName} key ${name} is incorrect: Expected ` + `${expected} and got ${JSON.stringify(data)}`);
}
function updateMaker(typeName) {
    return (updateData, mainData)=>{
        // @ts-ignore
        for (const name of Object.keys(updateData)){
            // @ts-ignore
            const data = updateData[name];
            // @ts-ignore
            const { canAdd, canAddToArray, check, expected } = // @ts-ignore
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$converter$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__[typeName + 's'][name] || {};
            const isArray = !!canAddToArray;
            // If unknown data. ignore and do not add
            if (check) {
                if (isArray) {
                    if (!Array.isArray(data) || mainData[name] && !Array.isArray(mainData[name])) {
                        throw new Error(`Key type ${name} must be an array`);
                    }
                    if (!data.every(check)) {
                        throwForUpdateMaker(typeName, name, expected, data);
                    }
                    // @ts-ignore
                    const arr = mainData[name] || [];
                    const dupeCheckSet = new Set();
                    if (!data.every((v)=>canAddToArray(arr, v, dupeCheckSet))) {
                        throw new Error('Can not add duplicate data to array');
                    }
                    // @ts-ignore
                    mainData[name] = arr.concat(data);
                } else {
                    if (!check(data)) {
                        throwForUpdateMaker(typeName, name, expected, data);
                    }
                    if (!canAdd(mainData, data)) {
                        throw new Error(`Can not add duplicate data to ${typeName}`);
                    }
                    // @ts-ignore
                    mainData[name] = data;
                }
            }
        }
    };
}
const updateGlobal = updateMaker('global');
const updateInput = updateMaker('input');
const updateOutput = updateMaker('output');
function addInputAttributes(inputs, data) {
    const index = inputs.length - 1;
    const input = checkForInput(inputs, index);
    updateInput(data, input);
}
function addOutputAttributes(outputs, data) {
    const index = outputs.length - 1;
    const output = checkForOutput(outputs, index);
    updateOutput(data, output);
}
function defaultVersionSetter(version, txBuf) {
    if (!(txBuf instanceof Uint8Array) || txBuf.length < 4) {
        throw new Error('Set Version: Invalid Transaction');
    }
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$browser$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.writeUInt32(txBuf, 0, version, 'LE');
    return txBuf;
}
function defaultLocktimeSetter(locktime, txBuf) {
    if (!(txBuf instanceof Uint8Array) || txBuf.length < 4) {
        throw new Error('Set Locktime: Invalid Transaction');
    }
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$browser$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.writeUInt32(txBuf, txBuf.length - 4, locktime, 'LE');
    return txBuf;
}
}}),
"[project]/node_modules/bip174/src/esm/lib/psbt.js [app-client] (ecmascript) <locals>": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "Psbt": (()=>Psbt)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$browser$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/uint8array-tools/src/mjs/browser.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$parser$2f$fromBuffer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bip174/src/esm/lib/parser/fromBuffer.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$parser$2f$toBuffer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bip174/src/esm/lib/parser/toBuffer.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bip174/src/esm/lib/utils.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$typeFields$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bip174/src/esm/lib/typeFields.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$combiner$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bip174/src/esm/lib/combiner/index.js [app-client] (ecmascript)");
;
;
;
;
;
class Psbt {
    constructor(tx){
        this.inputs = [];
        this.outputs = [];
        this.globalMap = {
            unsignedTx: tx
        };
    }
    static fromBase64(data, txFromBuffer) {
        const buffer = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$browser$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.fromBase64(data);
        return this.fromBuffer(buffer, txFromBuffer);
    }
    static fromHex(data, txFromBuffer) {
        const buffer = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$browser$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.fromHex(data);
        return this.fromBuffer(buffer, txFromBuffer);
    }
    static fromBuffer(buffer, txFromBuffer) {
        const results = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$parser$2f$fromBuffer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["psbtFromBuffer"])(buffer, txFromBuffer);
        const psbt = new this(results.globalMap.unsignedTx);
        Object.assign(psbt, results);
        return psbt;
    }
    toBase64() {
        const buffer = this.toBuffer();
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$browser$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.toBase64(buffer);
    }
    toHex() {
        const buffer = this.toBuffer();
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$browser$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.toHex(buffer);
    }
    toBuffer() {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$parser$2f$toBuffer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["psbtToBuffer"])(this);
    }
    updateGlobal(updateData) {
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["updateGlobal"])(updateData, this.globalMap);
        return this;
    }
    updateInput(inputIndex, updateData) {
        const input = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["checkForInput"])(this.inputs, inputIndex);
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["updateInput"])(updateData, input);
        return this;
    }
    updateOutput(outputIndex, updateData) {
        const output = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["checkForOutput"])(this.outputs, outputIndex);
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["updateOutput"])(updateData, output);
        return this;
    }
    addUnknownKeyValToGlobal(keyVal) {
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["checkHasKey"])(keyVal, this.globalMap.unknownKeyVals, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getEnumLength"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$typeFields$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GlobalTypes"]));
        if (!this.globalMap.unknownKeyVals) this.globalMap.unknownKeyVals = [];
        this.globalMap.unknownKeyVals.push(keyVal);
        return this;
    }
    addUnknownKeyValToInput(inputIndex, keyVal) {
        const input = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["checkForInput"])(this.inputs, inputIndex);
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["checkHasKey"])(keyVal, input.unknownKeyVals, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getEnumLength"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$typeFields$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["InputTypes"]));
        if (!input.unknownKeyVals) input.unknownKeyVals = [];
        input.unknownKeyVals.push(keyVal);
        return this;
    }
    addUnknownKeyValToOutput(outputIndex, keyVal) {
        const output = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["checkForOutput"])(this.outputs, outputIndex);
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["checkHasKey"])(keyVal, output.unknownKeyVals, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getEnumLength"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$typeFields$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["OutputTypes"]));
        if (!output.unknownKeyVals) output.unknownKeyVals = [];
        output.unknownKeyVals.push(keyVal);
        return this;
    }
    addInput(inputData) {
        this.globalMap.unsignedTx.addInput(inputData);
        this.inputs.push({
            unknownKeyVals: []
        });
        const addKeyVals = inputData.unknownKeyVals || [];
        const inputIndex = this.inputs.length - 1;
        if (!Array.isArray(addKeyVals)) {
            throw new Error('unknownKeyVals must be an Array');
        }
        addKeyVals.forEach((keyVal)=>this.addUnknownKeyValToInput(inputIndex, keyVal));
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["addInputAttributes"])(this.inputs, inputData);
        return this;
    }
    addOutput(outputData) {
        this.globalMap.unsignedTx.addOutput(outputData);
        this.outputs.push({
            unknownKeyVals: []
        });
        const addKeyVals = outputData.unknownKeyVals || [];
        const outputIndex = this.outputs.length - 1;
        if (!Array.isArray(addKeyVals)) {
            throw new Error('unknownKeyVals must be an Array');
        }
        addKeyVals.forEach((keyVal)=>this.addUnknownKeyValToOutput(outputIndex, keyVal));
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["addOutputAttributes"])(this.outputs, outputData);
        return this;
    }
    clearFinalizedInput(inputIndex) {
        const input = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["checkForInput"])(this.inputs, inputIndex);
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["inputCheckUncleanFinalized"])(inputIndex, input);
        for (const key of Object.keys(input)){
            if (![
                'witnessUtxo',
                'nonWitnessUtxo',
                'finalScriptSig',
                'finalScriptWitness',
                'unknownKeyVals'
            ].includes(key)) {
                // @ts-ignore
                delete input[key];
            }
        }
        return this;
    }
    combine(...those) {
        // Combine this with those.
        // Return self for chaining.
        const result = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$combiner$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["combine"])([
            this
        ].concat(those));
        Object.assign(this, result);
        return this;
    }
    getTransaction() {
        return this.globalMap.unsignedTx.toBuffer();
    }
}
;
}}),
"[project]/node_modules/bip174/src/esm/lib/psbt.js [app-client] (ecmascript) <module evaluation>": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, t: __turbopack_require_real__ } = __turbopack_context__;
{
__turbopack_esm__({});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$combiner$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bip174/src/esm/lib/combiner/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$parser$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_import__("[project]/node_modules/bip174/src/esm/lib/parser/index.js [app-client] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$typeFields$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bip174/src/esm/lib/typeFields.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bip174/src/esm/lib/utils.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$browser$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/uint8array-tools/src/mjs/browser.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$psbt$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/node_modules/bip174/src/esm/lib/psbt.js [app-client] (ecmascript) <locals>");
}}),
}]);

//# sourceMappingURL=node_modules_bip174_src_esm_lib_d61c04._.js.map