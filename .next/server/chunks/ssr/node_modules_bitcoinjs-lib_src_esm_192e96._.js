module.exports = {

"[project]/node_modules/bitcoinjs-lib/src/esm/networks.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
// https://en.bitcoin.it/wiki/List_of_address_prefixes
// Dogecoin BIP32 is a proposed standard: https://bitcointalk.org/index.php?topic=409731
/**
 * Represents the Bitcoin network configuration.
 */ __turbopack_esm__({
    "bitcoin": (()=>bitcoin),
    "regtest": (()=>regtest),
    "testnet": (()=>testnet)
});
const bitcoin = {
    /**
   * The message prefix used for signing Bitcoin messages.
   */ messagePrefix: '\x18Bitcoin Signed Message:\n',
    /**
   * The Bech32 prefix used for Bitcoin addresses.
   */ bech32: 'bc',
    /**
   * The BIP32 key prefixes for Bitcoin.
   */ bip32: {
        /**
     * The public key prefix for BIP32 extended public keys.
     */ public: 0x0488b21e,
        /**
     * The private key prefix for BIP32 extended private keys.
     */ private: 0x0488ade4
    },
    /**
   * The prefix for Bitcoin public key hashes.
   */ pubKeyHash: 0x00,
    /**
   * The prefix for Bitcoin script hashes.
   */ scriptHash: 0x05,
    /**
   * The prefix for Bitcoin Wallet Import Format (WIF) private keys.
   */ wif: 0x80
};
const regtest = {
    messagePrefix: '\x18Bitcoin Signed Message:\n',
    bech32: 'bcrt',
    bip32: {
        public: 0x043587cf,
        private: 0x04358394
    },
    pubKeyHash: 0x6f,
    scriptHash: 0xc4,
    wif: 0xef
};
const testnet = {
    messagePrefix: '\x18Bitcoin Signed Message:\n',
    bech32: 'tb',
    bip32: {
        public: 0x043587cf,
        private: 0x04358394
    },
    pubKeyHash: 0x6f,
    scriptHash: 0xc4,
    wif: 0xef
};
}}),
"[project]/node_modules/bitcoinjs-lib/src/esm/bip66.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
// Reference https://github.com/bitcoin/bips/blob/master/bip-0066.mediawiki
// Format: 0x30 [total-length] 0x02 [R-length] [R] 0x02 [S-length] [S]
// NOTE: SIGHASH byte ignored AND restricted, truncate before use
/**
 * Checks if the given buffer is a valid BIP66-encoded signature.
 *
 * @param buffer - The buffer to check.
 * @returns A boolean indicating whether the buffer is a valid BIP66-encoded signature.
 */ __turbopack_esm__({
    "check": (()=>check),
    "decode": (()=>decode),
    "encode": (()=>encode)
});
function check(buffer) {
    if (buffer.length < 8) return false;
    if (buffer.length > 72) return false;
    if (buffer[0] !== 0x30) return false;
    if (buffer[1] !== buffer.length - 2) return false;
    if (buffer[2] !== 0x02) return false;
    const lenR = buffer[3];
    if (lenR === 0) return false;
    if (5 + lenR >= buffer.length) return false;
    if (buffer[4 + lenR] !== 0x02) return false;
    const lenS = buffer[5 + lenR];
    if (lenS === 0) return false;
    if (6 + lenR + lenS !== buffer.length) return false;
    if (buffer[4] & 0x80) return false;
    if (lenR > 1 && buffer[4] === 0x00 && !(buffer[5] & 0x80)) return false;
    if (buffer[lenR + 6] & 0x80) return false;
    if (lenS > 1 && buffer[lenR + 6] === 0x00 && !(buffer[lenR + 7] & 0x80)) return false;
    return true;
}
function decode(buffer) {
    if (buffer.length < 8) throw new Error('DER sequence length is too short');
    if (buffer.length > 72) throw new Error('DER sequence length is too long');
    if (buffer[0] !== 0x30) throw new Error('Expected DER sequence');
    if (buffer[1] !== buffer.length - 2) throw new Error('DER sequence length is invalid');
    if (buffer[2] !== 0x02) throw new Error('Expected DER integer');
    const lenR = buffer[3];
    if (lenR === 0) throw new Error('R length is zero');
    if (5 + lenR >= buffer.length) throw new Error('R length is too long');
    if (buffer[4 + lenR] !== 0x02) throw new Error('Expected DER integer (2)');
    const lenS = buffer[5 + lenR];
    if (lenS === 0) throw new Error('S length is zero');
    if (6 + lenR + lenS !== buffer.length) throw new Error('S length is invalid');
    if (buffer[4] & 0x80) throw new Error('R value is negative');
    if (lenR > 1 && buffer[4] === 0x00 && !(buffer[5] & 0x80)) throw new Error('R value excessively padded');
    if (buffer[lenR + 6] & 0x80) throw new Error('S value is negative');
    if (lenS > 1 && buffer[lenR + 6] === 0x00 && !(buffer[lenR + 7] & 0x80)) throw new Error('S value excessively padded');
    // non-BIP66 - extract R, S values
    return {
        r: buffer.slice(4, 4 + lenR),
        s: buffer.slice(6 + lenR)
    };
}
function encode(r, s) {
    const lenR = r.length;
    const lenS = s.length;
    if (lenR === 0) throw new Error('R length is zero');
    if (lenS === 0) throw new Error('S length is zero');
    if (lenR > 33) throw new Error('R length is too long');
    if (lenS > 33) throw new Error('S length is too long');
    if (r[0] & 0x80) throw new Error('R value is negative');
    if (s[0] & 0x80) throw new Error('S value is negative');
    if (lenR > 1 && r[0] === 0x00 && !(r[1] & 0x80)) throw new Error('R value excessively padded');
    if (lenS > 1 && s[0] === 0x00 && !(s[1] & 0x80)) throw new Error('S value excessively padded');
    const signature = new Uint8Array(6 + lenR + lenS);
    // 0x30 [total-length] 0x02 [R-length] [R] 0x02 [S-length] [S]
    signature[0] = 0x30;
    signature[1] = signature.length - 2;
    signature[2] = 0x02;
    signature[3] = r.length;
    signature.set(r, 4);
    signature[4 + lenR] = 0x02;
    signature[5 + lenR] = s.length;
    signature.set(s, 6 + lenR);
    return signature;
}
}}),
"[project]/node_modules/bitcoinjs-lib/src/esm/ops.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "OPS": (()=>OPS),
    "REVERSE_OPS": (()=>REVERSE_OPS)
});
const OPS = {
    OP_FALSE: 0,
    OP_0: 0,
    OP_PUSHDATA1: 76,
    OP_PUSHDATA2: 77,
    OP_PUSHDATA4: 78,
    OP_1NEGATE: 79,
    OP_RESERVED: 80,
    OP_TRUE: 81,
    OP_1: 81,
    OP_2: 82,
    OP_3: 83,
    OP_4: 84,
    OP_5: 85,
    OP_6: 86,
    OP_7: 87,
    OP_8: 88,
    OP_9: 89,
    OP_10: 90,
    OP_11: 91,
    OP_12: 92,
    OP_13: 93,
    OP_14: 94,
    OP_15: 95,
    OP_16: 96,
    OP_NOP: 97,
    OP_VER: 98,
    OP_IF: 99,
    OP_NOTIF: 100,
    OP_VERIF: 101,
    OP_VERNOTIF: 102,
    OP_ELSE: 103,
    OP_ENDIF: 104,
    OP_VERIFY: 105,
    OP_RETURN: 106,
    OP_TOALTSTACK: 107,
    OP_FROMALTSTACK: 108,
    OP_2DROP: 109,
    OP_2DUP: 110,
    OP_3DUP: 111,
    OP_2OVER: 112,
    OP_2ROT: 113,
    OP_2SWAP: 114,
    OP_IFDUP: 115,
    OP_DEPTH: 116,
    OP_DROP: 117,
    OP_DUP: 118,
    OP_NIP: 119,
    OP_OVER: 120,
    OP_PICK: 121,
    OP_ROLL: 122,
    OP_ROT: 123,
    OP_SWAP: 124,
    OP_TUCK: 125,
    OP_CAT: 126,
    OP_SUBSTR: 127,
    OP_LEFT: 128,
    OP_RIGHT: 129,
    OP_SIZE: 130,
    OP_INVERT: 131,
    OP_AND: 132,
    OP_OR: 133,
    OP_XOR: 134,
    OP_EQUAL: 135,
    OP_EQUALVERIFY: 136,
    OP_RESERVED1: 137,
    OP_RESERVED2: 138,
    OP_1ADD: 139,
    OP_1SUB: 140,
    OP_2MUL: 141,
    OP_2DIV: 142,
    OP_NEGATE: 143,
    OP_ABS: 144,
    OP_NOT: 145,
    OP_0NOTEQUAL: 146,
    OP_ADD: 147,
    OP_SUB: 148,
    OP_MUL: 149,
    OP_DIV: 150,
    OP_MOD: 151,
    OP_LSHIFT: 152,
    OP_RSHIFT: 153,
    OP_BOOLAND: 154,
    OP_BOOLOR: 155,
    OP_NUMEQUAL: 156,
    OP_NUMEQUALVERIFY: 157,
    OP_NUMNOTEQUAL: 158,
    OP_LESSTHAN: 159,
    OP_GREATERTHAN: 160,
    OP_LESSTHANOREQUAL: 161,
    OP_GREATERTHANOREQUAL: 162,
    OP_MIN: 163,
    OP_MAX: 164,
    OP_WITHIN: 165,
    OP_RIPEMD160: 166,
    OP_SHA1: 167,
    OP_SHA256: 168,
    OP_HASH160: 169,
    OP_HASH256: 170,
    OP_CODESEPARATOR: 171,
    OP_CHECKSIG: 172,
    OP_CHECKSIGVERIFY: 173,
    OP_CHECKMULTISIG: 174,
    OP_CHECKMULTISIGVERIFY: 175,
    OP_NOP1: 176,
    OP_NOP2: 177,
    OP_CHECKLOCKTIMEVERIFY: 177,
    OP_NOP3: 178,
    OP_CHECKSEQUENCEVERIFY: 178,
    OP_NOP4: 179,
    OP_NOP5: 180,
    OP_NOP6: 181,
    OP_NOP7: 182,
    OP_NOP8: 183,
    OP_NOP9: 184,
    OP_NOP10: 185,
    OP_CHECKSIGADD: 186,
    OP_PUBKEYHASH: 253,
    OP_PUBKEY: 254,
    OP_INVALIDOPCODE: 255
};
const REVERSE_OPS = {};
for (const op of Object.keys(OPS)){
    const code = OPS[op];
    REVERSE_OPS[code] = op;
}
;
}}),
"[project]/node_modules/bitcoinjs-lib/src/esm/push_data.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "decode": (()=>decode),
    "encode": (()=>encode),
    "encodingLength": (()=>encodingLength)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$ops$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/ops.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/uint8array-tools/src/mjs/index.js [app-ssr] (ecmascript)");
;
;
function encodingLength(i) {
    return i < __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$ops$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["OPS"].OP_PUSHDATA1 ? 1 : i <= 0xff ? 2 : i <= 0xffff ? 3 : 5;
}
function encode(buffer, num, offset) {
    const size = encodingLength(num);
    // ~6 bit
    if (size === 1) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.writeUInt8(buffer, offset, num);
    // 8 bit
    } else if (size === 2) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.writeUInt8(buffer, offset, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$ops$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["OPS"].OP_PUSHDATA1);
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.writeUInt8(buffer, offset + 1, num);
    // 16 bit
    } else if (size === 3) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.writeUInt8(buffer, offset, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$ops$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["OPS"].OP_PUSHDATA2);
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.writeUInt16(buffer, offset + 1, num, 'LE');
    // 32 bit
    } else {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.writeUInt8(buffer, offset, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$ops$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["OPS"].OP_PUSHDATA4);
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.writeUInt32(buffer, offset + 1, num, 'LE');
    }
    return size;
}
function decode(buffer, offset) {
    const opcode = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.readUInt8(buffer, offset);
    let num;
    let size;
    // ~6 bit
    if (opcode < __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$ops$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["OPS"].OP_PUSHDATA1) {
        num = opcode;
        size = 1;
    // 8 bit
    } else if (opcode === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$ops$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["OPS"].OP_PUSHDATA1) {
        if (offset + 2 > buffer.length) return null;
        num = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.readUInt8(buffer, offset + 1);
        size = 2;
    // 16 bit
    } else if (opcode === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$ops$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["OPS"].OP_PUSHDATA2) {
        if (offset + 3 > buffer.length) return null;
        num = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.readUInt16(buffer, offset + 1, 'LE');
        size = 3;
    // 32 bit
    } else {
        if (offset + 5 > buffer.length) return null;
        if (opcode !== __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$ops$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["OPS"].OP_PUSHDATA4) throw new Error('Unexpected opcode');
        num = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.readUInt32(buffer, offset + 1, 'LE');
        size = 5;
    }
    return {
        opcode,
        number: num,
        size
    };
}
}}),
"[project]/node_modules/bitcoinjs-lib/src/esm/script_number.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "decode": (()=>decode),
    "encode": (()=>encode)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/uint8array-tools/src/mjs/index.js [app-ssr] (ecmascript)");
;
function decode(buffer, maxLength, minimal) {
    maxLength = maxLength || 4;
    minimal = minimal === undefined ? true : minimal;
    const length = buffer.length;
    if (length === 0) return 0;
    if (length > maxLength) throw new TypeError('Script number overflow');
    if (minimal) {
        if ((buffer[length - 1] & 0x7f) === 0) {
            if (length <= 1 || (buffer[length - 2] & 0x80) === 0) throw new Error('Non-minimally encoded script number');
        }
    }
    // 40-bit
    if (length === 5) {
        const a = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.readUInt32(buffer, 0, 'LE');
        const b = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.readUInt8(buffer, 4);
        if (b & 0x80) return -((b & ~0x80) * 0x100000000 + a);
        return b * 0x100000000 + a;
    }
    // 32-bit / 24-bit / 16-bit / 8-bit
    let result = 0;
    for(let i = 0; i < length; ++i){
        result |= buffer[i] << 8 * i;
    }
    if (buffer[length - 1] & 0x80) return -(result & ~(0x80 << 8 * (length - 1)));
    return result;
}
function scriptNumSize(i) {
    return i > 0x7fffffff ? 5 : i > 0x7fffff ? 4 : i > 0x7fff ? 3 : i > 0x7f ? 2 : i > 0x00 ? 1 : 0;
}
function encode(_number) {
    let value = Math.abs(_number);
    const size = scriptNumSize(value);
    const buffer = new Uint8Array(size);
    const negative = _number < 0;
    for(let i = 0; i < size; ++i){
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.writeUInt8(buffer, i, value & 0xff);
        value >>= 8;
    }
    if (buffer[size - 1] & 0x80) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.writeUInt8(buffer, size - 1, negative ? 0x80 : 0x00);
    } else if (negative) {
        buffer[size - 1] |= 0x80;
    }
    return buffer;
}
}}),
"[project]/node_modules/bitcoinjs-lib/src/esm/types.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "Buffer256bitSchema": (()=>Buffer256bitSchema),
    "BufferSchema": (()=>BufferSchema),
    "Hash160bitSchema": (()=>Hash160bitSchema),
    "Hash256bitSchema": (()=>Hash256bitSchema),
    "HexSchema": (()=>HexSchema),
    "NBufferSchemaFactory": (()=>NBufferSchemaFactory),
    "NullablePartial": (()=>NullablePartial),
    "SatoshiSchema": (()=>SatoshiSchema),
    "TAPLEAF_VERSION_MASK": (()=>TAPLEAF_VERSION_MASK),
    "UInt32Schema": (()=>UInt32Schema),
    "UInt8Schema": (()=>UInt8Schema),
    "isPoint": (()=>isPoint),
    "isTapleaf": (()=>isTapleaf),
    "isTaptree": (()=>isTaptree),
    "stacksEqual": (()=>stacksEqual)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/uint8array-tools/src/mjs/index.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/valibot/dist/index.js [app-ssr] (ecmascript)");
;
;
const ZERO32 = new Uint8Array(32);
const EC_P = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.fromHex('fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f');
const NBufferSchemaFactory = (size)=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.pipe(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.instance(Uint8Array), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.length(size));
function stacksEqual(a, b) {
    if (a.length !== b.length) return false;
    return a.every((x, i)=>{
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.compare(x, b[i]) === 0;
    });
}
function isPoint(p) {
    if (!(p instanceof Uint8Array)) return false;
    if (p.length < 33) return false;
    const t = p[0];
    const x = p.slice(1, 33);
    if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.compare(ZERO32, x) === 0) return false;
    if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.compare(x, EC_P) >= 0) return false;
    if ((t === 0x02 || t === 0x03) && p.length === 33) {
        return true;
    }
    const y = p.slice(33);
    if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.compare(ZERO32, y) === 0) return false;
    if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.compare(y, EC_P) >= 0) return false;
    if (t === 0x04 && p.length === 65) return true;
    return false;
}
const TAPLEAF_VERSION_MASK = 0xfe;
function isTapleaf(o) {
    if (!o || !('output' in o)) return false;
    if (!(o.output instanceof Uint8Array)) return false;
    if (o.version !== undefined) return (o.version & TAPLEAF_VERSION_MASK) === o.version;
    return true;
}
function isTaptree(scriptTree) {
    if (!Array.isArray(scriptTree)) return isTapleaf(scriptTree);
    if (scriptTree.length !== 2) return false;
    return scriptTree.every((t)=>isTaptree(t));
}
const Buffer256bitSchema = NBufferSchemaFactory(32);
const Hash160bitSchema = NBufferSchemaFactory(20);
const Hash256bitSchema = NBufferSchemaFactory(32);
const BufferSchema = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.instance(Uint8Array);
const HexSchema = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.pipe(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.string(), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.regex(/^([0-9a-f]{2})+$/i));
const UInt8Schema = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.pipe(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.number(), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.integer(), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.minValue(0), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.maxValue(0xff));
const UInt32Schema = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.pipe(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.number(), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.integer(), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.minValue(0), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.maxValue(0xffffffff));
const SatoshiSchema = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.pipe(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.bigint(), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.minValue(0n), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.maxValue(0x7fffffffffffffffn));
const NullablePartial = (a)=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.object(Object.entries(a).reduce((acc, next)=>({
            ...acc,
            [next[0]]: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.nullish(next[1])
        }), {}));
}}),
"[project]/node_modules/bitcoinjs-lib/src/esm/script.js [app-ssr] (ecmascript) <locals>": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * Script tools, including decompile, compile, toASM, fromASM, toStack, isCanonicalPubKey, isCanonicalScriptSignature
 * @packageDocumentation
 */ __turbopack_esm__({
    "compile": (()=>compile),
    "countNonPushOnlyOPs": (()=>countNonPushOnlyOPs),
    "decompile": (()=>decompile),
    "fromASM": (()=>fromASM),
    "isCanonicalPubKey": (()=>isCanonicalPubKey),
    "isCanonicalScriptSignature": (()=>isCanonicalScriptSignature),
    "isDefinedHashType": (()=>isDefinedHashType),
    "isPushOnly": (()=>isPushOnly),
    "number": (()=>number),
    "signature": (()=>signature),
    "toASM": (()=>toASM),
    "toStack": (()=>toStack)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$script_number$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/script_number.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$script_signature$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/script_signature.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$ops$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/ops.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/valibot/dist/index.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/types.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$push_data$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/push_data.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/uint8array-tools/src/mjs/index.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$bip66$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/bip66.js [app-ssr] (ecmascript)");
;
;
;
;
;
;
;
;
const OP_INT_BASE = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$ops$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["OPS"].OP_RESERVED; // OP_1 - 1
;
const StackSchema = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.array(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.union([
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.instance(Uint8Array),
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.number()
]));
function isOPInt(value) {
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.is(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.number(), value) && (value === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$ops$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["OPS"].OP_0 || value >= __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$ops$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["OPS"].OP_1 && value <= __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$ops$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["OPS"].OP_16 || value === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$ops$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["OPS"].OP_1NEGATE);
}
function isPushOnlyChunk(value) {
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.is(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.BufferSchema, value) || isOPInt(value);
}
function isPushOnly(value) {
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.is(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.pipe(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.any(), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.everyItem(isPushOnlyChunk)), value);
}
function countNonPushOnlyOPs(value) {
    return value.length - value.filter(isPushOnlyChunk).length;
}
function asMinimalOP(buffer) {
    if (buffer.length === 0) return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$ops$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["OPS"].OP_0;
    if (buffer.length !== 1) return;
    if (buffer[0] >= 1 && buffer[0] <= 16) return OP_INT_BASE + buffer[0];
    if (buffer[0] === 0x81) return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$ops$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["OPS"].OP_1NEGATE;
}
function chunksIsBuffer(buf) {
    return buf instanceof Uint8Array;
}
function chunksIsArray(buf) {
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.is(StackSchema, buf);
}
function singleChunkIsBuffer(buf) {
    return buf instanceof Uint8Array;
}
function compile(chunks) {
    // TODO: remove me
    if (chunksIsBuffer(chunks)) return chunks;
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.parse(StackSchema, chunks);
    const bufferSize = chunks.reduce((accum, chunk)=>{
        // data chunk
        if (singleChunkIsBuffer(chunk)) {
            // adhere to BIP62.3, minimal push policy
            if (chunk.length === 1 && asMinimalOP(chunk) !== undefined) {
                return accum + 1;
            }
            return accum + __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$push_data$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.encodingLength(chunk.length) + chunk.length;
        }
        // opcode
        return accum + 1;
    }, 0.0);
    const buffer = new Uint8Array(bufferSize);
    let offset = 0;
    chunks.forEach((chunk)=>{
        // data chunk
        if (singleChunkIsBuffer(chunk)) {
            // adhere to BIP62.3, minimal push policy
            const opcode = asMinimalOP(chunk);
            if (opcode !== undefined) {
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.writeUInt8(buffer, offset, opcode);
                offset += 1;
                return;
            }
            offset += __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$push_data$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.encode(buffer, chunk.length, offset);
            buffer.set(chunk, offset);
            offset += chunk.length;
        // opcode
        } else {
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.writeUInt8(buffer, offset, chunk);
            offset += 1;
        }
    });
    if (offset !== buffer.length) throw new Error('Could not decode chunks');
    return buffer;
}
function decompile(buffer) {
    // TODO: remove me
    if (chunksIsArray(buffer)) return buffer;
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.parse(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.BufferSchema, buffer);
    const chunks = [];
    let i = 0;
    while(i < buffer.length){
        const opcode = buffer[i];
        // data chunk
        if (opcode > __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$ops$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["OPS"].OP_0 && opcode <= __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$ops$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["OPS"].OP_PUSHDATA4) {
            const d = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$push_data$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.decode(buffer, i);
            // did reading a pushDataInt fail?
            if (d === null) return null;
            i += d.size;
            // attempt to read too much data?
            if (i + d.number > buffer.length) return null;
            const data = buffer.slice(i, i + d.number);
            i += d.number;
            // decompile minimally
            const op = asMinimalOP(data);
            if (op !== undefined) {
                chunks.push(op);
            } else {
                chunks.push(data);
            }
        // opcode
        } else {
            chunks.push(opcode);
            i += 1;
        }
    }
    return chunks;
}
function toASM(chunks) {
    if (chunksIsBuffer(chunks)) {
        chunks = decompile(chunks);
    }
    if (!chunks) {
        throw new Error('Could not convert invalid chunks to ASM');
    }
    return chunks.map((chunk)=>{
        // data?
        if (singleChunkIsBuffer(chunk)) {
            const op = asMinimalOP(chunk);
            if (op === undefined) return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.toHex(chunk);
            chunk = op;
        }
        // opcode!
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$ops$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["REVERSE_OPS"][chunk];
    }).join(' ');
}
function fromASM(asm) {
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.parse(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.string(), asm);
    return compile(asm.split(' ').map((chunkStr)=>{
        // opcode?
        if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$ops$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["OPS"][chunkStr] !== undefined) return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$ops$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["OPS"][chunkStr];
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.parse(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.HexSchema, chunkStr);
        // data!
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.fromHex(chunkStr);
    }));
}
function toStack(chunks) {
    chunks = decompile(chunks);
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.parse(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.custom(isPushOnly), chunks);
    return chunks.map((op)=>{
        if (singleChunkIsBuffer(op)) return op;
        if (op === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$ops$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["OPS"].OP_0) return new Uint8Array(0);
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$script_number$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.encode(op - OP_INT_BASE);
    });
}
function isCanonicalPubKey(buffer) {
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.isPoint(buffer);
}
function isDefinedHashType(hashType) {
    const hashTypeMod = hashType & ~0x80;
    return hashTypeMod > 0x00 && hashTypeMod < 0x04;
}
function isCanonicalScriptSignature(buffer) {
    if (!(buffer instanceof Uint8Array)) return false;
    if (!isDefinedHashType(buffer[buffer.length - 1])) return false;
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$bip66$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.check(buffer.slice(0, -1));
}
const number = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$script_number$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__;
const signature = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$script_signature$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__;
}}),
"[project]/node_modules/bitcoinjs-lib/src/esm/script_signature.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "decode": (()=>decode),
    "encode": (()=>encode)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$bip66$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/bip66.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$script$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/script.js [app-ssr] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/uint8array-tools/src/mjs/index.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/types.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$script$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/script.js [app-ssr] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/valibot/dist/index.js [app-ssr] (ecmascript)");
;
;
;
;
;
const ZERO = new Uint8Array(1);
/**
 * Converts a buffer to a DER-encoded buffer.
 * @param x - The buffer to be converted.
 * @returns The DER-encoded buffer.
 */ function toDER(x) {
    let i = 0;
    while(x[i] === 0)++i;
    if (i === x.length) return ZERO;
    x = x.slice(i);
    if (x[0] & 0x80) return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.concat([
        ZERO,
        x
    ]);
    return x;
}
/**
 * Converts a DER-encoded signature to a buffer.
 * If the first byte of the input buffer is 0x00, it is skipped.
 * The resulting buffer is 32 bytes long, filled with zeros if necessary.
 * @param x - The DER-encoded signature.
 * @returns The converted buffer.
 */ function fromDER(x) {
    if (x[0] === 0x00) x = x.slice(1);
    const buffer = new Uint8Array(32);
    const bstart = Math.max(0, 32 - x.length);
    buffer.set(x, bstart);
    return buffer;
}
function decode(buffer) {
    const hashType = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.readUInt8(buffer, buffer.length - 1);
    if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$script$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["isDefinedHashType"])(hashType)) {
        throw new Error('Invalid hashType ' + hashType);
    }
    const decoded = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$bip66$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.decode(buffer.subarray(0, -1));
    const r = fromDER(decoded.r);
    const s = fromDER(decoded.s);
    const signature = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.concat([
        r,
        s
    ]);
    return {
        signature,
        hashType
    };
}
function encode(signature, hashType) {
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.parse(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.object({
        signature: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["NBufferSchemaFactory"])(64),
        hashType: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["UInt8Schema"]
    }), {
        signature,
        hashType
    });
    if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$script$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["isDefinedHashType"])(hashType)) {
        throw new Error('Invalid hashType ' + hashType);
    }
    const hashTypeBuffer = new Uint8Array(1);
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.writeUInt8(hashTypeBuffer, 0, hashType);
    const r = toDER(signature.slice(0, 32));
    const s = toDER(signature.slice(32, 64));
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.concat([
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$bip66$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.encode(r, s),
        hashTypeBuffer
    ]);
}
}}),
"[project]/node_modules/bitcoinjs-lib/src/esm/script.js [app-ssr] (ecmascript) <module evaluation>": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, t: __turbopack_require_real__ } = __turbopack_context__;
{
__turbopack_esm__({});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$bip66$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/bip66.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$ops$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/ops.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$push_data$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/push_data.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$script_number$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/script_number.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$script_signature$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/script_signature.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/types.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/uint8array-tools/src/mjs/index.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$script$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/script.js [app-ssr] (ecmascript) <locals>");
}}),
"[project]/node_modules/bitcoinjs-lib/src/esm/payments/lazy.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "prop": (()=>prop),
    "value": (()=>value)
});
function prop(object, name, f) {
    Object.defineProperty(object, name, {
        configurable: true,
        enumerable: true,
        get () {
            const _value = f.call(this);
            this[name] = _value;
            return _value;
        },
        set (_value) {
            Object.defineProperty(this, name, {
                configurable: true,
                enumerable: true,
                value: _value,
                writable: true
            });
        }
    });
}
function value(f) {
    let _value;
    return ()=>{
        if (_value !== undefined) return _value;
        _value = f();
        return _value;
    };
}
}}),
"[project]/node_modules/bitcoinjs-lib/src/esm/script.js [app-ssr] (ecmascript) <exports>": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, t: __turbopack_require_real__ } = __turbopack_context__;
{
__turbopack_esm__({
    "OPS": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$ops$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["OPS"]),
    "compile": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$script$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["compile"]),
    "countNonPushOnlyOPs": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$script$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["countNonPushOnlyOPs"]),
    "decompile": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$script$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["decompile"]),
    "fromASM": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$script$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["fromASM"]),
    "isCanonicalPubKey": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$script$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["isCanonicalPubKey"]),
    "isCanonicalScriptSignature": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$script$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["isCanonicalScriptSignature"]),
    "isDefinedHashType": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$script$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["isDefinedHashType"]),
    "isPushOnly": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$script$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["isPushOnly"]),
    "number": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$script$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["number"]),
    "signature": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$script$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["signature"]),
    "toASM": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$script$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["toASM"]),
    "toStack": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$script$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["toStack"])
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$ops$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/ops.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$script$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/script.js [app-ssr] (ecmascript) <locals>");
}}),
"[project]/node_modules/bitcoinjs-lib/src/esm/script.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, t: __turbopack_require_real__ } = __turbopack_context__;
{
__turbopack_esm__({
    "OPS": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$script$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$exports$3e$__["OPS"]),
    "compile": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$script$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$exports$3e$__["compile"]),
    "countNonPushOnlyOPs": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$script$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$exports$3e$__["countNonPushOnlyOPs"]),
    "decompile": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$script$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$exports$3e$__["decompile"]),
    "fromASM": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$script$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$exports$3e$__["fromASM"]),
    "isCanonicalPubKey": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$script$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$exports$3e$__["isCanonicalPubKey"]),
    "isCanonicalScriptSignature": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$script$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$exports$3e$__["isCanonicalScriptSignature"]),
    "isDefinedHashType": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$script$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$exports$3e$__["isDefinedHashType"]),
    "isPushOnly": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$script$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$exports$3e$__["isPushOnly"]),
    "number": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$script$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$exports$3e$__["number"]),
    "signature": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$script$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$exports$3e$__["signature"]),
    "toASM": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$script$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$exports$3e$__["toASM"]),
    "toStack": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$script$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$exports$3e$__["toStack"])
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$script$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/script.js [app-ssr] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$script$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$exports$3e$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/script.js [app-ssr] (ecmascript) <exports>");
}}),
"[project]/node_modules/bitcoinjs-lib/src/esm/payments/embed.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "p2data": (()=>p2data)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$networks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/networks.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$script$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/script.js [app-ssr] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/types.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$lazy$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/payments/lazy.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$script$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/script.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/valibot/dist/index.js [app-ssr] (ecmascript)");
;
;
;
;
;
const OPS = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$script$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.OPS;
function p2data(a, opts) {
    if (!a.data && !a.output) throw new TypeError('Not enough data');
    opts = Object.assign({
        validate: true
    }, opts || {});
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.parse(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.partial(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.object({
        network: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.object({}),
        output: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["BufferSchema"],
        data: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.array(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["BufferSchema"])
    })), a);
    const network = a.network || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$networks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["bitcoin"];
    const o = {
        name: 'embed',
        network
    };
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$lazy$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.prop(o, 'output', ()=>{
        if (!a.data) return;
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$script$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.compile([
            OPS.OP_RETURN
        ].concat(a.data));
    });
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$lazy$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.prop(o, 'data', ()=>{
        if (!a.output) return;
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$script$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.decompile(a.output).slice(1);
    });
    // extended validation
    if (opts.validate) {
        if (a.output) {
            const chunks = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$script$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.decompile(a.output);
            if (chunks[0] !== OPS.OP_RETURN) throw new TypeError('Output is invalid');
            if (!chunks.slice(1).every((chunk)=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.is(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["BufferSchema"], chunk))) throw new TypeError('Output is invalid');
            if (a.data && !(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["stacksEqual"])(a.data, o.data)) throw new TypeError('Data mismatch');
        }
    }
    return Object.assign(o, a);
}
}}),
"[project]/node_modules/bitcoinjs-lib/src/esm/payments/p2ms.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "p2ms": (()=>p2ms)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$networks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/networks.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$script$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/script.js [app-ssr] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/types.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$lazy$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/payments/lazy.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$script$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/script.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/valibot/dist/index.js [app-ssr] (ecmascript)");
;
;
;
;
;
const OPS = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$script$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.OPS;
const OP_INT_BASE = OPS.OP_RESERVED; // OP_1 - 1
function p2ms(a, opts) {
    if (!a.input && !a.output && !(a.pubkeys && a.m !== undefined) && !a.signatures) throw new TypeError('Not enough data');
    opts = Object.assign({
        validate: true
    }, opts || {});
    function isAcceptableSignature(x) {
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$script$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.isCanonicalScriptSignature(x) || (opts.allowIncomplete && x === OPS.OP_0) !== undefined;
    }
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.parse(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.partial(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.object({
        network: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.object({}),
        m: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.number(),
        n: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.number(),
        output: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["BufferSchema"],
        pubkeys: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.array(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.custom(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isPoint"]), 'Received invalid pubkey'),
        signatures: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.array(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.custom(isAcceptableSignature), 'Expected signature to be of type isAcceptableSignature'),
        input: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["BufferSchema"]
    })), a);
    const network = a.network || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$networks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["bitcoin"];
    const o = {
        network
    };
    let chunks = [];
    let decoded = false;
    function decode(output) {
        if (decoded) return;
        decoded = true;
        chunks = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$script$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.decompile(output);
        o.m = chunks[0] - OP_INT_BASE;
        o.n = chunks[chunks.length - 2] - OP_INT_BASE;
        o.pubkeys = chunks.slice(1, -2);
    }
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$lazy$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.prop(o, 'output', ()=>{
        if (!a.m) return;
        if (!o.n) return;
        if (!a.pubkeys) return;
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$script$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.compile([].concat(OP_INT_BASE + a.m, a.pubkeys, OP_INT_BASE + o.n, OPS.OP_CHECKMULTISIG));
    });
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$lazy$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.prop(o, 'm', ()=>{
        if (!o.output) return;
        decode(o.output);
        return o.m;
    });
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$lazy$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.prop(o, 'n', ()=>{
        if (!o.pubkeys) return;
        return o.pubkeys.length;
    });
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$lazy$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.prop(o, 'pubkeys', ()=>{
        if (!a.output) return;
        decode(a.output);
        return o.pubkeys;
    });
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$lazy$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.prop(o, 'signatures', ()=>{
        if (!a.input) return;
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$script$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.decompile(a.input).slice(1);
    });
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$lazy$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.prop(o, 'input', ()=>{
        if (!a.signatures) return;
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$script$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.compile([
            OPS.OP_0
        ].concat(a.signatures));
    });
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$lazy$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.prop(o, 'witness', ()=>{
        if (!o.input) return;
        return [];
    });
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$lazy$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.prop(o, 'name', ()=>{
        if (!o.m || !o.n) return;
        return `p2ms(${o.m} of ${o.n})`;
    });
    // extended validation
    if (opts.validate) {
        if (a.output) {
            decode(a.output);
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.parse(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.number(), chunks[0], {
                message: 'Output is invalid'
            });
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.parse(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.number(), chunks[chunks.length - 2], {
                message: 'Output is invalid'
            });
            if (chunks[chunks.length - 1] !== OPS.OP_CHECKMULTISIG) throw new TypeError('Output is invalid');
            if (o.m <= 0 || o.n > 16 || o.m > o.n || o.n !== chunks.length - 3) throw new TypeError('Output is invalid');
            if (!o.pubkeys.every((x)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isPoint"])(x))) throw new TypeError('Output is invalid');
            if (a.m !== undefined && a.m !== o.m) throw new TypeError('m mismatch');
            if (a.n !== undefined && a.n !== o.n) throw new TypeError('n mismatch');
            if (a.pubkeys && !(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["stacksEqual"])(a.pubkeys, o.pubkeys)) throw new TypeError('Pubkeys mismatch');
        }
        if (a.pubkeys) {
            if (a.n !== undefined && a.n !== a.pubkeys.length) throw new TypeError('Pubkey count mismatch');
            o.n = a.pubkeys.length;
            if (o.n < o.m) throw new TypeError('Pubkey count cannot be less than m');
        }
        if (a.signatures) {
            if (a.signatures.length < o.m) throw new TypeError('Not enough signatures provided');
            if (a.signatures.length > o.m) throw new TypeError('Too many signatures provided');
        }
        if (a.input) {
            if (a.input[0] !== OPS.OP_0) throw new TypeError('Input is invalid');
            if (o.signatures.length === 0 || !o.signatures.every(isAcceptableSignature)) throw new TypeError('Input has invalid signature(s)');
            if (a.signatures && !(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["stacksEqual"])(a.signatures, o.signatures)) throw new TypeError('Signature mismatch');
            if (a.m !== undefined && a.m !== a.signatures.length) throw new TypeError('Signature count mismatch');
        }
    }
    return Object.assign(o, a);
}
}}),
"[project]/node_modules/bitcoinjs-lib/src/esm/payments/p2pk.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "p2pk": (()=>p2pk)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$networks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/networks.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$script$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/script.js [app-ssr] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/types.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$lazy$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/payments/lazy.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/uint8array-tools/src/mjs/index.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$script$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/script.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/valibot/dist/index.js [app-ssr] (ecmascript)");
;
;
;
;
;
;
const OPS = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$script$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.OPS;
function p2pk(a, opts) {
    if (!a.input && !a.output && !a.pubkey && !a.input && !a.signature) throw new TypeError('Not enough data');
    opts = Object.assign({
        validate: true
    }, opts || {});
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.parse(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.partial(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.object({
        network: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.object({}),
        output: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["BufferSchema"],
        pubkey: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.custom(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isPoint"], 'invalid pubkey'),
        signature: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.custom(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$script$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.isCanonicalScriptSignature, 'Expected signature to be of type isCanonicalScriptSignature'),
        input: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["BufferSchema"]
    })), a);
    const _chunks = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$lazy$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.value(()=>{
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$script$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.decompile(a.input);
    });
    const network = a.network || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$networks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["bitcoin"];
    const o = {
        name: 'p2pk',
        network
    };
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$lazy$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.prop(o, 'output', ()=>{
        if (!a.pubkey) return;
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$script$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.compile([
            a.pubkey,
            OPS.OP_CHECKSIG
        ]);
    });
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$lazy$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.prop(o, 'pubkey', ()=>{
        if (!a.output) return;
        return a.output.slice(1, -1);
    });
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$lazy$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.prop(o, 'signature', ()=>{
        if (!a.input) return;
        return _chunks()[0];
    });
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$lazy$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.prop(o, 'input', ()=>{
        if (!a.signature) return;
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$script$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.compile([
            a.signature
        ]);
    });
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$lazy$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.prop(o, 'witness', ()=>{
        if (!o.input) return;
        return [];
    });
    // extended validation
    if (opts.validate) {
        if (a.output) {
            if (a.output[a.output.length - 1] !== OPS.OP_CHECKSIG) throw new TypeError('Output is invalid');
            if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isPoint"])(o.pubkey)) throw new TypeError('Output pubkey is invalid');
            if (a.pubkey && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.compare(a.pubkey, o.pubkey) !== 0) throw new TypeError('Pubkey mismatch');
        }
        if (a.signature) {
            if (a.input && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.compare(a.input, o.input) !== 0) throw new TypeError('Signature mismatch');
        }
        if (a.input) {
            if (_chunks().length !== 1) throw new TypeError('Input is invalid');
            if (!__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$script$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.isCanonicalScriptSignature(o.signature)) throw new TypeError('Input has invalid signature');
        }
    }
    return Object.assign(o, a);
}
}}),
"[project]/node_modules/bitcoinjs-lib/src/esm/crypto.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * A module for hashing functions.
 * include ripemd160、sha1、sha256、hash160、hash256、taggedHash
 *
 * @packageDocumentation
 */ __turbopack_esm__({
    "TAGGED_HASH_PREFIXES": (()=>TAGGED_HASH_PREFIXES),
    "TAGS": (()=>TAGS),
    "hash160": (()=>hash160),
    "hash256": (()=>hash256),
    "taggedHash": (()=>taggedHash)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/uint8array-tools/src/mjs/index.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$ripemd160$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@noble/hashes/esm/ripemd160.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$sha256$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@noble/hashes/esm/sha256.js [app-ssr] (ecmascript)");
;
;
;
function hash160(buffer) {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$ripemd160$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ripemd160"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$sha256$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["sha256"])(buffer));
}
function hash256(buffer) {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$sha256$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["sha256"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$sha256$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["sha256"])(buffer));
}
const TAGS = [
    'BIP0340/challenge',
    'BIP0340/aux',
    'BIP0340/nonce',
    'TapLeaf',
    'TapBranch',
    'TapSighash',
    'TapTweak',
    'KeyAgg list',
    'KeyAgg coefficient'
];
const TAGGED_HASH_PREFIXES = {
    'BIP0340/challenge': Uint8Array.from([
        123,
        181,
        45,
        122,
        159,
        239,
        88,
        50,
        62,
        177,
        191,
        122,
        64,
        125,
        179,
        130,
        210,
        243,
        242,
        216,
        27,
        177,
        34,
        79,
        73,
        254,
        81,
        143,
        109,
        72,
        211,
        124,
        123,
        181,
        45,
        122,
        159,
        239,
        88,
        50,
        62,
        177,
        191,
        122,
        64,
        125,
        179,
        130,
        210,
        243,
        242,
        216,
        27,
        177,
        34,
        79,
        73,
        254,
        81,
        143,
        109,
        72,
        211,
        124
    ]),
    'BIP0340/aux': Uint8Array.from([
        241,
        239,
        78,
        94,
        192,
        99,
        202,
        218,
        109,
        148,
        202,
        250,
        157,
        152,
        126,
        160,
        105,
        38,
        88,
        57,
        236,
        193,
        31,
        151,
        45,
        119,
        165,
        46,
        216,
        193,
        204,
        144,
        241,
        239,
        78,
        94,
        192,
        99,
        202,
        218,
        109,
        148,
        202,
        250,
        157,
        152,
        126,
        160,
        105,
        38,
        88,
        57,
        236,
        193,
        31,
        151,
        45,
        119,
        165,
        46,
        216,
        193,
        204,
        144
    ]),
    'BIP0340/nonce': Uint8Array.from([
        7,
        73,
        119,
        52,
        167,
        155,
        203,
        53,
        91,
        155,
        140,
        125,
        3,
        79,
        18,
        28,
        244,
        52,
        215,
        62,
        247,
        45,
        218,
        25,
        135,
        0,
        97,
        251,
        82,
        191,
        235,
        47,
        7,
        73,
        119,
        52,
        167,
        155,
        203,
        53,
        91,
        155,
        140,
        125,
        3,
        79,
        18,
        28,
        244,
        52,
        215,
        62,
        247,
        45,
        218,
        25,
        135,
        0,
        97,
        251,
        82,
        191,
        235,
        47
    ]),
    TapLeaf: Uint8Array.from([
        174,
        234,
        143,
        220,
        66,
        8,
        152,
        49,
        5,
        115,
        75,
        88,
        8,
        29,
        30,
        38,
        56,
        211,
        95,
        28,
        181,
        64,
        8,
        212,
        211,
        87,
        202,
        3,
        190,
        120,
        233,
        238,
        174,
        234,
        143,
        220,
        66,
        8,
        152,
        49,
        5,
        115,
        75,
        88,
        8,
        29,
        30,
        38,
        56,
        211,
        95,
        28,
        181,
        64,
        8,
        212,
        211,
        87,
        202,
        3,
        190,
        120,
        233,
        238
    ]),
    TapBranch: Uint8Array.from([
        25,
        65,
        161,
        242,
        229,
        110,
        185,
        95,
        162,
        169,
        241,
        148,
        190,
        92,
        1,
        247,
        33,
        111,
        51,
        237,
        130,
        176,
        145,
        70,
        52,
        144,
        208,
        91,
        245,
        22,
        160,
        21,
        25,
        65,
        161,
        242,
        229,
        110,
        185,
        95,
        162,
        169,
        241,
        148,
        190,
        92,
        1,
        247,
        33,
        111,
        51,
        237,
        130,
        176,
        145,
        70,
        52,
        144,
        208,
        91,
        245,
        22,
        160,
        21
    ]),
    TapSighash: Uint8Array.from([
        244,
        10,
        72,
        223,
        75,
        42,
        112,
        200,
        180,
        146,
        75,
        242,
        101,
        70,
        97,
        237,
        61,
        149,
        253,
        102,
        163,
        19,
        235,
        135,
        35,
        117,
        151,
        198,
        40,
        228,
        160,
        49,
        244,
        10,
        72,
        223,
        75,
        42,
        112,
        200,
        180,
        146,
        75,
        242,
        101,
        70,
        97,
        237,
        61,
        149,
        253,
        102,
        163,
        19,
        235,
        135,
        35,
        117,
        151,
        198,
        40,
        228,
        160,
        49
    ]),
    TapTweak: Uint8Array.from([
        232,
        15,
        225,
        99,
        156,
        156,
        160,
        80,
        227,
        175,
        27,
        57,
        193,
        67,
        198,
        62,
        66,
        156,
        188,
        235,
        21,
        217,
        64,
        251,
        181,
        197,
        161,
        244,
        175,
        87,
        197,
        233,
        232,
        15,
        225,
        99,
        156,
        156,
        160,
        80,
        227,
        175,
        27,
        57,
        193,
        67,
        198,
        62,
        66,
        156,
        188,
        235,
        21,
        217,
        64,
        251,
        181,
        197,
        161,
        244,
        175,
        87,
        197,
        233
    ]),
    'KeyAgg list': Uint8Array.from([
        72,
        28,
        151,
        28,
        60,
        11,
        70,
        215,
        240,
        178,
        117,
        174,
        89,
        141,
        78,
        44,
        126,
        215,
        49,
        156,
        89,
        74,
        92,
        110,
        199,
        158,
        160,
        212,
        153,
        2,
        148,
        240,
        72,
        28,
        151,
        28,
        60,
        11,
        70,
        215,
        240,
        178,
        117,
        174,
        89,
        141,
        78,
        44,
        126,
        215,
        49,
        156,
        89,
        74,
        92,
        110,
        199,
        158,
        160,
        212,
        153,
        2,
        148,
        240
    ]),
    'KeyAgg coefficient': Uint8Array.from([
        191,
        201,
        4,
        3,
        77,
        28,
        136,
        232,
        200,
        14,
        34,
        229,
        61,
        36,
        86,
        109,
        100,
        130,
        78,
        214,
        66,
        114,
        129,
        192,
        145,
        0,
        249,
        77,
        205,
        82,
        201,
        129,
        191,
        201,
        4,
        3,
        77,
        28,
        136,
        232,
        200,
        14,
        34,
        229,
        61,
        36,
        86,
        109,
        100,
        130,
        78,
        214,
        66,
        114,
        129,
        192,
        145,
        0,
        249,
        77,
        205,
        82,
        201,
        129
    ])
};
function taggedHash(prefix, data) {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$sha256$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["sha256"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.concat([
        TAGGED_HASH_PREFIXES[prefix],
        data
    ]));
}
}}),
"[project]/node_modules/bitcoinjs-lib/src/esm/payments/p2pkh.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "p2pkh": (()=>p2pkh)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$crypto$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/crypto.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$networks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/networks.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$script$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/script.js [app-ssr] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/types.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$lazy$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/payments/lazy.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bs58check$2f$src$2f$esm$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bs58check/src/esm/index.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/uint8array-tools/src/mjs/index.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$script$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/script.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/valibot/dist/index.js [app-ssr] (ecmascript)");
;
;
;
;
;
;
;
;
const OPS = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$script$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.OPS;
function p2pkh(a, opts) {
    if (!a.address && !a.hash && !a.output && !a.pubkey && !a.input) throw new TypeError('Not enough data');
    opts = Object.assign({
        validate: true
    }, opts || {});
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.parse(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.partial(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.object({
        network: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.object({}),
        address: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.string(),
        hash: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Hash160bitSchema"],
        output: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["NBufferSchemaFactory"])(25),
        pubkey: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.custom(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isPoint"]),
        signature: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.custom(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$script$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.isCanonicalScriptSignature),
        input: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["BufferSchema"]
    })), a);
    const _address = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$lazy$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.value(()=>{
        const payload = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bs58check$2f$src$2f$esm$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].decode(a.address);
        const version = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.readUInt8(payload, 0);
        const hash = payload.slice(1);
        return {
            version,
            hash
        };
    });
    const _chunks = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$lazy$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.value(()=>{
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$script$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.decompile(a.input);
    });
    const network = a.network || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$networks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["bitcoin"];
    const o = {
        name: 'p2pkh',
        network
    };
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$lazy$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.prop(o, 'address', ()=>{
        if (!o.hash) return;
        const payload = new Uint8Array(21);
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.writeUInt8(payload, 0, network.pubKeyHash);
        payload.set(o.hash, 1);
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bs58check$2f$src$2f$esm$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].encode(payload);
    });
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$lazy$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.prop(o, 'hash', ()=>{
        if (a.output) return a.output.slice(3, 23);
        if (a.address) return _address().hash;
        if (a.pubkey || o.pubkey) return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$crypto$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.hash160(a.pubkey || o.pubkey);
    });
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$lazy$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.prop(o, 'output', ()=>{
        if (!o.hash) return;
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$script$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.compile([
            OPS.OP_DUP,
            OPS.OP_HASH160,
            o.hash,
            OPS.OP_EQUALVERIFY,
            OPS.OP_CHECKSIG
        ]);
    });
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$lazy$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.prop(o, 'pubkey', ()=>{
        if (!a.input) return;
        return _chunks()[1];
    });
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$lazy$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.prop(o, 'signature', ()=>{
        if (!a.input) return;
        return _chunks()[0];
    });
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$lazy$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.prop(o, 'input', ()=>{
        if (!a.pubkey) return;
        if (!a.signature) return;
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$script$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.compile([
            a.signature,
            a.pubkey
        ]);
    });
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$lazy$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.prop(o, 'witness', ()=>{
        if (!o.input) return;
        return [];
    });
    // extended validation
    if (opts.validate) {
        let hash = Uint8Array.from([]);
        if (a.address) {
            if (_address().version !== network.pubKeyHash) throw new TypeError('Invalid version or Network mismatch');
            if (_address().hash.length !== 20) throw new TypeError('Invalid address');
            hash = _address().hash;
        }
        if (a.hash) {
            if (hash.length > 0 && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.compare(hash, a.hash) !== 0) throw new TypeError('Hash mismatch');
            else hash = a.hash;
        }
        if (a.output) {
            if (a.output.length !== 25 || a.output[0] !== OPS.OP_DUP || a.output[1] !== OPS.OP_HASH160 || a.output[2] !== 0x14 || a.output[23] !== OPS.OP_EQUALVERIFY || a.output[24] !== OPS.OP_CHECKSIG) throw new TypeError('Output is invalid');
            const hash2 = a.output.slice(3, 23);
            if (hash.length > 0 && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.compare(hash, hash2) !== 0) throw new TypeError('Hash mismatch');
            else hash = hash2;
        }
        if (a.pubkey) {
            const pkh = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$crypto$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.hash160(a.pubkey);
            if (hash.length > 0 && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.compare(hash, pkh) !== 0) throw new TypeError('Hash mismatch');
            else hash = pkh;
        }
        if (a.input) {
            const chunks = _chunks();
            if (chunks.length !== 2) throw new TypeError('Input is invalid');
            if (!__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$script$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.isCanonicalScriptSignature(chunks[0])) throw new TypeError('Input has invalid signature');
            if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isPoint"])(chunks[1])) throw new TypeError('Input has invalid pubkey');
            if (a.signature && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.compare(a.signature, chunks[0]) !== 0) throw new TypeError('Signature mismatch');
            if (a.pubkey && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.compare(a.pubkey, chunks[1]) !== 0) throw new TypeError('Pubkey mismatch');
            const pkh = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$crypto$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.hash160(chunks[1]);
            if (hash.length > 0 && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.compare(hash, pkh) !== 0) throw new TypeError('Hash mismatch');
        }
    }
    return Object.assign(o, a);
}
}}),
"[project]/node_modules/bitcoinjs-lib/src/esm/payments/p2sh.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "p2sh": (()=>p2sh)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$crypto$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/crypto.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$networks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/networks.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$script$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/script.js [app-ssr] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/types.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$lazy$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/payments/lazy.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bs58check$2f$src$2f$esm$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bs58check/src/esm/index.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/uint8array-tools/src/mjs/index.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$script$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/script.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/valibot/dist/index.js [app-ssr] (ecmascript)");
;
;
;
;
;
;
;
;
const OPS = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$script$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.OPS;
function p2sh(a, opts) {
    if (!a.address && !a.hash && !a.output && !a.redeem && !a.input) throw new TypeError('Not enough data');
    opts = Object.assign({
        validate: true
    }, opts || {});
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.parse(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.partial(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.object({
        network: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.object({}),
        address: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.string(),
        hash: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["NBufferSchemaFactory"])(20),
        output: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["NBufferSchemaFactory"])(23),
        redeem: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.partial(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.object({
            network: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.object({}),
            output: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["BufferSchema"],
            input: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["BufferSchema"],
            witness: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.array(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["BufferSchema"])
        })),
        input: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["BufferSchema"],
        witness: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.array(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["BufferSchema"])
    })), a);
    let network = a.network;
    if (!network) {
        network = a.redeem && a.redeem.network || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$networks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["bitcoin"];
    }
    const o = {
        network
    };
    const _address = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$lazy$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.value(()=>{
        const payload = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bs58check$2f$src$2f$esm$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].decode(a.address);
        const version = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.readUInt8(payload, 0);
        const hash = payload.slice(1);
        return {
            version,
            hash
        };
    });
    const _chunks = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$lazy$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.value(()=>{
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$script$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.decompile(a.input);
    });
    const _redeem = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$lazy$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.value(()=>{
        const chunks = _chunks();
        const lastChunk = chunks[chunks.length - 1];
        return {
            network,
            output: lastChunk === OPS.OP_FALSE ? Uint8Array.from([]) : lastChunk,
            input: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$script$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.compile(chunks.slice(0, -1)),
            witness: a.witness || []
        };
    });
    // output dependents
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$lazy$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.prop(o, 'address', ()=>{
        if (!o.hash) return;
        const payload = new Uint8Array(21);
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.writeUInt8(payload, 0, o.network.scriptHash);
        payload.set(o.hash, 1);
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bs58check$2f$src$2f$esm$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].encode(payload);
    });
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$lazy$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.prop(o, 'hash', ()=>{
        // in order of least effort
        if (a.output) return a.output.slice(2, 22);
        if (a.address) return _address().hash;
        if (o.redeem && o.redeem.output) return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$crypto$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.hash160(o.redeem.output);
    });
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$lazy$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.prop(o, 'output', ()=>{
        if (!o.hash) return;
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$script$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.compile([
            OPS.OP_HASH160,
            o.hash,
            OPS.OP_EQUAL
        ]);
    });
    // input dependents
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$lazy$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.prop(o, 'redeem', ()=>{
        if (!a.input) return;
        return _redeem();
    });
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$lazy$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.prop(o, 'input', ()=>{
        if (!a.redeem || !a.redeem.input || !a.redeem.output) return;
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$script$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.compile([].concat(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$script$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.decompile(a.redeem.input), a.redeem.output));
    });
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$lazy$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.prop(o, 'witness', ()=>{
        if (o.redeem && o.redeem.witness) return o.redeem.witness;
        if (o.input) return [];
    });
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$lazy$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.prop(o, 'name', ()=>{
        const nameParts = [
            'p2sh'
        ];
        if (o.redeem !== undefined && o.redeem.name !== undefined) nameParts.push(o.redeem.name);
        return nameParts.join('-');
    });
    if (opts.validate) {
        let hash = Uint8Array.from([]);
        if (a.address) {
            if (_address().version !== network.scriptHash) throw new TypeError('Invalid version or Network mismatch');
            if (_address().hash.length !== 20) throw new TypeError('Invalid address');
            hash = _address().hash;
        }
        if (a.hash) {
            if (hash.length > 0 && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.compare(hash, a.hash) !== 0) throw new TypeError('Hash mismatch');
            else hash = a.hash;
        }
        if (a.output) {
            if (a.output.length !== 23 || a.output[0] !== OPS.OP_HASH160 || a.output[1] !== 0x14 || a.output[22] !== OPS.OP_EQUAL) throw new TypeError('Output is invalid');
            const hash2 = a.output.slice(2, 22);
            if (hash.length > 0 && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.compare(hash, hash2) !== 0) throw new TypeError('Hash mismatch');
            else hash = hash2;
        }
        // inlined to prevent 'no-inner-declarations' failing
        const checkRedeem = (redeem)=>{
            // is the redeem output empty/invalid?
            if (redeem.output) {
                const decompile = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$script$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.decompile(redeem.output);
                if (!decompile || decompile.length < 1) throw new TypeError('Redeem.output too short');
                if (redeem.output.byteLength > 520) throw new TypeError('Redeem.output unspendable if larger than 520 bytes');
                if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$script$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.countNonPushOnlyOPs(decompile) > 201) throw new TypeError('Redeem.output unspendable with more than 201 non-push ops');
                // match hash against other sources
                const hash2 = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$crypto$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.hash160(redeem.output);
                if (hash.length > 0 && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.compare(hash, hash2) !== 0) throw new TypeError('Hash mismatch');
                else hash = hash2;
            }
            if (redeem.input) {
                const hasInput = redeem.input.length > 0;
                const hasWitness = redeem.witness && redeem.witness.length > 0;
                if (!hasInput && !hasWitness) throw new TypeError('Empty input');
                if (hasInput && hasWitness) throw new TypeError('Input and witness provided');
                if (hasInput) {
                    const richunks = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$script$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.decompile(redeem.input);
                    if (!__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$script$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.isPushOnly(richunks)) throw new TypeError('Non push-only scriptSig');
                }
            }
        };
        if (a.input) {
            const chunks = _chunks();
            if (!chunks || chunks.length < 1) throw new TypeError('Input too short');
            if (!(_redeem().output instanceof Uint8Array)) throw new TypeError('Input is invalid');
            checkRedeem(_redeem());
        }
        if (a.redeem) {
            if (a.redeem.network && a.redeem.network !== network) throw new TypeError('Network mismatch');
            if (a.input) {
                const redeem = _redeem();
                if (a.redeem.output && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.compare(a.redeem.output, redeem.output) !== 0) throw new TypeError('Redeem.output mismatch');
                if (a.redeem.input && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.compare(a.redeem.input, redeem.input) !== 0) throw new TypeError('Redeem.input mismatch');
            }
            checkRedeem(a.redeem);
        }
        if (a.witness) {
            if (a.redeem && a.redeem.witness && !(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["stacksEqual"])(a.redeem.witness, a.witness)) throw new TypeError('Witness and redeem.witness mismatch');
        }
    }
    return Object.assign(o, a);
}
}}),
"[project]/node_modules/bitcoinjs-lib/src/esm/payments/p2wpkh.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "p2wpkh": (()=>p2wpkh)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$crypto$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/crypto.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$networks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/networks.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$script$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/script.js [app-ssr] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/types.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$lazy$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/payments/lazy.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bech32$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bech32/dist/index.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/uint8array-tools/src/mjs/index.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$script$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/script.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/valibot/dist/index.js [app-ssr] (ecmascript)");
;
;
;
;
;
;
;
;
const OPS = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$script$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.OPS;
const EMPTY_BUFFER = new Uint8Array(0);
function p2wpkh(a, opts) {
    if (!a.address && !a.hash && !a.output && !a.pubkey && !a.witness) throw new TypeError('Not enough data');
    opts = Object.assign({
        validate: true
    }, opts || {});
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.parse(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.partial(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.object({
        address: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.string(),
        hash: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["NBufferSchemaFactory"])(20),
        input: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["NBufferSchemaFactory"])(0),
        network: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.object({}),
        output: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["NBufferSchemaFactory"])(22),
        pubkey: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.custom(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isPoint"], 'Not a valid pubkey'),
        signature: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.custom(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$script$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.isCanonicalScriptSignature),
        witness: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.array(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["BufferSchema"])
    })), a);
    const _address = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$lazy$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.value(()=>{
        const result = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bech32$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["bech32"].decode(a.address);
        const version = result.words.shift();
        const data = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bech32$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["bech32"].fromWords(result.words);
        return {
            version,
            prefix: result.prefix,
            data: Uint8Array.from(data)
        };
    });
    const network = a.network || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$networks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["bitcoin"];
    const o = {
        name: 'p2wpkh',
        network
    };
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$lazy$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.prop(o, 'address', ()=>{
        if (!o.hash) return;
        const words = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bech32$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["bech32"].toWords(o.hash);
        words.unshift(0x00);
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bech32$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["bech32"].encode(network.bech32, words);
    });
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$lazy$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.prop(o, 'hash', ()=>{
        if (a.output) return a.output.slice(2, 22);
        if (a.address) return _address().data;
        if (a.pubkey || o.pubkey) return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$crypto$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.hash160(a.pubkey || o.pubkey);
    });
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$lazy$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.prop(o, 'output', ()=>{
        if (!o.hash) return;
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$script$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.compile([
            OPS.OP_0,
            o.hash
        ]);
    });
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$lazy$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.prop(o, 'pubkey', ()=>{
        if (a.pubkey) return a.pubkey;
        if (!a.witness) return;
        return a.witness[1];
    });
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$lazy$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.prop(o, 'signature', ()=>{
        if (!a.witness) return;
        return a.witness[0];
    });
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$lazy$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.prop(o, 'input', ()=>{
        if (!o.witness) return;
        return EMPTY_BUFFER;
    });
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$lazy$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.prop(o, 'witness', ()=>{
        if (!a.pubkey) return;
        if (!a.signature) return;
        return [
            a.signature,
            a.pubkey
        ];
    });
    // extended validation
    if (opts.validate) {
        let hash = Uint8Array.from([]);
        if (a.address) {
            if (network && network.bech32 !== _address().prefix) throw new TypeError('Invalid prefix or Network mismatch');
            if (_address().version !== 0x00) throw new TypeError('Invalid address version');
            if (_address().data.length !== 20) throw new TypeError('Invalid address data');
            hash = _address().data;
        }
        if (a.hash) {
            if (hash.length > 0 && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.compare(hash, a.hash) !== 0) throw new TypeError('Hash mismatch');
            else hash = a.hash;
        }
        if (a.output) {
            if (a.output.length !== 22 || a.output[0] !== OPS.OP_0 || a.output[1] !== 0x14) throw new TypeError('Output is invalid');
            if (hash.length > 0 && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.compare(hash, a.output.slice(2)) !== 0) throw new TypeError('Hash mismatch');
            else hash = a.output.slice(2);
        }
        if (a.pubkey) {
            const pkh = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$crypto$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.hash160(a.pubkey);
            if (hash.length > 0 && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.compare(hash, pkh) !== 0) throw new TypeError('Hash mismatch');
            else hash = pkh;
            if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isPoint"])(a.pubkey) || a.pubkey.length !== 33) throw new TypeError('Invalid pubkey for p2wpkh');
        }
        if (a.witness) {
            if (a.witness.length !== 2) throw new TypeError('Witness is invalid');
            if (!__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$script$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.isCanonicalScriptSignature(a.witness[0])) throw new TypeError('Witness has invalid signature');
            if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isPoint"])(a.witness[1]) || a.witness[1].length !== 33) throw new TypeError('Witness has invalid pubkey');
            if (a.signature && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.compare(a.signature, a.witness[0]) !== 0) throw new TypeError('Signature mismatch');
            // if (a.pubkey && !a.pubkey.equals(a.witness[1]))
            if (a.pubkey && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.compare(a.pubkey, a.witness[1]) !== 0) throw new TypeError('Pubkey mismatch');
            const pkh = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$crypto$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.hash160(a.witness[1]);
            if (hash.length > 0 && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.compare(hash, pkh) !== 0) throw new TypeError('Hash mismatch');
        }
    }
    return Object.assign(o, a);
}
}}),
"[project]/node_modules/bitcoinjs-lib/src/esm/payments/p2wsh.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "p2wsh": (()=>p2wsh)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$networks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/networks.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$script$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/script.js [app-ssr] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/types.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$lazy$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/payments/lazy.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bech32$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bech32/dist/index.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/uint8array-tools/src/mjs/index.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$script$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/script.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/valibot/dist/index.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$sha256$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@noble/hashes/esm/sha256.js [app-ssr] (ecmascript)");
;
;
;
;
;
;
;
;
const OPS = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$script$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.OPS;
const EMPTY_BUFFER = new Uint8Array(0);
function chunkHasUncompressedPubkey(chunk) {
    if (chunk instanceof Uint8Array && chunk.length === 65 && chunk[0] === 0x04 && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isPoint"])(chunk)) {
        return true;
    } else {
        return false;
    }
}
function p2wsh(a, opts) {
    if (!a.address && !a.hash && !a.output && !a.redeem && !a.witness) throw new TypeError('Not enough data');
    opts = Object.assign({
        validate: true
    }, opts || {});
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.parse((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["NullablePartial"])({
        network: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.object({}),
        address: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.string(),
        hash: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Buffer256bitSchema"],
        output: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["NBufferSchemaFactory"])(34),
        redeem: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["NullablePartial"])({
            input: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["BufferSchema"],
            network: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.object({}),
            output: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["BufferSchema"],
            witness: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.array(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["BufferSchema"])
        }),
        input: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["NBufferSchemaFactory"])(0),
        witness: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.array(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["BufferSchema"])
    }), a);
    const _address = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$lazy$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.value(()=>{
        const result = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bech32$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["bech32"].decode(a.address);
        const version = result.words.shift();
        const data = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bech32$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["bech32"].fromWords(result.words);
        return {
            version,
            prefix: result.prefix,
            data: Uint8Array.from(data)
        };
    });
    const _rchunks = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$lazy$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.value(()=>{
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$script$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.decompile(a.redeem.input);
    });
    let network = a.network;
    if (!network) {
        network = a.redeem && a.redeem.network || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$networks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["bitcoin"];
    }
    const o = {
        network
    };
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$lazy$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.prop(o, 'address', ()=>{
        if (!o.hash) return;
        const words = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bech32$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["bech32"].toWords(o.hash);
        words.unshift(0x00);
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bech32$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["bech32"].encode(network.bech32, words);
    });
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$lazy$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.prop(o, 'hash', ()=>{
        if (a.output) return a.output.slice(2);
        if (a.address) return _address().data;
        if (o.redeem && o.redeem.output) return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$sha256$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["sha256"])(o.redeem.output);
    });
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$lazy$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.prop(o, 'output', ()=>{
        if (!o.hash) return;
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$script$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.compile([
            OPS.OP_0,
            o.hash
        ]);
    });
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$lazy$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.prop(o, 'redeem', ()=>{
        if (!a.witness) return;
        return {
            output: a.witness[a.witness.length - 1],
            input: EMPTY_BUFFER,
            witness: a.witness.slice(0, -1)
        };
    });
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$lazy$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.prop(o, 'input', ()=>{
        if (!o.witness) return;
        return EMPTY_BUFFER;
    });
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$lazy$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.prop(o, 'witness', ()=>{
        // transform redeem input to witness stack?
        if (a.redeem && a.redeem.input && a.redeem.input.length > 0 && a.redeem.output && a.redeem.output.length > 0) {
            const stack = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$script$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.toStack(_rchunks());
            // assign, and blank the existing input
            o.redeem = Object.assign({
                witness: stack
            }, a.redeem);
            o.redeem.input = EMPTY_BUFFER;
            return [].concat(stack, a.redeem.output);
        }
        if (!a.redeem) return;
        if (!a.redeem.output) return;
        if (!a.redeem.witness) return;
        return [].concat(a.redeem.witness, a.redeem.output);
    });
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$lazy$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.prop(o, 'name', ()=>{
        const nameParts = [
            'p2wsh'
        ];
        if (o.redeem !== undefined && o.redeem.name !== undefined) nameParts.push(o.redeem.name);
        return nameParts.join('-');
    });
    // extended validation
    if (opts.validate) {
        let hash = Uint8Array.from([]);
        if (a.address) {
            if (_address().prefix !== network.bech32) throw new TypeError('Invalid prefix or Network mismatch');
            if (_address().version !== 0x00) throw new TypeError('Invalid address version');
            if (_address().data.length !== 32) throw new TypeError('Invalid address data');
            hash = _address().data;
        }
        if (a.hash) {
            if (hash.length > 0 && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.compare(hash, a.hash) !== 0) throw new TypeError('Hash mismatch');
            else hash = a.hash;
        }
        if (a.output) {
            if (a.output.length !== 34 || a.output[0] !== OPS.OP_0 || a.output[1] !== 0x20) throw new TypeError('Output is invalid');
            const hash2 = a.output.slice(2);
            if (hash.length > 0 && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.compare(hash, hash2) !== 0) throw new TypeError('Hash mismatch');
            else hash = hash2;
        }
        if (a.redeem) {
            if (a.redeem.network && a.redeem.network !== network) throw new TypeError('Network mismatch');
            // is there two redeem sources?
            if (a.redeem.input && a.redeem.input.length > 0 && a.redeem.witness && a.redeem.witness.length > 0) throw new TypeError('Ambiguous witness source');
            // is the redeem output non-empty/valid?
            if (a.redeem.output) {
                const decompile = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$script$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.decompile(a.redeem.output);
                if (!decompile || decompile.length < 1) throw new TypeError('Redeem.output is invalid');
                if (a.redeem.output.byteLength > 3600) throw new TypeError('Redeem.output unspendable if larger than 3600 bytes');
                if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$script$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.countNonPushOnlyOPs(decompile) > 201) throw new TypeError('Redeem.output unspendable with more than 201 non-push ops');
                // match hash against other sources
                const hash2 = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$sha256$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["sha256"])(a.redeem.output);
                if (hash.length > 0 && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.compare(hash, hash2) !== 0) throw new TypeError('Hash mismatch');
                else hash = hash2;
            }
            if (a.redeem.input && !__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$script$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.isPushOnly(_rchunks())) throw new TypeError('Non push-only scriptSig');
            if (a.witness && a.redeem.witness && !(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["stacksEqual"])(a.witness, a.redeem.witness)) throw new TypeError('Witness and redeem.witness mismatch');
            if (a.redeem.input && _rchunks().some(chunkHasUncompressedPubkey) || a.redeem.output && (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$script$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.decompile(a.redeem.output) || []).some(chunkHasUncompressedPubkey)) {
                throw new TypeError('redeem.input or redeem.output contains uncompressed pubkey');
            }
        }
        if (a.witness && a.witness.length > 0) {
            const wScript = a.witness[a.witness.length - 1];
            if (a.redeem && a.redeem.output && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.compare(a.redeem.output, wScript) !== 0) throw new TypeError('Witness and redeem.output mismatch');
            if (a.witness.some(chunkHasUncompressedPubkey) || (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$script$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.decompile(wScript) || []).some(chunkHasUncompressedPubkey)) throw new TypeError('Witness contains uncompressed pubkey');
        }
    }
    return Object.assign(o, a);
}
}}),
"[project]/node_modules/bitcoinjs-lib/src/esm/ecc_lib.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "getEccLib": (()=>getEccLib),
    "initEccLib": (()=>initEccLib)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/uint8array-tools/src/mjs/index.js [app-ssr] (ecmascript)");
;
const _ECCLIB_CACHE = {};
function initEccLib(eccLib) {
    if (!eccLib) {
        // allow clearing the library
        _ECCLIB_CACHE.eccLib = eccLib;
    } else if (eccLib !== _ECCLIB_CACHE.eccLib) {
        // new instance, verify it
        verifyEcc(eccLib);
        _ECCLIB_CACHE.eccLib = eccLib;
    }
}
function getEccLib() {
    if (!_ECCLIB_CACHE.eccLib) throw new Error('No ECC Library provided. You must call initEccLib() with a valid TinySecp256k1Interface instance');
    return _ECCLIB_CACHE.eccLib;
}
const h = (hex)=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.fromHex(hex);
/**
 * Verifies the ECC functionality.
 *
 * @param ecc - The TinySecp256k1Interface object.
 */ function verifyEcc(ecc) {
    assert(typeof ecc.isXOnlyPoint === 'function');
    assert(ecc.isXOnlyPoint(h('79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798')));
    assert(ecc.isXOnlyPoint(h('fffffffffffffffffffffffffffffffffffffffffffffffffffffffeeffffc2e')));
    assert(ecc.isXOnlyPoint(h('f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9')));
    assert(ecc.isXOnlyPoint(h('0000000000000000000000000000000000000000000000000000000000000001')));
    assert(!ecc.isXOnlyPoint(h('0000000000000000000000000000000000000000000000000000000000000000')));
    assert(!ecc.isXOnlyPoint(h('fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f')));
    assert(typeof ecc.xOnlyPointAddTweak === 'function');
    tweakAddVectors.forEach((t)=>{
        const r = ecc.xOnlyPointAddTweak(h(t.pubkey), h(t.tweak));
        if (t.result === null) {
            assert(r === null);
        } else {
            assert(r !== null);
            assert(r.parity === t.parity);
            assert(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.compare(r.xOnlyPubkey, h(t.result)) === 0);
        }
    });
}
function assert(bool) {
    if (!bool) throw new Error('ecc library invalid');
}
const tweakAddVectors = [
    {
        pubkey: '79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798',
        tweak: 'fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140',
        parity: -1,
        result: null
    },
    {
        pubkey: '1617d38ed8d8657da4d4761e8057bc396ea9e4b9d29776d4be096016dbd2509b',
        tweak: 'a8397a935f0dfceba6ba9618f6451ef4d80637abf4e6af2669fbc9de6a8fd2ac',
        parity: 1,
        result: 'e478f99dab91052ab39a33ea35fd5e6e4933f4d28023cd597c9a1f6760346adf'
    },
    {
        pubkey: '2c0b7cf95324a07d05398b240174dc0c2be444d96b159aa6c7f7b1e668680991',
        tweak: '823c3cd2142744b075a87eade7e1b8678ba308d566226a0056ca2b7a76f86b47',
        parity: 0,
        result: '9534f8dc8c6deda2dc007655981c78b49c5d96c778fbf363462a11ec9dfd948c'
    }
];
}}),
"[project]/node_modules/bitcoinjs-lib/src/esm/bufferutils.js [app-ssr] (ecmascript) <locals>": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "BufferReader": (()=>BufferReader),
    "BufferWriter": (()=>BufferWriter),
    "cloneBuffer": (()=>cloneBuffer),
    "reverseBuffer": (()=>reverseBuffer)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/valibot/dist/index.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/types.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/uint8array-tools/src/mjs/index.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$varuint$2d$bitcoin$2f$src$2f$esm$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/varuint-bitcoin/src/esm/index.js [app-ssr] (ecmascript)");
;
;
;
;
;
const MAX_JS_NUMBER = 0x001fffffffffffff;
// https://github.com/feross/buffer/blob/master/index.js#L1127
function verifuint(value, max) {
    if (typeof value !== 'number' && typeof value !== 'bigint') throw new Error('cannot write a non-number as a number');
    if (value < 0 && value < BigInt(0)) throw new Error('specified a negative value for writing an unsigned value');
    if (value > max && value > BigInt(max)) throw new Error('RangeError: value out of range');
    if (Math.floor(Number(value)) !== Number(value)) throw new Error('value has a fractional component');
}
function reverseBuffer(buffer) {
    if (buffer.length < 1) return buffer;
    let j = buffer.length - 1;
    let tmp = 0;
    for(let i = 0; i < buffer.length / 2; i++){
        tmp = buffer[i];
        buffer[i] = buffer[j];
        buffer[j] = tmp;
        j--;
    }
    return buffer;
}
function cloneBuffer(buffer) {
    const clone = new Uint8Array(buffer.length);
    clone.set(buffer);
    return clone;
}
class BufferWriter {
    buffer;
    offset;
    static withCapacity(size) {
        return new BufferWriter(new Uint8Array(size));
    }
    constructor(buffer, offset = 0){
        this.buffer = buffer;
        this.offset = offset;
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.parse(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.tuple([
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.BufferSchema,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.UInt32Schema
        ]), [
            buffer,
            offset
        ]);
    }
    writeUInt8(i) {
        this.offset = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.writeUInt8(this.buffer, this.offset, i);
    }
    writeInt32(i) {
        this.offset = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.writeInt32(this.buffer, this.offset, i, 'LE');
    }
    writeInt64(i) {
        this.offset = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.writeInt64(this.buffer, this.offset, BigInt(i), 'LE');
    }
    writeUInt32(i) {
        this.offset = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.writeUInt32(this.buffer, this.offset, i, 'LE');
    }
    writeUInt64(i) {
        this.offset = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.writeUInt64(this.buffer, this.offset, BigInt(i), 'LE');
    }
    writeVarInt(i) {
        const { bytes } = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$varuint$2d$bitcoin$2f$src$2f$esm$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.encode(i, this.buffer, this.offset);
        this.offset += bytes;
    }
    writeSlice(slice) {
        if (this.buffer.length < this.offset + slice.length) {
            throw new Error('Cannot write slice out of bounds');
        }
        this.buffer.set(slice, this.offset);
        this.offset += slice.length;
    }
    writeVarSlice(slice) {
        this.writeVarInt(slice.length);
        this.writeSlice(slice);
    }
    writeVector(vector) {
        this.writeVarInt(vector.length);
        vector.forEach((buf)=>this.writeVarSlice(buf));
    }
    end() {
        if (this.buffer.length === this.offset) {
            return this.buffer;
        }
        throw new Error(`buffer size ${this.buffer.length}, offset ${this.offset}`);
    }
}
class BufferReader {
    buffer;
    offset;
    constructor(buffer, offset = 0){
        this.buffer = buffer;
        this.offset = offset;
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.parse(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.tuple([
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.BufferSchema,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.UInt32Schema
        ]), [
            buffer,
            offset
        ]);
    }
    readUInt8() {
        const result = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.readUInt8(this.buffer, this.offset);
        this.offset++;
        return result;
    }
    readInt32() {
        const result = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.readInt32(this.buffer, this.offset, 'LE');
        this.offset += 4;
        return result;
    }
    readUInt32() {
        const result = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.readUInt32(this.buffer, this.offset, 'LE');
        this.offset += 4;
        return result;
    }
    readInt64() {
        const result = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.readInt64(this.buffer, this.offset, 'LE');
        this.offset += 8;
        return result;
    }
    readVarInt() {
        const { bigintValue, bytes } = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$varuint$2d$bitcoin$2f$src$2f$esm$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.decode(this.buffer, this.offset);
        this.offset += bytes;
        return bigintValue;
    }
    readSlice(n) {
        verifuint(n, MAX_JS_NUMBER);
        const num = Number(n);
        if (this.buffer.length < this.offset + num) {
            throw new Error('Cannot read slice out of bounds');
        }
        const result = this.buffer.slice(this.offset, this.offset + num);
        this.offset += num;
        return result;
    }
    readVarSlice() {
        return this.readSlice(this.readVarInt());
    }
    readVector() {
        const count = this.readVarInt();
        const vector = [];
        for(let i = 0; i < count; i++)vector.push(this.readVarSlice());
        return vector;
    }
}
}}),
"[project]/node_modules/bitcoinjs-lib/src/esm/bufferutils.js [app-ssr] (ecmascript) <module evaluation>": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, t: __turbopack_require_real__ } = __turbopack_context__;
{
__turbopack_esm__({});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/types.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$varuint$2d$bitcoin$2f$src$2f$esm$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/varuint-bitcoin/src/esm/index.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/uint8array-tools/src/mjs/index.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$bufferutils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/bufferutils.js [app-ssr] (ecmascript) <locals>");
}}),
"[project]/node_modules/bitcoinjs-lib/src/esm/payments/bip341.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "LEAF_VERSION_TAPSCRIPT": (()=>LEAF_VERSION_TAPSCRIPT),
    "MAX_TAPTREE_DEPTH": (()=>MAX_TAPTREE_DEPTH),
    "findScriptPath": (()=>findScriptPath),
    "rootHashFromPath": (()=>rootHashFromPath),
    "tapTweakHash": (()=>tapTweakHash),
    "tapleafHash": (()=>tapleafHash),
    "toHashTree": (()=>toHashTree),
    "tweakKey": (()=>tweakKey)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$ecc_lib$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/ecc_lib.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$crypto$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/crypto.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$bufferutils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/bufferutils.js [app-ssr] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/types.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/uint8array-tools/src/mjs/index.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$varuint$2d$bitcoin$2f$src$2f$esm$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__varuint$3e$__ = __turbopack_import__("[project]/node_modules/varuint-bitcoin/src/esm/index.js [app-ssr] (ecmascript) <export * as varuint>");
;
;
;
;
;
const LEAF_VERSION_TAPSCRIPT = 0xc0;
const MAX_TAPTREE_DEPTH = 128;
const isHashBranch = (ht)=>'left' in ht && 'right' in ht;
function rootHashFromPath(controlBlock, leafHash) {
    if (controlBlock.length < 33) throw new TypeError(`The control-block length is too small. Got ${controlBlock.length}, expected min 33.`);
    const m = (controlBlock.length - 33) / 32;
    let kj = leafHash;
    for(let j = 0; j < m; j++){
        const ej = controlBlock.slice(33 + 32 * j, 65 + 32 * j);
        if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.compare(kj, ej) < 0) {
            kj = tapBranchHash(kj, ej);
        } else {
            kj = tapBranchHash(ej, kj);
        }
    }
    return kj;
}
function toHashTree(scriptTree) {
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isTapleaf"])(scriptTree)) return {
        hash: tapleafHash(scriptTree)
    };
    const hashes = [
        toHashTree(scriptTree[0]),
        toHashTree(scriptTree[1])
    ];
    // hashes.sort((a, b) => a.hash.compare(b.hash));
    hashes.sort((a, b)=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.compare(a.hash, b.hash));
    const [left, right] = hashes;
    return {
        hash: tapBranchHash(left.hash, right.hash),
        left,
        right
    };
}
function findScriptPath(node, hash) {
    if (isHashBranch(node)) {
        const leftPath = findScriptPath(node.left, hash);
        if (leftPath !== undefined) return [
            ...leftPath,
            node.right.hash
        ];
        const rightPath = findScriptPath(node.right, hash);
        if (rightPath !== undefined) return [
            ...rightPath,
            node.left.hash
        ];
    } else if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.compare(node.hash, hash) === 0) {
        return [];
    }
    return undefined;
}
function tapleafHash(leaf) {
    const version = leaf.version || LEAF_VERSION_TAPSCRIPT;
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$crypto$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.taggedHash('TapLeaf', __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.concat([
        Uint8Array.from([
            version
        ]),
        serializeScript(leaf.output)
    ]));
}
function tapTweakHash(pubKey, h) {
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$crypto$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.taggedHash('TapTweak', __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.concat(h ? [
        pubKey,
        h
    ] : [
        pubKey
    ]));
}
function tweakKey(pubKey, h) {
    if (!(pubKey instanceof Uint8Array)) return null;
    if (pubKey.length !== 32) return null;
    if (h && h.length !== 32) return null;
    const tweakHash = tapTweakHash(pubKey, h);
    const res = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$ecc_lib$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getEccLib"])().xOnlyPointAddTweak(pubKey, tweakHash);
    if (!res || res.xOnlyPubkey === null) return null;
    return {
        parity: res.parity,
        x: Uint8Array.from(res.xOnlyPubkey)
    };
}
/**
 * Computes the TapBranch hash by concatenating two buffers and applying the 'TapBranch' tagged hash algorithm.
 *
 * @param a - The first buffer.
 * @param b - The second buffer.
 * @returns The TapBranch hash of the concatenated buffers.
 */ function tapBranchHash(a, b) {
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$crypto$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.taggedHash('TapBranch', __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.concat([
        a,
        b
    ]));
}
/**
 * Serializes a script by encoding its length as a varint and concatenating it with the script.
 *
 * @param s - The script to be serialized.
 * @returns The serialized script as a Buffer.
 */ function serializeScript(s) {
    /* global BigInt */ const varintLen = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$varuint$2d$bitcoin$2f$src$2f$esm$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__varuint$3e$__["varuint"].encodingLength(s.length);
    const buffer = new Uint8Array(varintLen);
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$varuint$2d$bitcoin$2f$src$2f$esm$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__varuint$3e$__["varuint"].encode(s.length, buffer);
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.concat([
        buffer,
        s
    ]);
}
}}),
"[project]/node_modules/bitcoinjs-lib/src/esm/payments/p2tr.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "p2tr": (()=>p2tr)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$networks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/networks.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$script$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/script.js [app-ssr] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/types.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$ecc_lib$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/ecc_lib.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$bip341$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/payments/bip341.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$lazy$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/payments/lazy.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bech32$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bech32/dist/index.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$address$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/address.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/uint8array-tools/src/mjs/index.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$script$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/script.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/valibot/dist/index.js [app-ssr] (ecmascript)");
;
;
;
;
;
;
;
;
;
;
const OPS = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$script$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.OPS;
const TAPROOT_WITNESS_VERSION = 0x01;
const ANNEX_PREFIX = 0x50;
function p2tr(a, opts) {
    if (!a.address && !a.output && !a.pubkey && !a.internalPubkey && !(a.witness && a.witness.length > 1)) throw new TypeError('Not enough data');
    opts = Object.assign({
        validate: true
    }, opts || {});
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.parse(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.partial(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.object({
        address: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.string(),
        input: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["NBufferSchemaFactory"])(0),
        network: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.object({}),
        output: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["NBufferSchemaFactory"])(34),
        internalPubkey: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["NBufferSchemaFactory"])(32),
        hash: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["NBufferSchemaFactory"])(32),
        pubkey: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["NBufferSchemaFactory"])(32),
        signature: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.union([
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["NBufferSchemaFactory"])(64),
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["NBufferSchemaFactory"])(65)
        ]),
        witness: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.array(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["BufferSchema"]),
        scriptTree: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.custom(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isTaptree"], 'Taptree is not of type isTaptree'),
        redeem: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.partial(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.object({
            output: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["BufferSchema"],
            redeemVersion: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.number(),
            witness: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.array(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["BufferSchema"])
        })),
        redeemVersion: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.number()
    })), a);
    const _address = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$lazy$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.value(()=>{
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$address$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["fromBech32"])(a.address);
    });
    // remove annex if present, ignored by taproot
    const _witness = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$lazy$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.value(()=>{
        if (!a.witness || !a.witness.length) return;
        if (a.witness.length >= 2 && a.witness[a.witness.length - 1][0] === ANNEX_PREFIX) {
            return a.witness.slice(0, -1);
        }
        return a.witness.slice();
    });
    const _hashTree = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$lazy$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.value(()=>{
        if (a.scriptTree) return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$bip341$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["toHashTree"])(a.scriptTree);
        if (a.hash) return {
            hash: a.hash
        };
        return;
    });
    const network = a.network || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$networks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["bitcoin"];
    const o = {
        name: 'p2tr',
        network
    };
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$lazy$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.prop(o, 'address', ()=>{
        if (!o.pubkey) return;
        const words = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bech32$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["bech32m"].toWords(o.pubkey);
        words.unshift(TAPROOT_WITNESS_VERSION);
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bech32$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["bech32m"].encode(network.bech32, words);
    });
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$lazy$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.prop(o, 'hash', ()=>{
        const hashTree = _hashTree();
        if (hashTree) return hashTree.hash;
        const w = _witness();
        if (w && w.length > 1) {
            const controlBlock = w[w.length - 1];
            const leafVersion = controlBlock[0] & __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["TAPLEAF_VERSION_MASK"];
            const script = w[w.length - 2];
            const leafHash = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$bip341$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["tapleafHash"])({
                output: script,
                version: leafVersion
            });
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$bip341$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["rootHashFromPath"])(controlBlock, leafHash);
        }
        return null;
    });
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$lazy$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.prop(o, 'output', ()=>{
        if (!o.pubkey) return;
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$script$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.compile([
            OPS.OP_1,
            o.pubkey
        ]);
    });
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$lazy$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.prop(o, 'redeemVersion', ()=>{
        if (a.redeemVersion) return a.redeemVersion;
        if (a.redeem && a.redeem.redeemVersion !== undefined && a.redeem.redeemVersion !== null) {
            return a.redeem.redeemVersion;
        }
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$bip341$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["LEAF_VERSION_TAPSCRIPT"];
    });
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$lazy$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.prop(o, 'redeem', ()=>{
        const witness = _witness(); // witness without annex
        if (!witness || witness.length < 2) return;
        return {
            output: witness[witness.length - 2],
            witness: witness.slice(0, -2),
            redeemVersion: witness[witness.length - 1][0] & __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["TAPLEAF_VERSION_MASK"]
        };
    });
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$lazy$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.prop(o, 'pubkey', ()=>{
        if (a.pubkey) return a.pubkey;
        if (a.output) return a.output.slice(2);
        if (a.address) return _address().data;
        if (o.internalPubkey) {
            const tweakedKey = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$bip341$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["tweakKey"])(o.internalPubkey, o.hash);
            if (tweakedKey) return tweakedKey.x;
        }
    });
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$lazy$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.prop(o, 'internalPubkey', ()=>{
        if (a.internalPubkey) return a.internalPubkey;
        const witness = _witness();
        if (witness && witness.length > 1) return witness[witness.length - 1].slice(1, 33);
    });
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$lazy$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.prop(o, 'signature', ()=>{
        if (a.signature) return a.signature;
        const witness = _witness(); // witness without annex
        if (!witness || witness.length !== 1) return;
        return witness[0];
    });
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$lazy$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.prop(o, 'witness', ()=>{
        if (a.witness) return a.witness;
        const hashTree = _hashTree();
        if (hashTree && a.redeem && a.redeem.output && a.internalPubkey) {
            const leafHash = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$bip341$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["tapleafHash"])({
                output: a.redeem.output,
                version: o.redeemVersion
            });
            const path = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$bip341$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["findScriptPath"])(hashTree, leafHash);
            if (!path) return;
            const outputKey = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$bip341$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["tweakKey"])(a.internalPubkey, hashTree.hash);
            if (!outputKey) return;
            const controlBock = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.concat([
                Uint8Array.from([
                    o.redeemVersion | outputKey.parity
                ]),
                a.internalPubkey
            ].concat(path));
            return [
                a.redeem.output,
                controlBock
            ];
        }
        if (a.signature) return [
            a.signature
        ];
    });
    // extended validation
    if (opts.validate) {
        let pubkey = Uint8Array.from([]);
        if (a.address) {
            if (network && network.bech32 !== _address().prefix) throw new TypeError('Invalid prefix or Network mismatch');
            if (_address().version !== TAPROOT_WITNESS_VERSION) throw new TypeError('Invalid address version');
            if (_address().data.length !== 32) throw new TypeError('Invalid address data');
            pubkey = _address().data;
        }
        if (a.pubkey) {
            if (pubkey.length > 0 && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.compare(pubkey, a.pubkey) !== 0) throw new TypeError('Pubkey mismatch');
            else pubkey = a.pubkey;
        }
        if (a.output) {
            if (a.output.length !== 34 || a.output[0] !== OPS.OP_1 || a.output[1] !== 0x20) throw new TypeError('Output is invalid');
            if (pubkey.length > 0 && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.compare(pubkey, a.output.slice(2)) !== 0) throw new TypeError('Pubkey mismatch');
            else pubkey = a.output.slice(2);
        }
        if (a.internalPubkey) {
            const tweakedKey = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$bip341$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["tweakKey"])(a.internalPubkey, o.hash);
            if (pubkey.length > 0 && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.compare(pubkey, tweakedKey.x) !== 0) throw new TypeError('Pubkey mismatch');
            else pubkey = tweakedKey.x;
        }
        if (pubkey && pubkey.length) {
            if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$ecc_lib$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getEccLib"])().isXOnlyPoint(pubkey)) throw new TypeError('Invalid pubkey for p2tr');
        }
        const hashTree = _hashTree();
        if (a.hash && hashTree) {
            if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.compare(a.hash, hashTree.hash) !== 0) throw new TypeError('Hash mismatch');
        }
        if (a.redeem && a.redeem.output && hashTree) {
            const leafHash = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$bip341$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["tapleafHash"])({
                output: a.redeem.output,
                version: o.redeemVersion
            });
            if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$bip341$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["findScriptPath"])(hashTree, leafHash)) throw new TypeError('Redeem script not in tree');
        }
        const witness = _witness();
        // compare the provided redeem data with the one computed from witness
        if (a.redeem && o.redeem) {
            if (a.redeem.redeemVersion) {
                if (a.redeem.redeemVersion !== o.redeem.redeemVersion) throw new TypeError('Redeem.redeemVersion and witness mismatch');
            }
            if (a.redeem.output) {
                if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$script$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.decompile(a.redeem.output).length === 0) throw new TypeError('Redeem.output is invalid');
                // output redeem is constructed from the witness
                if (o.redeem.output && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.compare(a.redeem.output, o.redeem.output) !== 0) throw new TypeError('Redeem.output and witness mismatch');
            }
            if (a.redeem.witness) {
                if (o.redeem.witness && !(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["stacksEqual"])(a.redeem.witness, o.redeem.witness)) throw new TypeError('Redeem.witness and witness mismatch');
            }
        }
        if (witness && witness.length) {
            if (witness.length === 1) {
                // key spending
                if (a.signature && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.compare(a.signature, witness[0]) !== 0) throw new TypeError('Signature mismatch');
            } else {
                // script path spending
                const controlBlock = witness[witness.length - 1];
                if (controlBlock.length < 33) throw new TypeError(`The control-block length is too small. Got ${controlBlock.length}, expected min 33.`);
                if ((controlBlock.length - 33) % 32 !== 0) throw new TypeError(`The control-block length of ${controlBlock.length} is incorrect!`);
                const m = (controlBlock.length - 33) / 32;
                if (m > 128) throw new TypeError(`The script path is too long. Got ${m}, expected max 128.`);
                const internalPubkey = controlBlock.slice(1, 33);
                if (a.internalPubkey && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.compare(a.internalPubkey, internalPubkey) !== 0) throw new TypeError('Internal pubkey mismatch');
                if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$ecc_lib$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getEccLib"])().isXOnlyPoint(internalPubkey)) throw new TypeError('Invalid internalPubkey for p2tr witness');
                const leafVersion = controlBlock[0] & __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["TAPLEAF_VERSION_MASK"];
                const script = witness[witness.length - 2];
                const leafHash = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$bip341$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["tapleafHash"])({
                    output: script,
                    version: leafVersion
                });
                const hash = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$bip341$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["rootHashFromPath"])(controlBlock, leafHash);
                const outputKey = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$bip341$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["tweakKey"])(internalPubkey, hash);
                if (!outputKey) // todo: needs test data
                throw new TypeError('Invalid outputKey for p2tr witness');
                if (pubkey.length && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.compare(pubkey, outputKey.x) !== 0) throw new TypeError('Pubkey mismatch for p2tr witness');
                if (outputKey.parity !== (controlBlock[0] & 1)) throw new Error('Incorrect parity');
            }
        }
    }
    return Object.assign(o, a);
}
}}),
"[project]/node_modules/bitcoinjs-lib/src/esm/payments/index.js [app-ssr] (ecmascript) <locals>": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({});
;
;
;
;
;
;
;
;
;
 // TODO
 // witness commitment
}}),
"[project]/node_modules/bitcoinjs-lib/src/esm/payments/index.js [app-ssr] (ecmascript) <module evaluation>": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, t: __turbopack_require_real__ } = __turbopack_context__;
{
__turbopack_esm__({});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$embed$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/payments/embed.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$p2ms$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/payments/p2ms.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$p2pk$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/payments/p2pk.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$p2pkh$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/payments/p2pkh.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$p2sh$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/payments/p2sh.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$p2wpkh$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/payments/p2wpkh.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$p2wsh$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/payments/p2wsh.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$p2tr$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/payments/p2tr.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/payments/index.js [app-ssr] (ecmascript) <locals>");
}}),
"[project]/node_modules/bitcoinjs-lib/src/esm/payments/index.js [app-ssr] (ecmascript) <exports>": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, t: __turbopack_require_real__ } = __turbopack_context__;
{
__turbopack_esm__({
    "embed": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$embed$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["p2data"]),
    "p2ms": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$p2ms$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["p2ms"]),
    "p2pk": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$p2pk$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["p2pk"]),
    "p2pkh": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$p2pkh$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["p2pkh"]),
    "p2sh": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$p2sh$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["p2sh"]),
    "p2tr": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$p2tr$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["p2tr"]),
    "p2wpkh": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$p2wpkh$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["p2wpkh"]),
    "p2wsh": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$p2wsh$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["p2wsh"])
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$embed$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/payments/embed.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$p2ms$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/payments/p2ms.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$p2pk$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/payments/p2pk.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$p2pkh$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/payments/p2pkh.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$p2sh$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/payments/p2sh.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$p2tr$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/payments/p2tr.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$p2wpkh$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/payments/p2wpkh.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$p2wsh$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/payments/p2wsh.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/payments/index.js [app-ssr] (ecmascript) <locals>");
}}),
"[project]/node_modules/bitcoinjs-lib/src/esm/payments/index.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, t: __turbopack_require_real__ } = __turbopack_context__;
{
__turbopack_esm__({
    "embed": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$exports$3e$__["embed"]),
    "p2ms": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$exports$3e$__["p2ms"]),
    "p2pk": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$exports$3e$__["p2pk"]),
    "p2pkh": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$exports$3e$__["p2pkh"]),
    "p2sh": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$exports$3e$__["p2sh"]),
    "p2tr": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$exports$3e$__["p2tr"]),
    "p2wpkh": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$exports$3e$__["p2wpkh"]),
    "p2wsh": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$exports$3e$__["p2wsh"])
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/payments/index.js [app-ssr] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$exports$3e$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/payments/index.js [app-ssr] (ecmascript) <exports>");
}}),
"[project]/node_modules/bitcoinjs-lib/src/esm/address.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "fromBase58Check": (()=>fromBase58Check),
    "fromBech32": (()=>fromBech32),
    "fromOutputScript": (()=>fromOutputScript),
    "toBase58Check": (()=>toBase58Check),
    "toBech32": (()=>toBech32),
    "toOutputScript": (()=>toOutputScript)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$networks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/networks.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/payments/index.js [app-ssr] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$script$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/script.js [app-ssr] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/types.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bech32$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bech32/dist/index.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bs58check$2f$src$2f$esm$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bs58check/src/esm/index.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/uint8array-tools/src/mjs/index.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/valibot/dist/index.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/payments/index.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$script$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/script.js [app-ssr] (ecmascript)");
;
;
;
;
;
;
;
;
const FUTURE_SEGWIT_MAX_SIZE = 40;
const FUTURE_SEGWIT_MIN_SIZE = 2;
const FUTURE_SEGWIT_MAX_VERSION = 16;
const FUTURE_SEGWIT_MIN_VERSION = 2;
const FUTURE_SEGWIT_VERSION_DIFF = 0x50;
const FUTURE_SEGWIT_VERSION_WARNING = 'WARNING: Sending to a future segwit version address can lead to loss of funds. ' + 'End users MUST be warned carefully in the GUI and asked if they wish to proceed ' + 'with caution. Wallets should verify the segwit version from the output of fromBech32, ' + 'then decide when it is safe to use which version of segwit.';
/**
 * Converts an output buffer to a future segwit address.
 * @param output - The output buffer.
 * @param network - The network object.
 * @returns The future segwit address.
 * @throws {TypeError} If the program length or version is invalid for segwit address.
 */ function _toFutureSegwitAddress(output, network) {
    const data = output.slice(2);
    if (data.length < FUTURE_SEGWIT_MIN_SIZE || data.length > FUTURE_SEGWIT_MAX_SIZE) throw new TypeError('Invalid program length for segwit address');
    const version = output[0] - FUTURE_SEGWIT_VERSION_DIFF;
    if (version < FUTURE_SEGWIT_MIN_VERSION || version > FUTURE_SEGWIT_MAX_VERSION) throw new TypeError('Invalid version for segwit address');
    if (output[1] !== data.length) throw new TypeError('Invalid script for segwit address');
    console.warn(FUTURE_SEGWIT_VERSION_WARNING);
    return toBech32(data, version, network.bech32);
}
function fromBase58Check(address) {
    const payload = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bs58check$2f$src$2f$esm$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].decode(address);
    // TODO: 4.0.0, move to "toOutputScript"
    if (payload.length < 21) throw new TypeError(address + ' is too short');
    if (payload.length > 21) throw new TypeError(address + ' is too long');
    const version = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.readUInt8(payload, 0);
    const hash = payload.slice(1);
    return {
        version,
        hash
    };
}
function fromBech32(address) {
    let result;
    let version;
    try {
        result = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bech32$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["bech32"].decode(address);
    } catch (e) {}
    if (result) {
        version = result.words[0];
        if (version !== 0) throw new TypeError(address + ' uses wrong encoding');
    } else {
        result = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bech32$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["bech32m"].decode(address);
        version = result.words[0];
        if (version === 0) throw new TypeError(address + ' uses wrong encoding');
    }
    const data = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bech32$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["bech32"].fromWords(result.words.slice(1));
    return {
        version,
        prefix: result.prefix,
        data: Uint8Array.from(data)
    };
}
function toBase58Check(hash, version) {
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.parse(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.tuple([
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Hash160bitSchema"],
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["UInt8Schema"]
    ]), [
        hash,
        version
    ]);
    const payload = new Uint8Array(21);
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.writeUInt8(payload, 0, version);
    payload.set(hash, 1);
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bs58check$2f$src$2f$esm$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].encode(payload);
}
function toBech32(data, version, prefix) {
    const words = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bech32$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["bech32"].toWords(data);
    words.unshift(version);
    return version === 0 ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bech32$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["bech32"].encode(prefix, words) : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bech32$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["bech32m"].encode(prefix, words);
}
function fromOutputScript(output, network) {
    // TODO: Network
    network = network || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$networks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.bitcoin;
    try {
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.p2pkh({
            output,
            network
        }).address;
    } catch (e) {}
    try {
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.p2sh({
            output,
            network
        }).address;
    } catch (e) {}
    try {
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.p2wpkh({
            output,
            network
        }).address;
    } catch (e) {}
    try {
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.p2wsh({
            output,
            network
        }).address;
    } catch (e) {}
    try {
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.p2tr({
            output,
            network
        }).address;
    } catch (e) {}
    try {
        return _toFutureSegwitAddress(output, network);
    } catch (e) {}
    throw new Error(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$script$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.toASM(output) + ' has no matching Address');
}
function toOutputScript(address, network) {
    network = network || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$networks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.bitcoin;
    let decodeBase58;
    let decodeBech32;
    try {
        decodeBase58 = fromBase58Check(address);
    } catch (e) {}
    if (decodeBase58) {
        if (decodeBase58.version === network.pubKeyHash) return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.p2pkh({
            hash: decodeBase58.hash
        }).output;
        if (decodeBase58.version === network.scriptHash) return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.p2sh({
            hash: decodeBase58.hash
        }).output;
    } else {
        try {
            decodeBech32 = fromBech32(address);
        } catch (e) {}
        if (decodeBech32) {
            if (decodeBech32.prefix !== network.bech32) throw new Error(address + ' has an invalid prefix');
            if (decodeBech32.version === 0) {
                if (decodeBech32.data.length === 20) return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.p2wpkh({
                    hash: decodeBech32.data
                }).output;
                if (decodeBech32.data.length === 32) return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.p2wsh({
                    hash: decodeBech32.data
                }).output;
            } else if (decodeBech32.version === 1) {
                if (decodeBech32.data.length === 32) return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.p2tr({
                    pubkey: decodeBech32.data
                }).output;
            } else if (decodeBech32.version >= FUTURE_SEGWIT_MIN_VERSION && decodeBech32.version <= FUTURE_SEGWIT_MAX_VERSION && decodeBech32.data.length >= FUTURE_SEGWIT_MIN_SIZE && decodeBech32.data.length <= FUTURE_SEGWIT_MAX_SIZE) {
                console.warn(FUTURE_SEGWIT_VERSION_WARNING);
                return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$script$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.compile([
                    decodeBech32.version + FUTURE_SEGWIT_VERSION_DIFF,
                    decodeBech32.data
                ]);
            }
        }
    }
    throw new Error(address + ' has no matching Script');
}
}}),
"[project]/node_modules/bitcoinjs-lib/src/esm/merkle.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "fastMerkleRoot": (()=>fastMerkleRoot)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/uint8array-tools/src/mjs/index.js [app-ssr] (ecmascript)");
;
function fastMerkleRoot(values, digestFn) {
    if (!Array.isArray(values)) throw TypeError('Expected values Array');
    if (typeof digestFn !== 'function') throw TypeError('Expected digest Function');
    let length = values.length;
    const results = values.concat();
    while(length > 1){
        let j = 0;
        for(let i = 0; i < length; i += 2, ++j){
            const left = results[i];
            const right = i + 1 === length ? left : results[i + 1];
            const data = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.concat([
                left,
                right
            ]);
            results[j] = digestFn(data);
        }
        length = j;
    }
    return results[0];
}
}}),
"[project]/node_modules/bitcoinjs-lib/src/esm/transaction.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "Transaction": (()=>Transaction)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$bufferutils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/bufferutils.js [app-ssr] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$crypto$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/crypto.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$script$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/script.js [app-ssr] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/types.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/uint8array-tools/src/mjs/index.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$bufferutils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/bufferutils.js [app-ssr] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/valibot/dist/index.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$varuint$2d$bitcoin$2f$src$2f$esm$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__varuint$3e$__ = __turbopack_import__("[project]/node_modules/varuint-bitcoin/src/esm/index.js [app-ssr] (ecmascript) <export * as varuint>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$script$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/script.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$ops$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/ops.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$sha256$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@noble/hashes/esm/sha256.js [app-ssr] (ecmascript)");
;
;
;
;
;
;
;
;
function varSliceSize(someScript) {
    const length = someScript.length;
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$varuint$2d$bitcoin$2f$src$2f$esm$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__varuint$3e$__["varuint"].encodingLength(length) + length;
}
function vectorSize(someVector) {
    const length = someVector.length;
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$varuint$2d$bitcoin$2f$src$2f$esm$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__varuint$3e$__["varuint"].encodingLength(length) + someVector.reduce((sum, witness)=>{
        return sum + varSliceSize(witness);
    }, 0);
}
const EMPTY_BUFFER = new Uint8Array(0);
const EMPTY_WITNESS = [];
const ZERO = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.fromHex('0000000000000000000000000000000000000000000000000000000000000000');
const ONE = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.fromHex('0000000000000000000000000000000000000000000000000000000000000001');
const VALUE_UINT64_MAX = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.fromHex('ffffffffffffffff');
const BLANK_OUTPUT = {
    script: EMPTY_BUFFER,
    valueBuffer: VALUE_UINT64_MAX
};
function isOutput(out) {
    return out.value !== undefined;
}
class Transaction {
    static DEFAULT_SEQUENCE = 0xffffffff;
    static SIGHASH_DEFAULT = 0x00;
    static SIGHASH_ALL = 0x01;
    static SIGHASH_NONE = 0x02;
    static SIGHASH_SINGLE = 0x03;
    static SIGHASH_ANYONECANPAY = 0x80;
    static SIGHASH_OUTPUT_MASK = 0x03;
    static SIGHASH_INPUT_MASK = 0x80;
    static ADVANCED_TRANSACTION_MARKER = 0x00;
    static ADVANCED_TRANSACTION_FLAG = 0x01;
    static fromBuffer(buffer, _NO_STRICT) {
        const bufferReader = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$bufferutils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["BufferReader"](buffer);
        const tx = new Transaction();
        tx.version = bufferReader.readInt32();
        const marker = bufferReader.readUInt8();
        const flag = bufferReader.readUInt8();
        let hasWitnesses = false;
        if (marker === Transaction.ADVANCED_TRANSACTION_MARKER && flag === Transaction.ADVANCED_TRANSACTION_FLAG) {
            hasWitnesses = true;
        } else {
            bufferReader.offset -= 2;
        }
        const vinLen = bufferReader.readVarInt();
        for(let i = 0; i < vinLen; ++i){
            tx.ins.push({
                hash: bufferReader.readSlice(32),
                index: bufferReader.readUInt32(),
                script: bufferReader.readVarSlice(),
                sequence: bufferReader.readUInt32(),
                witness: EMPTY_WITNESS
            });
        }
        const voutLen = bufferReader.readVarInt();
        for(let i = 0; i < voutLen; ++i){
            tx.outs.push({
                value: bufferReader.readInt64(),
                script: bufferReader.readVarSlice()
            });
        }
        if (hasWitnesses) {
            for(let i = 0; i < vinLen; ++i){
                tx.ins[i].witness = bufferReader.readVector();
            }
            // was this pointless?
            if (!tx.hasWitnesses()) throw new Error('Transaction has superfluous witness data');
        }
        tx.locktime = bufferReader.readUInt32();
        if (_NO_STRICT) return tx;
        if (bufferReader.offset !== buffer.length) throw new Error('Transaction has unexpected data');
        return tx;
    }
    static fromHex(hex) {
        return Transaction.fromBuffer(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.fromHex(hex), false);
    }
    static isCoinbaseHash(buffer) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.parse(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.Hash256bitSchema, buffer);
        for(let i = 0; i < 32; ++i){
            if (buffer[i] !== 0) return false;
        }
        return true;
    }
    version = 1;
    locktime = 0;
    ins = [];
    outs = [];
    isCoinbase() {
        return this.ins.length === 1 && Transaction.isCoinbaseHash(this.ins[0].hash);
    }
    addInput(hash, index, sequence, scriptSig) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.parse(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.tuple([
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.Hash256bitSchema,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.UInt32Schema,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.nullable(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.optional(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.UInt32Schema)),
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.nullable(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.optional(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.BufferSchema))
        ]), [
            hash,
            index,
            sequence,
            scriptSig
        ]);
        if (sequence === undefined || sequence === null) {
            sequence = Transaction.DEFAULT_SEQUENCE;
        }
        // Add the input and return the input's index
        return this.ins.push({
            hash,
            index,
            script: scriptSig || EMPTY_BUFFER,
            sequence: sequence,
            witness: EMPTY_WITNESS
        }) - 1;
    }
    addOutput(scriptPubKey, value) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.parse(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.tuple([
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.BufferSchema,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.SatoshiSchema
        ]), [
            scriptPubKey,
            value
        ]);
        // Add the output and return the output's index
        return this.outs.push({
            script: scriptPubKey,
            value
        }) - 1;
    }
    hasWitnesses() {
        return this.ins.some((x)=>{
            return x.witness.length !== 0;
        });
    }
    weight() {
        const base = this.byteLength(false);
        const total = this.byteLength(true);
        return base * 3 + total;
    }
    virtualSize() {
        return Math.ceil(this.weight() / 4);
    }
    byteLength(_ALLOW_WITNESS = true) {
        const hasWitnesses = _ALLOW_WITNESS && this.hasWitnesses();
        return (hasWitnesses ? 10 : 8) + __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$varuint$2d$bitcoin$2f$src$2f$esm$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__varuint$3e$__["varuint"].encodingLength(this.ins.length) + __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$varuint$2d$bitcoin$2f$src$2f$esm$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__varuint$3e$__["varuint"].encodingLength(this.outs.length) + this.ins.reduce((sum, input)=>{
            return sum + 40 + varSliceSize(input.script);
        }, 0) + this.outs.reduce((sum, output)=>{
            return sum + 8 + varSliceSize(output.script);
        }, 0) + (hasWitnesses ? this.ins.reduce((sum, input)=>{
            return sum + vectorSize(input.witness);
        }, 0) : 0);
    }
    clone() {
        const newTx = new Transaction();
        newTx.version = this.version;
        newTx.locktime = this.locktime;
        newTx.ins = this.ins.map((txIn)=>{
            return {
                hash: txIn.hash,
                index: txIn.index,
                script: txIn.script,
                sequence: txIn.sequence,
                witness: txIn.witness
            };
        });
        newTx.outs = this.outs.map((txOut)=>{
            return {
                script: txOut.script,
                value: txOut.value
            };
        });
        return newTx;
    }
    /**
   * Hash transaction for signing a specific input.
   *
   * Bitcoin uses a different hash for each signed transaction input.
   * This method copies the transaction, makes the necessary changes based on the
   * hashType, and then hashes the result.
   * This hash can then be used to sign the provided transaction input.
   */ hashForSignature(inIndex, prevOutScript, hashType) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.parse(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.tuple([
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.UInt32Schema,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.BufferSchema,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.number()
        ]), [
            inIndex,
            prevOutScript,
            hashType
        ]);
        // https://github.com/bitcoin/bitcoin/blob/master/src/test/sighash_tests.cpp#L29
        if (inIndex >= this.ins.length) return ONE;
        // ignore OP_CODESEPARATOR
        const ourScript = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$script$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.compile(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$script$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.decompile(prevOutScript).filter((x)=>{
            return x !== __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$ops$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["OPS"].OP_CODESEPARATOR;
        }));
        const txTmp = this.clone();
        // SIGHASH_NONE: ignore all outputs? (wildcard payee)
        if ((hashType & 0x1f) === Transaction.SIGHASH_NONE) {
            txTmp.outs = [];
            // ignore sequence numbers (except at inIndex)
            txTmp.ins.forEach((input, i)=>{
                if (i === inIndex) return;
                input.sequence = 0;
            });
        // SIGHASH_SINGLE: ignore all outputs, except at the same index?
        } else if ((hashType & 0x1f) === Transaction.SIGHASH_SINGLE) {
            // https://github.com/bitcoin/bitcoin/blob/master/src/test/sighash_tests.cpp#L60
            if (inIndex >= this.outs.length) return ONE;
            // truncate outputs after
            txTmp.outs.length = inIndex + 1;
            // "blank" outputs before
            for(let i = 0; i < inIndex; i++){
                txTmp.outs[i] = BLANK_OUTPUT;
            }
            // ignore sequence numbers (except at inIndex)
            txTmp.ins.forEach((input, y)=>{
                if (y === inIndex) return;
                input.sequence = 0;
            });
        }
        // SIGHASH_ANYONECANPAY: ignore inputs entirely?
        if (hashType & Transaction.SIGHASH_ANYONECANPAY) {
            txTmp.ins = [
                txTmp.ins[inIndex]
            ];
            txTmp.ins[0].script = ourScript;
        // SIGHASH_ALL: only ignore input scripts
        } else {
            // "blank" others input scripts
            txTmp.ins.forEach((input)=>{
                input.script = EMPTY_BUFFER;
            });
            txTmp.ins[inIndex].script = ourScript;
        }
        // serialize and hash
        const buffer = new Uint8Array(txTmp.byteLength(false) + 4);
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.writeInt32(buffer, buffer.length - 4, hashType, 'LE');
        txTmp.__toBuffer(buffer, 0, false);
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$crypto$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.hash256(buffer);
    }
    hashForWitnessV1(inIndex, prevOutScripts, values, hashType, leafHash, annex) {
        // https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki#common-signature-message
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.parse(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.tuple([
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.UInt32Schema,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.array(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.BufferSchema),
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.array(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.SatoshiSchema),
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.UInt32Schema
        ]), [
            inIndex,
            prevOutScripts,
            values,
            hashType
        ]);
        if (values.length !== this.ins.length || prevOutScripts.length !== this.ins.length) {
            throw new Error('Must supply prevout script and value for all inputs');
        }
        const outputType = hashType === Transaction.SIGHASH_DEFAULT ? Transaction.SIGHASH_ALL : hashType & Transaction.SIGHASH_OUTPUT_MASK;
        const inputType = hashType & Transaction.SIGHASH_INPUT_MASK;
        const isAnyoneCanPay = inputType === Transaction.SIGHASH_ANYONECANPAY;
        const isNone = outputType === Transaction.SIGHASH_NONE;
        const isSingle = outputType === Transaction.SIGHASH_SINGLE;
        let hashPrevouts = EMPTY_BUFFER;
        let hashAmounts = EMPTY_BUFFER;
        let hashScriptPubKeys = EMPTY_BUFFER;
        let hashSequences = EMPTY_BUFFER;
        let hashOutputs = EMPTY_BUFFER;
        if (!isAnyoneCanPay) {
            let bufferWriter = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$bufferutils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["BufferWriter"].withCapacity(36 * this.ins.length);
            this.ins.forEach((txIn)=>{
                bufferWriter.writeSlice(txIn.hash);
                bufferWriter.writeUInt32(txIn.index);
            });
            hashPrevouts = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$sha256$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["sha256"])(bufferWriter.end());
            bufferWriter = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$bufferutils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["BufferWriter"].withCapacity(8 * this.ins.length);
            values.forEach((value)=>bufferWriter.writeInt64(value));
            hashAmounts = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$sha256$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["sha256"])(bufferWriter.end());
            bufferWriter = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$bufferutils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["BufferWriter"].withCapacity(prevOutScripts.map(varSliceSize).reduce((a, b)=>a + b));
            prevOutScripts.forEach((prevOutScript)=>bufferWriter.writeVarSlice(prevOutScript));
            hashScriptPubKeys = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$sha256$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["sha256"])(bufferWriter.end());
            bufferWriter = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$bufferutils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["BufferWriter"].withCapacity(4 * this.ins.length);
            this.ins.forEach((txIn)=>bufferWriter.writeUInt32(txIn.sequence));
            hashSequences = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$sha256$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["sha256"])(bufferWriter.end());
        }
        if (!(isNone || isSingle)) {
            if (!this.outs.length) throw new Error('Add outputs to the transaction before signing.');
            const txOutsSize = this.outs.map((output)=>8 + varSliceSize(output.script)).reduce((a, b)=>a + b);
            const bufferWriter = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$bufferutils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["BufferWriter"].withCapacity(txOutsSize);
            this.outs.forEach((out)=>{
                bufferWriter.writeInt64(out.value);
                bufferWriter.writeVarSlice(out.script);
            });
            hashOutputs = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$sha256$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["sha256"])(bufferWriter.end());
        } else if (isSingle && inIndex < this.outs.length) {
            const output = this.outs[inIndex];
            const bufferWriter = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$bufferutils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["BufferWriter"].withCapacity(8 + varSliceSize(output.script));
            bufferWriter.writeInt64(output.value);
            bufferWriter.writeVarSlice(output.script);
            hashOutputs = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$sha256$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["sha256"])(bufferWriter.end());
        }
        const spendType = (leafHash ? 2 : 0) + (annex ? 1 : 0);
        // Length calculation from:
        // https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki#cite_note-14
        // With extension from:
        // https://github.com/bitcoin/bips/blob/master/bip-0342.mediawiki#signature-validation
        const sigMsgSize = 174 - (isAnyoneCanPay ? 49 : 0) - (isNone ? 32 : 0) + (annex ? 32 : 0) + (leafHash ? 37 : 0);
        const sigMsgWriter = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$bufferutils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["BufferWriter"].withCapacity(sigMsgSize);
        sigMsgWriter.writeUInt8(hashType);
        // Transaction
        sigMsgWriter.writeInt32(this.version);
        sigMsgWriter.writeUInt32(this.locktime);
        sigMsgWriter.writeSlice(hashPrevouts);
        sigMsgWriter.writeSlice(hashAmounts);
        sigMsgWriter.writeSlice(hashScriptPubKeys);
        sigMsgWriter.writeSlice(hashSequences);
        if (!(isNone || isSingle)) {
            sigMsgWriter.writeSlice(hashOutputs);
        }
        // Input
        sigMsgWriter.writeUInt8(spendType);
        if (isAnyoneCanPay) {
            const input = this.ins[inIndex];
            sigMsgWriter.writeSlice(input.hash);
            sigMsgWriter.writeUInt32(input.index);
            sigMsgWriter.writeInt64(values[inIndex]);
            sigMsgWriter.writeVarSlice(prevOutScripts[inIndex]);
            sigMsgWriter.writeUInt32(input.sequence);
        } else {
            sigMsgWriter.writeUInt32(inIndex);
        }
        if (annex) {
            const bufferWriter = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$bufferutils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["BufferWriter"].withCapacity(varSliceSize(annex));
            bufferWriter.writeVarSlice(annex);
            sigMsgWriter.writeSlice((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$noble$2f$hashes$2f$esm$2f$sha256$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["sha256"])(bufferWriter.end()));
        }
        // Output
        if (isSingle) {
            sigMsgWriter.writeSlice(hashOutputs);
        }
        // BIP342 extension
        if (leafHash) {
            sigMsgWriter.writeSlice(leafHash);
            sigMsgWriter.writeUInt8(0);
            sigMsgWriter.writeUInt32(0xffffffff);
        }
        // Extra zero byte because:
        // https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki#cite_note-19
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$crypto$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.taggedHash('TapSighash', __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.concat([
            Uint8Array.from([
                0x00
            ]),
            sigMsgWriter.end()
        ]));
    }
    hashForWitnessV0(inIndex, prevOutScript, value, hashType) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.parse(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.tuple([
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.UInt32Schema,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.BufferSchema,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.SatoshiSchema,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.UInt32Schema
        ]), [
            inIndex,
            prevOutScript,
            value,
            hashType
        ]);
        let tbuffer = Uint8Array.from([]);
        let bufferWriter;
        let hashOutputs = ZERO;
        let hashPrevouts = ZERO;
        let hashSequence = ZERO;
        if (!(hashType & Transaction.SIGHASH_ANYONECANPAY)) {
            tbuffer = new Uint8Array(36 * this.ins.length);
            bufferWriter = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$bufferutils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["BufferWriter"](tbuffer, 0);
            this.ins.forEach((txIn)=>{
                bufferWriter.writeSlice(txIn.hash);
                bufferWriter.writeUInt32(txIn.index);
            });
            hashPrevouts = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$crypto$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.hash256(tbuffer);
        }
        if (!(hashType & Transaction.SIGHASH_ANYONECANPAY) && (hashType & 0x1f) !== Transaction.SIGHASH_SINGLE && (hashType & 0x1f) !== Transaction.SIGHASH_NONE) {
            tbuffer = new Uint8Array(4 * this.ins.length);
            bufferWriter = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$bufferutils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["BufferWriter"](tbuffer, 0);
            this.ins.forEach((txIn)=>{
                bufferWriter.writeUInt32(txIn.sequence);
            });
            hashSequence = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$crypto$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.hash256(tbuffer);
        }
        if ((hashType & 0x1f) !== Transaction.SIGHASH_SINGLE && (hashType & 0x1f) !== Transaction.SIGHASH_NONE) {
            const txOutsSize = this.outs.reduce((sum, output)=>{
                return sum + 8 + varSliceSize(output.script);
            }, 0);
            tbuffer = new Uint8Array(txOutsSize);
            bufferWriter = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$bufferutils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["BufferWriter"](tbuffer, 0);
            this.outs.forEach((out)=>{
                bufferWriter.writeInt64(out.value);
                bufferWriter.writeVarSlice(out.script);
            });
            hashOutputs = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$crypto$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.hash256(tbuffer);
        } else if ((hashType & 0x1f) === Transaction.SIGHASH_SINGLE && inIndex < this.outs.length) {
            const output = this.outs[inIndex];
            tbuffer = new Uint8Array(8 + varSliceSize(output.script));
            bufferWriter = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$bufferutils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["BufferWriter"](tbuffer, 0);
            bufferWriter.writeInt64(output.value);
            bufferWriter.writeVarSlice(output.script);
            hashOutputs = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$crypto$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.hash256(tbuffer);
        }
        tbuffer = new Uint8Array(156 + varSliceSize(prevOutScript));
        bufferWriter = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$bufferutils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["BufferWriter"](tbuffer, 0);
        const input = this.ins[inIndex];
        bufferWriter.writeInt32(this.version);
        bufferWriter.writeSlice(hashPrevouts);
        bufferWriter.writeSlice(hashSequence);
        bufferWriter.writeSlice(input.hash);
        bufferWriter.writeUInt32(input.index);
        bufferWriter.writeVarSlice(prevOutScript);
        bufferWriter.writeInt64(value);
        bufferWriter.writeUInt32(input.sequence);
        bufferWriter.writeSlice(hashOutputs);
        bufferWriter.writeUInt32(this.locktime);
        bufferWriter.writeUInt32(hashType);
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$crypto$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.hash256(tbuffer);
    }
    getHash(forWitness) {
        // wtxid for coinbase is always 32 bytes of 0x00
        if (forWitness && this.isCoinbase()) return new Uint8Array(32);
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$crypto$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.hash256(this.__toBuffer(undefined, undefined, forWitness));
    }
    getId() {
        // transaction hash's are displayed in reverse order
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.toHex((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$bufferutils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["reverseBuffer"])(this.getHash(false)));
    }
    toBuffer(buffer, initialOffset) {
        return this.__toBuffer(buffer, initialOffset, true);
    }
    toHex() {
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.toHex(this.toBuffer(undefined, undefined));
    }
    setInputScript(index, scriptSig) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.parse(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.tuple([
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.number(),
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.BufferSchema
        ]), [
            index,
            scriptSig
        ]);
        this.ins[index].script = scriptSig;
    }
    setWitness(index, witness) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.parse(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.tuple([
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.number(),
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.array(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.BufferSchema)
        ]), [
            index,
            witness
        ]);
        this.ins[index].witness = witness;
    }
    __toBuffer(buffer, initialOffset, _ALLOW_WITNESS = false) {
        if (!buffer) buffer = new Uint8Array(this.byteLength(_ALLOW_WITNESS));
        const bufferWriter = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$bufferutils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["BufferWriter"](buffer, initialOffset || 0);
        bufferWriter.writeInt32(this.version);
        const hasWitnesses = _ALLOW_WITNESS && this.hasWitnesses();
        if (hasWitnesses) {
            bufferWriter.writeUInt8(Transaction.ADVANCED_TRANSACTION_MARKER);
            bufferWriter.writeUInt8(Transaction.ADVANCED_TRANSACTION_FLAG);
        }
        bufferWriter.writeVarInt(this.ins.length);
        this.ins.forEach((txIn)=>{
            bufferWriter.writeSlice(txIn.hash);
            bufferWriter.writeUInt32(txIn.index);
            bufferWriter.writeVarSlice(txIn.script);
            bufferWriter.writeUInt32(txIn.sequence);
        });
        bufferWriter.writeVarInt(this.outs.length);
        this.outs.forEach((txOut)=>{
            if (isOutput(txOut)) {
                bufferWriter.writeInt64(txOut.value);
            } else {
                bufferWriter.writeSlice(txOut.valueBuffer);
            }
            bufferWriter.writeVarSlice(txOut.script);
        });
        if (hasWitnesses) {
            this.ins.forEach((input)=>{
                bufferWriter.writeVector(input.witness);
            });
        }
        bufferWriter.writeUInt32(this.locktime);
        // avoid slicing unless necessary
        if (initialOffset !== undefined) return buffer.slice(initialOffset, bufferWriter.offset);
        return buffer;
    }
}
}}),
"[project]/node_modules/bitcoinjs-lib/src/esm/block.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "Block": (()=>Block)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$bufferutils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/bufferutils.js [app-ssr] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$crypto$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/crypto.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$merkle$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/merkle.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$transaction$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/transaction.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/uint8array-tools/src/mjs/index.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$bufferutils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/bufferutils.js [app-ssr] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/valibot/dist/index.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$varuint$2d$bitcoin$2f$src$2f$esm$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__varuint$3e$__ = __turbopack_import__("[project]/node_modules/varuint-bitcoin/src/esm/index.js [app-ssr] (ecmascript) <export * as varuint>");
;
;
;
;
;
;
const errorMerkleNoTxes = new TypeError('Cannot compute merkle root for zero transactions');
const errorWitnessNotSegwit = new TypeError('Cannot compute witness commit for non-segwit block');
class Block {
    static fromBuffer(buffer) {
        if (buffer.length < 80) throw new Error('Buffer too small (< 80 bytes)');
        const bufferReader = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$bufferutils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["BufferReader"](buffer);
        const block = new Block();
        block.version = bufferReader.readInt32();
        block.prevHash = bufferReader.readSlice(32);
        block.merkleRoot = bufferReader.readSlice(32);
        block.timestamp = bufferReader.readUInt32();
        block.bits = bufferReader.readUInt32();
        block.nonce = bufferReader.readUInt32();
        if (buffer.length === 80) return block;
        const readTransaction = ()=>{
            const tx = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$transaction$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transaction"].fromBuffer(bufferReader.buffer.slice(bufferReader.offset), true);
            bufferReader.offset += tx.byteLength();
            return tx;
        };
        const nTransactions = bufferReader.readVarInt();
        block.transactions = [];
        for(let i = 0; i < nTransactions; ++i){
            const tx = readTransaction();
            block.transactions.push(tx);
        }
        const witnessCommit = block.getWitnessCommit();
        // This Block contains a witness commit
        if (witnessCommit) block.witnessCommit = witnessCommit;
        return block;
    }
    static fromHex(hex) {
        return Block.fromBuffer(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.fromHex(hex));
    }
    static calculateTarget(bits) {
        const exponent = ((bits & 0xff000000) >> 24) - 3;
        const mantissa = bits & 0x007fffff;
        const target = new Uint8Array(32);
        target[29 - exponent] = mantissa >> 16 & 0xff;
        target[30 - exponent] = mantissa >> 8 & 0xff;
        target[31 - exponent] = mantissa & 0xff;
        return target;
    }
    static calculateMerkleRoot(transactions, forWitness) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.parse(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.array(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.object({
            getHash: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$valibot$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.function()
        })), transactions);
        if (transactions.length === 0) throw errorMerkleNoTxes;
        if (forWitness && !txesHaveWitnessCommit(transactions)) throw errorWitnessNotSegwit;
        const hashes = transactions.map((transaction)=>transaction.getHash(forWitness));
        const rootHash = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$merkle$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["fastMerkleRoot"])(hashes, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$crypto$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.hash256);
        return forWitness ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$crypto$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.hash256(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.concat([
            rootHash,
            transactions[0].ins[0].witness[0]
        ])) : rootHash;
    }
    version = 1;
    prevHash = undefined;
    merkleRoot = undefined;
    timestamp = 0;
    witnessCommit = undefined;
    bits = 0;
    nonce = 0;
    transactions = undefined;
    getWitnessCommit() {
        if (!txesHaveWitnessCommit(this.transactions)) return null;
        // The merkle root for the witness data is in an OP_RETURN output.
        // There is no rule for the index of the output, so use filter to find it.
        // The root is prepended with 0xaa21a9ed so check for 0x6a24aa21a9ed
        // If multiple commits are found, the output with highest index is assumed.
        const witnessCommits = this.transactions[0].outs.filter((out)=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.compare(out.script.slice(0, 6), Uint8Array.from([
                0x6a,
                0x24,
                0xaa,
                0x21,
                0xa9,
                0xed
            ])) === 0).map((out)=>out.script.slice(6, 38));
        if (witnessCommits.length === 0) return null;
        // Use the commit with the highest output (should only be one though)
        const result = witnessCommits[witnessCommits.length - 1];
        if (!(result instanceof Uint8Array && result.length === 32)) return null;
        return result;
    }
    hasWitnessCommit() {
        if (this.witnessCommit instanceof Uint8Array && this.witnessCommit.length === 32) return true;
        if (this.getWitnessCommit() !== null) return true;
        return false;
    }
    hasWitness() {
        return anyTxHasWitness(this.transactions);
    }
    weight() {
        const base = this.byteLength(false, false);
        const total = this.byteLength(false, true);
        return base * 3 + total;
    }
    byteLength(headersOnly, allowWitness = true) {
        if (headersOnly || !this.transactions) return 80;
        return 80 + __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$varuint$2d$bitcoin$2f$src$2f$esm$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__varuint$3e$__["varuint"].encodingLength(this.transactions.length) + this.transactions.reduce((a, x)=>a + x.byteLength(allowWitness), 0);
    }
    getHash() {
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$crypto$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.hash256(this.toBuffer(true));
    }
    getId() {
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.toHex((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$bufferutils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["reverseBuffer"])(this.getHash()));
    }
    getUTCDate() {
        const date = new Date(0); // epoch
        date.setUTCSeconds(this.timestamp);
        return date;
    }
    // TODO: buffer, offset compatibility
    toBuffer(headersOnly) {
        const buffer = new Uint8Array(this.byteLength(headersOnly));
        const bufferWriter = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$bufferutils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["BufferWriter"](buffer);
        bufferWriter.writeInt32(this.version);
        bufferWriter.writeSlice(this.prevHash);
        bufferWriter.writeSlice(this.merkleRoot);
        bufferWriter.writeUInt32(this.timestamp);
        bufferWriter.writeUInt32(this.bits);
        bufferWriter.writeUInt32(this.nonce);
        if (headersOnly || !this.transactions) return buffer;
        const { bytes } = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$varuint$2d$bitcoin$2f$src$2f$esm$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__varuint$3e$__["varuint"].encode(this.transactions.length, buffer, bufferWriter.offset);
        bufferWriter.offset += bytes;
        this.transactions.forEach((tx)=>{
            const txSize = tx.byteLength(); // TODO: extract from toBuffer?
            tx.toBuffer(buffer, bufferWriter.offset);
            bufferWriter.offset += txSize;
        });
        return buffer;
    }
    toHex(headersOnly) {
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.toHex(this.toBuffer(headersOnly));
    }
    checkTxRoots() {
        // If the Block has segwit transactions but no witness commit,
        // there's no way it can be valid, so fail the check.
        const hasWitnessCommit = this.hasWitnessCommit();
        if (!hasWitnessCommit && this.hasWitness()) return false;
        return this.__checkMerkleRoot() && (hasWitnessCommit ? this.__checkWitnessCommit() : true);
    }
    checkProofOfWork() {
        const hash = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$bufferutils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["reverseBuffer"])(this.getHash());
        const target = Block.calculateTarget(this.bits);
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.compare(hash, target) <= 0;
    }
    __checkMerkleRoot() {
        if (!this.transactions) throw errorMerkleNoTxes;
        const actualMerkleRoot = Block.calculateMerkleRoot(this.transactions);
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.compare(this.merkleRoot, actualMerkleRoot) === 0;
    }
    __checkWitnessCommit() {
        if (!this.transactions) throw errorMerkleNoTxes;
        if (!this.hasWitnessCommit()) throw errorWitnessNotSegwit;
        const actualWitnessCommit = Block.calculateMerkleRoot(this.transactions, true);
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.compare(this.witnessCommit, actualWitnessCommit) === 0;
    }
}
function txesHaveWitnessCommit(transactions) {
    return transactions instanceof Array && transactions[0] && transactions[0].ins && transactions[0].ins instanceof Array && transactions[0].ins[0] && transactions[0].ins[0].witness && transactions[0].ins[0].witness instanceof Array && transactions[0].ins[0].witness.length > 0;
}
function anyTxHasWitness(transactions) {
    return transactions instanceof Array && transactions.some((tx)=>typeof tx === 'object' && tx.ins instanceof Array && tx.ins.some((input)=>typeof input === 'object' && input.witness instanceof Array && input.witness.length > 0));
}
}}),
"[project]/node_modules/bitcoinjs-lib/src/esm/psbt/psbtutils.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "checkInputForSig": (()=>checkInputForSig),
    "isP2MS": (()=>isP2MS),
    "isP2PK": (()=>isP2PK),
    "isP2PKH": (()=>isP2PKH),
    "isP2SHScript": (()=>isP2SHScript),
    "isP2TR": (()=>isP2TR),
    "isP2WPKH": (()=>isP2WPKH),
    "isP2WSHScript": (()=>isP2WSHScript),
    "pubkeyInScript": (()=>pubkeyInScript),
    "pubkeyPositionInScript": (()=>pubkeyPositionInScript),
    "signatureBlocksAction": (()=>signatureBlocksAction),
    "witnessStackToScriptWitness": (()=>witnessStackToScriptWitness)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$varuint$2d$bitcoin$2f$src$2f$esm$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/varuint-bitcoin/src/esm/index.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$script$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/script.js [app-ssr] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$transaction$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/transaction.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$crypto$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/crypto.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/payments/index.js [app-ssr] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/uint8array-tools/src/mjs/index.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/payments/index.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$script$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/script.js [app-ssr] (ecmascript)");
;
;
;
;
;
;
/**
 * Checks if a given payment factory can generate a payment script from a given script.
 * @param payment The payment factory to check.
 * @returns A function that takes a script and returns a boolean indicating whether the payment factory can generate a payment script from the script.
 */ function isPaymentFactory(payment) {
    return (script)=>{
        try {
            payment({
                output: script
            });
            return true;
        } catch (err) {
            return false;
        }
    };
}
const isP2MS = isPaymentFactory(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.p2ms);
const isP2PK = isPaymentFactory(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.p2pk);
const isP2PKH = isPaymentFactory(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.p2pkh);
const isP2WPKH = isPaymentFactory(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.p2wpkh);
const isP2WSHScript = isPaymentFactory(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.p2wsh);
const isP2SHScript = isPaymentFactory(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.p2sh);
const isP2TR = isPaymentFactory(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.p2tr);
function witnessStackToScriptWitness(witness) {
    let buffer = new Uint8Array(0);
    function writeSlice(slice) {
        buffer = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.concat([
            buffer,
            slice
        ]);
    }
    function writeVarInt(i) {
        const currentLen = buffer.length;
        const varintLen = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$varuint$2d$bitcoin$2f$src$2f$esm$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.encodingLength(i);
        buffer = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.concat([
            buffer,
            new Uint8Array(varintLen)
        ]);
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$varuint$2d$bitcoin$2f$src$2f$esm$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.encode(i, buffer, currentLen);
    }
    function writeVarSlice(slice) {
        writeVarInt(slice.length);
        writeSlice(slice);
    }
    function writeVector(vector) {
        writeVarInt(vector.length);
        vector.forEach(writeVarSlice);
    }
    writeVector(witness);
    return buffer;
}
function pubkeyPositionInScript(pubkey, script) {
    const pubkeyHash = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$crypto$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["hash160"])(pubkey);
    const pubkeyXOnly = pubkey.slice(1, 33); // slice before calling?
    const decompiled = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$script$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.decompile(script);
    if (decompiled === null) throw new Error('Unknown script error');
    return decompiled.findIndex((element)=>{
        if (typeof element === 'number') return false;
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.compare(pubkey, element) === 0 || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.compare(pubkeyHash, element) === 0 || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.compare(pubkeyXOnly, element) === 0;
    });
}
function pubkeyInScript(pubkey, script) {
    return pubkeyPositionInScript(pubkey, script) !== -1;
}
function checkInputForSig(input, action) {
    const pSigs = extractPartialSigs(input);
    return pSigs.some((pSig)=>signatureBlocksAction(pSig, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$script$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.signature.decode, action));
}
function signatureBlocksAction(signature, signatureDecodeFn, action) {
    const { hashType } = signatureDecodeFn(signature);
    const whitelist = [];
    const isAnyoneCanPay = hashType & __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$transaction$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transaction"].SIGHASH_ANYONECANPAY;
    if (isAnyoneCanPay) whitelist.push('addInput');
    const hashMod = hashType & 0x1f;
    switch(hashMod){
        case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$transaction$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transaction"].SIGHASH_ALL:
            break;
        case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$transaction$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transaction"].SIGHASH_SINGLE:
        case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$transaction$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transaction"].SIGHASH_NONE:
            whitelist.push('addOutput');
            whitelist.push('setInputSequence');
            break;
    }
    if (whitelist.indexOf(action) === -1) {
        return true;
    }
    return false;
}
/**
 * Extracts the signatures from a PsbtInput object.
 * If the input has partial signatures, it returns an array of the signatures.
 * If the input does not have partial signatures, it checks if it has a finalScriptSig or finalScriptWitness.
 * If it does, it extracts the signatures from the final scripts and returns them.
 * If none of the above conditions are met, it returns an empty array.
 *
 * @param input - The PsbtInput object from which to extract the signatures.
 * @returns An array of signatures extracted from the PsbtInput object.
 */ function extractPartialSigs(input) {
    let pSigs = [];
    if ((input.partialSig || []).length === 0) {
        if (!input.finalScriptSig && !input.finalScriptWitness) return [];
        pSigs = getPsigsFromInputFinalScripts(input);
    } else {
        pSigs = input.partialSig;
    }
    return pSigs.map((p)=>p.signature);
}
/**
 * Retrieves the partial signatures (Psigs) from the input's final scripts.
 * Psigs are extracted from both the final scriptSig and final scriptWitness of the input.
 * Only canonical script signatures are considered.
 *
 * @param input - The PsbtInput object representing the input.
 * @returns An array of PartialSig objects containing the extracted Psigs.
 */ function getPsigsFromInputFinalScripts(input) {
    const scriptItems = !input.finalScriptSig ? [] : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$script$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.decompile(input.finalScriptSig) || [];
    const witnessItems = !input.finalScriptWitness ? [] : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$script$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.decompile(input.finalScriptWitness) || [];
    return scriptItems.concat(witnessItems).filter((item)=>{
        return item instanceof Uint8Array && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$script$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.isCanonicalScriptSignature(item);
    }).map((sig)=>({
            signature: sig
        }));
}
}}),
"[project]/node_modules/bitcoinjs-lib/src/esm/psbt/bip371.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "checkTaprootInputFields": (()=>checkTaprootInputFields),
    "checkTaprootInputForSigs": (()=>checkTaprootInputForSigs),
    "checkTaprootOutputFields": (()=>checkTaprootOutputFields),
    "isTaprootInput": (()=>isTaprootInput),
    "isTaprootOutput": (()=>isTaprootOutput),
    "serializeTaprootSignature": (()=>serializeTaprootSignature),
    "tapScriptFinalizer": (()=>tapScriptFinalizer),
    "tapTreeFromList": (()=>tapTreeFromList),
    "tapTreeToList": (()=>tapTreeToList),
    "toXOnly": (()=>toXOnly),
    "tweakInternalPubKey": (()=>tweakInternalPubKey)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/types.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$transaction$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/transaction.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$psbt$2f$psbtutils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/psbt/psbtutils.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$bip341$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/payments/bip341.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/payments/index.js [app-ssr] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/uint8array-tools/src/mjs/index.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$p2tr$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/payments/p2tr.js [app-ssr] (ecmascript)");
;
;
;
;
;
;
;
const toXOnly = (pubKey)=>pubKey.length === 32 ? pubKey : pubKey.slice(1, 33);
function tapScriptFinalizer(inputIndex, input, tapLeafHashToFinalize) {
    const tapLeaf = findTapLeafToFinalize(input, inputIndex, tapLeafHashToFinalize);
    try {
        const sigs = sortSignatures(input, tapLeaf);
        const witness = sigs.concat(tapLeaf.script).concat(tapLeaf.controlBlock);
        return {
            finalScriptWitness: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$psbt$2f$psbtutils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["witnessStackToScriptWitness"])(witness)
        };
    } catch (err) {
        throw new Error(`Can not finalize taproot input #${inputIndex}: ${err}`);
    }
}
function serializeTaprootSignature(sig, sighashType) {
    const sighashTypeByte = sighashType ? Uint8Array.from([
        sighashType
    ]) : Uint8Array.from([]);
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.concat([
        sig,
        sighashTypeByte
    ]);
}
function isTaprootInput(input) {
    return input && !!(input.tapInternalKey || input.tapMerkleRoot || input.tapLeafScript && input.tapLeafScript.length || input.tapBip32Derivation && input.tapBip32Derivation.length || input.witnessUtxo && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$psbt$2f$psbtutils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isP2TR"])(input.witnessUtxo.script));
}
function isTaprootOutput(output, script) {
    return output && !!(output.tapInternalKey || output.tapTree || output.tapBip32Derivation && output.tapBip32Derivation.length || script && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$psbt$2f$psbtutils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isP2TR"])(script));
}
function checkTaprootInputFields(inputData, newInputData, action) {
    checkMixedTaprootAndNonTaprootInputFields(inputData, newInputData, action);
    checkIfTapLeafInTree(inputData, newInputData, action);
}
function checkTaprootOutputFields(outputData, newOutputData, action) {
    checkMixedTaprootAndNonTaprootOutputFields(outputData, newOutputData, action);
    checkTaprootScriptPubkey(outputData, newOutputData);
}
function checkTaprootScriptPubkey(outputData, newOutputData) {
    if (!newOutputData.tapTree && !newOutputData.tapInternalKey) return;
    const tapInternalKey = newOutputData.tapInternalKey || outputData.tapInternalKey;
    const tapTree = newOutputData.tapTree || outputData.tapTree;
    if (tapInternalKey) {
        const { script: scriptPubkey } = outputData;
        const script = getTaprootScripPubkey(tapInternalKey, tapTree);
        if (scriptPubkey && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.compare(script, scriptPubkey) !== 0) throw new Error('Error adding output. Script or address mismatch.');
    }
}
/**
 * Returns the Taproot script public key.
 *
 * @param tapInternalKey - The Taproot internal key.
 * @param tapTree - The Taproot tree (optional).
 * @returns The Taproot script public key.
 */ function getTaprootScripPubkey(tapInternalKey, tapTree) {
    const scriptTree = tapTree && tapTreeFromList(tapTree.leaves);
    const { output } = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$p2tr$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["p2tr"])({
        internalPubkey: tapInternalKey,
        scriptTree
    });
    return output;
}
function tweakInternalPubKey(inputIndex, input) {
    const tapInternalKey = input.tapInternalKey;
    const outputKey = tapInternalKey && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$bip341$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["tweakKey"])(tapInternalKey, input.tapMerkleRoot);
    if (!outputKey) throw new Error(`Cannot tweak tap internal key for input #${inputIndex}. Public key: ${// tapInternalKey && tapInternalKey.toString('hex')
    tapInternalKey && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.toHex(tapInternalKey)}`);
    return outputKey.x;
}
function tapTreeToList(tree) {
    if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isTaptree"])(tree)) throw new Error('Cannot convert taptree to tapleaf list. Expecting a tapree structure.');
    return _tapTreeToList(tree);
}
function tapTreeFromList(leaves = []) {
    if (leaves.length === 1 && leaves[0].depth === 0) return {
        output: leaves[0].script,
        version: leaves[0].leafVersion
    };
    return instertLeavesInTree(leaves);
}
function checkTaprootInputForSigs(input, action) {
    const sigs = extractTaprootSigs(input);
    return sigs.some((sig)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$psbt$2f$psbtutils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["signatureBlocksAction"])(sig, decodeSchnorrSignature, action));
}
/**
 * Decodes a Schnorr signature.
 * @param signature The signature to decode.
 * @returns The decoded Schnorr signature.
 */ function decodeSchnorrSignature(signature) {
    return {
        signature: signature.slice(0, 64),
        hashType: signature.slice(64)[0] || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$transaction$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transaction"].SIGHASH_DEFAULT
    };
}
/**
 * Extracts taproot signatures from a PSBT input.
 * @param input The PSBT input to extract signatures from.
 * @returns An array of taproot signatures.
 */ function extractTaprootSigs(input) {
    const sigs = [];
    if (input.tapKeySig) sigs.push(input.tapKeySig);
    if (input.tapScriptSig) sigs.push(...input.tapScriptSig.map((s)=>s.signature));
    if (!sigs.length) {
        const finalTapKeySig = getTapKeySigFromWithness(input.finalScriptWitness);
        if (finalTapKeySig) sigs.push(finalTapKeySig);
    }
    return sigs;
}
/**
 * Gets the taproot signature from the witness.
 * @param finalScriptWitness The final script witness.
 * @returns The taproot signature, or undefined if not found.
 */ function getTapKeySigFromWithness(finalScriptWitness) {
    if (!finalScriptWitness) return;
    const witness = finalScriptWitness.slice(2);
    // todo: add schnorr signature validation
    if (witness.length === 64 || witness.length === 65) return witness;
}
/**
 * Converts a binary tree to a BIP371 type list.
 * @param tree The binary tap tree.
 * @param leaves A list of tapleaves. Optional.
 * @param depth The current depth. Optional.
 * @returns A list of BIP 371 tapleaves.
 * @throws Throws an error if the taptree cannot be converted to a tapleaf list.
 */ function _tapTreeToList(tree, leaves = [], depth = 0) {
    if (depth > __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$bip341$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["MAX_TAPTREE_DEPTH"]) throw new Error('Max taptree depth exceeded.');
    if (!tree) return [];
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isTapleaf"])(tree)) {
        leaves.push({
            depth,
            leafVersion: tree.version || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$bip341$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["LEAF_VERSION_TAPSCRIPT"],
            script: tree.output
        });
        return leaves;
    }
    if (tree[0]) _tapTreeToList(tree[0], leaves, depth + 1);
    if (tree[1]) _tapTreeToList(tree[1], leaves, depth + 1);
    return leaves;
}
/**
 * Inserts the tapleaves into the taproot tree.
 * @param leaves The tapleaves to insert.
 * @returns The taproot tree.
 * @throws Throws an error if there is no room left to insert a tapleaf in the tree.
 */ function instertLeavesInTree(leaves) {
    let tree;
    for (const leaf of leaves){
        tree = instertLeafInTree(leaf, tree);
        if (!tree) throw new Error(`No room left to insert tapleaf in tree`);
    }
    return tree;
}
/**
 * Inserts a tapleaf into the taproot tree.
 * @param leaf The tapleaf to insert.
 * @param tree The taproot tree.
 * @param depth The current depth. Optional.
 * @returns The updated taproot tree.
 */ function instertLeafInTree(leaf, tree, depth = 0) {
    if (depth > __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$bip341$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["MAX_TAPTREE_DEPTH"]) throw new Error('Max taptree depth exceeded.');
    if (leaf.depth === depth) {
        if (!tree) return {
            output: leaf.script,
            version: leaf.leafVersion
        };
        return;
    }
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isTapleaf"])(tree)) return;
    const leftSide = instertLeafInTree(leaf, tree && tree[0], depth + 1);
    if (leftSide) return [
        leftSide,
        tree && tree[1]
    ];
    const rightSide = instertLeafInTree(leaf, tree && tree[1], depth + 1);
    if (rightSide) return [
        tree && tree[0],
        rightSide
    ];
}
/**
 * Checks the input fields for mixed taproot and non-taproot fields.
 * @param inputData The original input data.
 * @param newInputData The new input data.
 * @param action The action being performed.
 * @throws Throws an error if the input fields are inconsistent.
 */ function checkMixedTaprootAndNonTaprootInputFields(inputData, newInputData, action) {
    const isBadTaprootUpdate = isTaprootInput(inputData) && hasNonTaprootFields(newInputData);
    const isBadNonTaprootUpdate = hasNonTaprootFields(inputData) && isTaprootInput(newInputData);
    const hasMixedFields = inputData === newInputData && isTaprootInput(newInputData) && hasNonTaprootFields(newInputData); // todo: bad? use !===
    if (isBadTaprootUpdate || isBadNonTaprootUpdate || hasMixedFields) throw new Error(`Invalid arguments for Psbt.${action}. ` + `Cannot use both taproot and non-taproot fields.`);
}
/**
 * Checks the output fields for mixed taproot and non-taproot fields.
 * @param inputData The original output data.
 * @param newInputData The new output data.
 * @param action The action being performed.
 * @throws Throws an error if the output fields are inconsistent.
 */ function checkMixedTaprootAndNonTaprootOutputFields(inputData, newInputData, action) {
    const isBadTaprootUpdate = isTaprootOutput(inputData) && hasNonTaprootFields(newInputData);
    const isBadNonTaprootUpdate = hasNonTaprootFields(inputData) && isTaprootOutput(newInputData);
    const hasMixedFields = inputData === newInputData && isTaprootOutput(newInputData) && hasNonTaprootFields(newInputData);
    if (isBadTaprootUpdate || isBadNonTaprootUpdate || hasMixedFields) throw new Error(`Invalid arguments for Psbt.${action}. ` + `Cannot use both taproot and non-taproot fields.`);
}
/**
 * Checks if the tap leaf is part of the tap tree for the given input data.
 * Throws an error if the tap leaf is not part of the tap tree.
 * @param inputData - The original PsbtInput data.
 * @param newInputData - The new PsbtInput data.
 * @param action - The action being performed.
 * @throws {Error} - If the tap leaf is not part of the tap tree.
 */ function checkIfTapLeafInTree(inputData, newInputData, action) {
    if (newInputData.tapMerkleRoot) {
        const newLeafsInTree = (newInputData.tapLeafScript || []).every((l)=>isTapLeafInTree(l, newInputData.tapMerkleRoot));
        const oldLeafsInTree = (inputData.tapLeafScript || []).every((l)=>isTapLeafInTree(l, newInputData.tapMerkleRoot));
        if (!newLeafsInTree || !oldLeafsInTree) throw new Error(`Invalid arguments for Psbt.${action}. Tapleaf not part of taptree.`);
    } else if (inputData.tapMerkleRoot) {
        const newLeafsInTree = (newInputData.tapLeafScript || []).every((l)=>isTapLeafInTree(l, inputData.tapMerkleRoot));
        if (!newLeafsInTree) throw new Error(`Invalid arguments for Psbt.${action}. Tapleaf not part of taptree.`);
    }
}
/**
 * Checks if a TapLeafScript is present in a Merkle tree.
 * @param tapLeaf The TapLeafScript to check.
 * @param merkleRoot The Merkle root of the tree. If not provided, the function assumes the TapLeafScript is present.
 * @returns A boolean indicating whether the TapLeafScript is present in the tree.
 */ function isTapLeafInTree(tapLeaf, merkleRoot) {
    if (!merkleRoot) return true;
    const leafHash = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$bip341$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["tapleafHash"])({
        output: tapLeaf.script,
        version: tapLeaf.leafVersion
    });
    const rootHash = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$bip341$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["rootHashFromPath"])(tapLeaf.controlBlock, leafHash);
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.compare(rootHash, merkleRoot) === 0;
}
/**
 * Sorts the signatures in the input's tapScriptSig array based on their position in the tapLeaf script.
 *
 * @param input - The PsbtInput object.
 * @param tapLeaf - The TapLeafScript object.
 * @returns An array of sorted signatures as Buffers.
 */ function sortSignatures(input, tapLeaf) {
    const leafHash = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$bip341$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["tapleafHash"])({
        output: tapLeaf.script,
        version: tapLeaf.leafVersion
    });
    return (input.tapScriptSig || [])// .filter(tss => tss.leafHash.equals(leafHash))
    .filter((tss)=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.compare(tss.leafHash, leafHash) === 0).map((tss)=>addPubkeyPositionInScript(tapLeaf.script, tss)).sort((t1, t2)=>t2.positionInScript - t1.positionInScript).map((t)=>t.signature);
}
/**
 * Adds the position of a public key in a script to a TapScriptSig object.
 * @param script The script in which to find the position of the public key.
 * @param tss The TapScriptSig object to add the position to.
 * @returns A TapScriptSigWitPosition object with the added position.
 */ function addPubkeyPositionInScript(script, tss) {
    return Object.assign({
        positionInScript: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$psbt$2f$psbtutils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["pubkeyPositionInScript"])(tss.pubkey, script)
    }, tss);
}
/**
 * Find tapleaf by hash, or get the signed tapleaf with the shortest path.
 */ function findTapLeafToFinalize(input, inputIndex, leafHashToFinalize) {
    if (!input.tapScriptSig || !input.tapScriptSig.length) throw new Error(`Can not finalize taproot input #${inputIndex}. No tapleaf script signature provided.`);
    const tapLeaf = (input.tapLeafScript || []).sort((a, b)=>a.controlBlock.length - b.controlBlock.length).find((leaf)=>canFinalizeLeaf(leaf, input.tapScriptSig, leafHashToFinalize));
    if (!tapLeaf) throw new Error(`Can not finalize taproot input #${inputIndex}. Signature for tapleaf script not found.`);
    return tapLeaf;
}
/**
 * Determines whether a TapLeafScript can be finalized.
 *
 * @param leaf - The TapLeafScript to check.
 * @param tapScriptSig - The array of TapScriptSig objects.
 * @param hash - The optional hash to compare with the leaf hash.
 * @returns A boolean indicating whether the TapLeafScript can be finalized.
 */ function canFinalizeLeaf(leaf, tapScriptSig, hash) {
    const leafHash = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$bip341$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["tapleafHash"])({
        output: leaf.script,
        version: leaf.leafVersion
    });
    const whiteListedHash = !hash || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.compare(leafHash, hash) === 0;
    return whiteListedHash && tapScriptSig.find((tss)=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.compare(tss.leafHash, leafHash) === 0) !== undefined;
}
/**
 * Checks if the given PsbtInput or PsbtOutput has non-taproot fields.
 * Non-taproot fields include redeemScript, witnessScript, and bip32Derivation.
 * @param io The PsbtInput or PsbtOutput to check.
 * @returns A boolean indicating whether the given input or output has non-taproot fields.
 */ function hasNonTaprootFields(io) {
    return io && !!(io.redeemScript || io.witnessScript || io.bip32Derivation && io.bip32Derivation.length);
}
}}),
"[project]/node_modules/bitcoinjs-lib/src/esm/psbt.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "Psbt": (()=>Psbt)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$psbt$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_import__("[project]/node_modules/bip174/src/esm/lib/psbt.js [app-ssr] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$varuint$2d$bitcoin$2f$src$2f$esm$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/varuint-bitcoin/src/esm/index.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$address$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/address.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$bufferutils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/bufferutils.js [app-ssr] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$networks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/networks.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/payments/index.js [app-ssr] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$bip341$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/payments/bip341.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$script$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/script.js [app-ssr] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$transaction$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/transaction.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$psbt$2f$bip371$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/psbt/bip371.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$psbt$2f$psbtutils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/psbt/psbtutils.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/uint8array-tools/src/mjs/index.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$psbt$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/node_modules/bip174/src/esm/lib/psbt.js [app-ssr] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$bufferutils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/bufferutils.js [app-ssr] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bip174/src/esm/lib/utils.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/payments/index.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$script$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/script.js [app-ssr] (ecmascript)");
;
;
;
;
;
;
;
;
;
;
;
;
;
/**
 * These are the default arguments for a Psbt instance.
 */ const DEFAULT_OPTS = {
    /**
   * A bitcoinjs Network object. This is only used if you pass an `address`
   * parameter to addOutput. Otherwise it is not needed and can be left default.
   */ network: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$networks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["bitcoin"],
    /**
   * When extractTransaction is called, the fee rate is checked.
   * THIS IS NOT TO BE RELIED ON.
   * It is only here as a last ditch effort to prevent sending a 500 BTC fee etc.
   */ maximumFeeRate: 5000
};
class Psbt {
    data;
    static fromBase64(data, opts = {}) {
        const buffer = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.fromBase64(data);
        return this.fromBuffer(buffer, opts);
    }
    static fromHex(data, opts = {}) {
        const buffer = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.fromHex(data);
        return this.fromBuffer(buffer, opts);
    }
    static fromBuffer(buffer, opts = {}) {
        const psbtBase = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$psbt$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["Psbt"].fromBuffer(buffer, transactionFromBuffer);
        const psbt = new Psbt(opts, psbtBase);
        checkTxForDupeIns(psbt.__CACHE.__TX, psbt.__CACHE);
        return psbt;
    }
    __CACHE;
    opts;
    constructor(opts = {}, data = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$psbt$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["Psbt"](new PsbtTransaction())){
        this.data = data;
        // set defaults
        this.opts = Object.assign({}, DEFAULT_OPTS, opts);
        this.__CACHE = {
            __NON_WITNESS_UTXO_TX_CACHE: [],
            __NON_WITNESS_UTXO_BUF_CACHE: [],
            __TX_IN_CACHE: {},
            __TX: this.data.globalMap.unsignedTx.tx,
            // Psbt's predecessor (TransactionBuilder - now removed) behavior
            // was to not confirm input values  before signing.
            // Even though we highly encourage people to get
            // the full parent transaction to verify values, the ability to
            // sign non-segwit inputs without the full transaction was often
            // requested. So the only way to activate is to use @ts-ignore.
            // We will disable exporting the Psbt when unsafe sign is active.
            // because it is not BIP174 compliant.
            __UNSAFE_SIGN_NONSEGWIT: false
        };
        if (this.data.inputs.length === 0) this.setVersion(2);
        // Make data hidden when enumerating
        const dpew = (obj, attr, enumerable, writable)=>Object.defineProperty(obj, attr, {
                enumerable,
                writable
            });
        dpew(this, '__CACHE', false, true);
        dpew(this, 'opts', false, true);
    }
    get inputCount() {
        return this.data.inputs.length;
    }
    get version() {
        return this.__CACHE.__TX.version;
    }
    set version(version) {
        this.setVersion(version);
    }
    get locktime() {
        return this.__CACHE.__TX.locktime;
    }
    set locktime(locktime) {
        this.setLocktime(locktime);
    }
    get txInputs() {
        return this.__CACHE.__TX.ins.map((input)=>({
                hash: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$bufferutils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["cloneBuffer"])(input.hash),
                index: input.index,
                sequence: input.sequence
            }));
    }
    get txOutputs() {
        return this.__CACHE.__TX.outs.map((output)=>{
            let address;
            try {
                address = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$address$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["fromOutputScript"])(output.script, this.opts.network);
            } catch (_) {}
            return {
                script: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$bufferutils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["cloneBuffer"])(output.script),
                value: output.value,
                address
            };
        });
    }
    combine(...those) {
        this.data.combine(...those.map((o)=>o.data));
        return this;
    }
    clone() {
        // TODO: more efficient cloning
        const res = Psbt.fromBuffer(this.data.toBuffer());
        res.opts = JSON.parse(JSON.stringify(this.opts));
        return res;
    }
    setMaximumFeeRate(satoshiPerByte) {
        check32Bit(satoshiPerByte); // 42.9 BTC per byte IS excessive... so throw
        this.opts.maximumFeeRate = satoshiPerByte;
    }
    setVersion(version) {
        check32Bit(version);
        checkInputsForPartialSig(this.data.inputs, 'setVersion');
        const c = this.__CACHE;
        c.__TX.version = version;
        c.__EXTRACTED_TX = undefined;
        return this;
    }
    setLocktime(locktime) {
        check32Bit(locktime);
        checkInputsForPartialSig(this.data.inputs, 'setLocktime');
        const c = this.__CACHE;
        c.__TX.locktime = locktime;
        c.__EXTRACTED_TX = undefined;
        return this;
    }
    setInputSequence(inputIndex, sequence) {
        check32Bit(sequence);
        checkInputsForPartialSig(this.data.inputs, 'setInputSequence');
        const c = this.__CACHE;
        if (c.__TX.ins.length <= inputIndex) {
            throw new Error('Input index too high');
        }
        c.__TX.ins[inputIndex].sequence = sequence;
        c.__EXTRACTED_TX = undefined;
        return this;
    }
    addInputs(inputDatas) {
        inputDatas.forEach((inputData)=>this.addInput(inputData));
        return this;
    }
    addInput(inputData) {
        if (arguments.length > 1 || !inputData || inputData.hash === undefined || inputData.index === undefined) {
            throw new Error(`Invalid arguments for Psbt.addInput. ` + `Requires single object with at least [hash] and [index]`);
        }
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$psbt$2f$bip371$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["checkTaprootInputFields"])(inputData, inputData, 'addInput');
        checkInputsForPartialSig(this.data.inputs, 'addInput');
        if (inputData.witnessScript) checkInvalidP2WSH(inputData.witnessScript);
        const c = this.__CACHE;
        this.data.addInput(inputData);
        const txIn = c.__TX.ins[c.__TX.ins.length - 1];
        checkTxInputCache(c, txIn);
        const inputIndex = this.data.inputs.length - 1;
        const input = this.data.inputs[inputIndex];
        if (input.nonWitnessUtxo) {
            addNonWitnessTxCache(this.__CACHE, input, inputIndex);
        }
        c.__FEE = undefined;
        c.__FEE_RATE = undefined;
        c.__EXTRACTED_TX = undefined;
        return this;
    }
    addOutputs(outputDatas) {
        outputDatas.forEach((outputData)=>this.addOutput(outputData));
        return this;
    }
    addOutput(outputData) {
        if (arguments.length > 1 || !outputData || outputData.value === undefined || outputData.address === undefined && outputData.script === undefined) {
            throw new Error(`Invalid arguments for Psbt.addOutput. ` + `Requires single object with at least [script or address] and [value]`);
        }
        checkInputsForPartialSig(this.data.inputs, 'addOutput');
        const { address } = outputData;
        if (typeof address === 'string') {
            const { network } = this.opts;
            const script = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$address$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["toOutputScript"])(address, network);
            outputData = Object.assign({}, outputData, {
                script
            });
        }
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$psbt$2f$bip371$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["checkTaprootOutputFields"])(outputData, outputData, 'addOutput');
        const c = this.__CACHE;
        this.data.addOutput(outputData);
        c.__FEE = undefined;
        c.__FEE_RATE = undefined;
        c.__EXTRACTED_TX = undefined;
        return this;
    }
    extractTransaction(disableFeeCheck) {
        if (!this.data.inputs.every(isFinalized)) throw new Error('Not finalized');
        const c = this.__CACHE;
        if (!disableFeeCheck) {
            checkFees(this, c, this.opts);
        }
        if (c.__EXTRACTED_TX) return c.__EXTRACTED_TX;
        const tx = c.__TX.clone();
        inputFinalizeGetAmts(this.data.inputs, tx, c, true);
        return tx;
    }
    getFeeRate() {
        return getTxCacheValue('__FEE_RATE', 'fee rate', this.data.inputs, this.__CACHE);
    }
    getFee() {
        return getTxCacheValue('__FEE', 'fee', this.data.inputs, this.__CACHE);
    }
    finalizeAllInputs() {
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["checkForInput"])(this.data.inputs, 0); // making sure we have at least one
        range(this.data.inputs.length).forEach((idx)=>this.finalizeInput(idx));
        return this;
    }
    finalizeInput(inputIndex, finalScriptsFunc) {
        const input = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["checkForInput"])(this.data.inputs, inputIndex);
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$psbt$2f$bip371$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isTaprootInput"])(input)) return this._finalizeTaprootInput(inputIndex, input, undefined, finalScriptsFunc);
        return this._finalizeInput(inputIndex, input, finalScriptsFunc);
    }
    finalizeTaprootInput(inputIndex, tapLeafHashToFinalize, finalScriptsFunc = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$psbt$2f$bip371$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["tapScriptFinalizer"]) {
        const input = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["checkForInput"])(this.data.inputs, inputIndex);
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$psbt$2f$bip371$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isTaprootInput"])(input)) return this._finalizeTaprootInput(inputIndex, input, tapLeafHashToFinalize, finalScriptsFunc);
        throw new Error(`Cannot finalize input #${inputIndex}. Not Taproot.`);
    }
    _finalizeInput(inputIndex, input, finalScriptsFunc = getFinalScripts) {
        const { script, isP2SH, isP2WSH, isSegwit } = getScriptFromInput(inputIndex, input, this.__CACHE);
        if (!script) throw new Error(`No script found for input #${inputIndex}`);
        checkPartialSigSighashes(input);
        const { finalScriptSig, finalScriptWitness } = finalScriptsFunc(inputIndex, input, script, isSegwit, isP2SH, isP2WSH);
        if (finalScriptSig) this.data.updateInput(inputIndex, {
            finalScriptSig
        });
        if (finalScriptWitness) this.data.updateInput(inputIndex, {
            finalScriptWitness
        });
        if (!finalScriptSig && !finalScriptWitness) throw new Error(`Unknown error finalizing input #${inputIndex}`);
        this.data.clearFinalizedInput(inputIndex);
        return this;
    }
    _finalizeTaprootInput(inputIndex, input, tapLeafHashToFinalize, finalScriptsFunc = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$psbt$2f$bip371$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["tapScriptFinalizer"]) {
        if (!input.witnessUtxo) throw new Error(`Cannot finalize input #${inputIndex}. Missing withness utxo.`);
        // Check key spend first. Increased privacy and reduced block space.
        if (input.tapKeySig) {
            const payment = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.p2tr({
                output: input.witnessUtxo.script,
                signature: input.tapKeySig
            });
            const finalScriptWitness = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$psbt$2f$psbtutils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["witnessStackToScriptWitness"])(payment.witness);
            this.data.updateInput(inputIndex, {
                finalScriptWitness
            });
        } else {
            const { finalScriptWitness } = finalScriptsFunc(inputIndex, input, tapLeafHashToFinalize);
            this.data.updateInput(inputIndex, {
                finalScriptWitness
            });
        }
        this.data.clearFinalizedInput(inputIndex);
        return this;
    }
    getInputType(inputIndex) {
        const input = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["checkForInput"])(this.data.inputs, inputIndex);
        const script = getScriptFromUtxo(inputIndex, input, this.__CACHE);
        const result = getMeaningfulScript(script, inputIndex, 'input', input.redeemScript || redeemFromFinalScriptSig(input.finalScriptSig), input.witnessScript || redeemFromFinalWitnessScript(input.finalScriptWitness));
        const type = result.type === 'raw' ? '' : result.type + '-';
        const mainType = classifyScript(result.meaningfulScript);
        return type + mainType;
    }
    inputHasPubkey(inputIndex, pubkey) {
        const input = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["checkForInput"])(this.data.inputs, inputIndex);
        return pubkeyInInput(pubkey, input, inputIndex, this.__CACHE);
    }
    inputHasHDKey(inputIndex, root) {
        const input = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["checkForInput"])(this.data.inputs, inputIndex);
        const derivationIsMine = bip32DerivationIsMine(root);
        return !!input.bip32Derivation && input.bip32Derivation.some(derivationIsMine);
    }
    outputHasPubkey(outputIndex, pubkey) {
        const output = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["checkForOutput"])(this.data.outputs, outputIndex);
        return pubkeyInOutput(pubkey, output, outputIndex, this.__CACHE);
    }
    outputHasHDKey(outputIndex, root) {
        const output = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["checkForOutput"])(this.data.outputs, outputIndex);
        const derivationIsMine = bip32DerivationIsMine(root);
        return !!output.bip32Derivation && output.bip32Derivation.some(derivationIsMine);
    }
    validateSignaturesOfAllInputs(validator) {
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["checkForInput"])(this.data.inputs, 0); // making sure we have at least one
        const results = range(this.data.inputs.length).map((idx)=>this.validateSignaturesOfInput(idx, validator));
        return results.reduce((final, res)=>res === true && final, true);
    }
    validateSignaturesOfInput(inputIndex, validator, pubkey) {
        const input = this.data.inputs[inputIndex];
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$psbt$2f$bip371$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isTaprootInput"])(input)) return this.validateSignaturesOfTaprootInput(inputIndex, validator, pubkey);
        return this._validateSignaturesOfInput(inputIndex, validator, pubkey);
    }
    _validateSignaturesOfInput(inputIndex, validator, pubkey) {
        const input = this.data.inputs[inputIndex];
        const partialSig = (input || {}).partialSig;
        if (!input || !partialSig || partialSig.length < 1) throw new Error('No signatures to validate');
        if (typeof validator !== 'function') throw new Error('Need validator function to validate signatures');
        const mySigs = pubkey ? partialSig.filter((sig)=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.compare(sig.pubkey, pubkey) === 0) : partialSig;
        if (mySigs.length < 1) throw new Error('No signatures for this pubkey');
        const results = [];
        let hashCache;
        let scriptCache;
        let sighashCache;
        for (const pSig of mySigs){
            const sig = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$script$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.signature.decode(pSig.signature);
            const { hash, script } = sighashCache !== sig.hashType ? getHashForSig(inputIndex, Object.assign({}, input, {
                sighashType: sig.hashType
            }), this.__CACHE, true) : {
                hash: hashCache,
                script: scriptCache
            };
            sighashCache = sig.hashType;
            hashCache = hash;
            scriptCache = script;
            checkScriptForPubkey(pSig.pubkey, script, 'verify');
            results.push(validator(pSig.pubkey, hash, sig.signature));
        }
        return results.every((res)=>res === true);
    }
    validateSignaturesOfTaprootInput(inputIndex, validator, pubkey) {
        const input = this.data.inputs[inputIndex];
        const tapKeySig = (input || {}).tapKeySig;
        const tapScriptSig = (input || {}).tapScriptSig;
        if (!input && !tapKeySig && !(tapScriptSig && !tapScriptSig.length)) throw new Error('No signatures to validate');
        if (typeof validator !== 'function') throw new Error('Need validator function to validate signatures');
        pubkey = pubkey && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$psbt$2f$bip371$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["toXOnly"])(pubkey);
        const allHashses = pubkey ? getTaprootHashesForSig(inputIndex, input, this.data.inputs, pubkey, this.__CACHE) : getAllTaprootHashesForSig(inputIndex, input, this.data.inputs, this.__CACHE);
        if (!allHashses.length) throw new Error('No signatures for this pubkey');
        const tapKeyHash = allHashses.find((h)=>!h.leafHash);
        let validationResultCount = 0;
        if (tapKeySig && tapKeyHash) {
            const isValidTapkeySig = validator(tapKeyHash.pubkey, tapKeyHash.hash, trimTaprootSig(tapKeySig));
            if (!isValidTapkeySig) return false;
            validationResultCount++;
        }
        if (tapScriptSig) {
            for (const tapSig of tapScriptSig){
                const tapSigHash = allHashses.find((h)=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.compare(h.pubkey, tapSig.pubkey) === 0);
                if (tapSigHash) {
                    const isValidTapScriptSig = validator(tapSig.pubkey, tapSigHash.hash, trimTaprootSig(tapSig.signature));
                    if (!isValidTapScriptSig) return false;
                    validationResultCount++;
                }
            }
        }
        return validationResultCount > 0;
    }
    signAllInputsHD(hdKeyPair, sighashTypes = [
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$transaction$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transaction"].SIGHASH_ALL
    ]) {
        if (!hdKeyPair || !hdKeyPair.publicKey || !hdKeyPair.fingerprint) {
            throw new Error('Need HDSigner to sign input');
        }
        const results = [];
        for (const i of range(this.data.inputs.length)){
            try {
                this.signInputHD(i, hdKeyPair, sighashTypes);
                results.push(true);
            } catch (err) {
                results.push(false);
            }
        }
        if (results.every((v)=>v === false)) {
            throw new Error('No inputs were signed');
        }
        return this;
    }
    signAllInputsHDAsync(hdKeyPair, sighashTypes = [
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$transaction$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transaction"].SIGHASH_ALL
    ]) {
        return new Promise((resolve, reject)=>{
            if (!hdKeyPair || !hdKeyPair.publicKey || !hdKeyPair.fingerprint) {
                return reject(new Error('Need HDSigner to sign input'));
            }
            const results = [];
            const promises = [];
            for (const i of range(this.data.inputs.length)){
                promises.push(this.signInputHDAsync(i, hdKeyPair, sighashTypes).then(()=>{
                    results.push(true);
                }, ()=>{
                    results.push(false);
                }));
            }
            return Promise.all(promises).then(()=>{
                if (results.every((v)=>v === false)) {
                    return reject(new Error('No inputs were signed'));
                }
                resolve();
            });
        });
    }
    signInputHD(inputIndex, hdKeyPair, sighashTypes = [
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$transaction$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transaction"].SIGHASH_ALL
    ]) {
        if (!hdKeyPair || !hdKeyPair.publicKey || !hdKeyPair.fingerprint) {
            throw new Error('Need HDSigner to sign input');
        }
        const signers = getSignersFromHD(inputIndex, this.data.inputs, hdKeyPair);
        signers.forEach((signer)=>this.signInput(inputIndex, signer, sighashTypes));
        return this;
    }
    signInputHDAsync(inputIndex, hdKeyPair, sighashTypes = [
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$transaction$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transaction"].SIGHASH_ALL
    ]) {
        return new Promise((resolve, reject)=>{
            if (!hdKeyPair || !hdKeyPair.publicKey || !hdKeyPair.fingerprint) {
                return reject(new Error('Need HDSigner to sign input'));
            }
            const signers = getSignersFromHD(inputIndex, this.data.inputs, hdKeyPair);
            const promises = signers.map((signer)=>this.signInputAsync(inputIndex, signer, sighashTypes));
            return Promise.all(promises).then(()=>{
                resolve();
            }).catch(reject);
        });
    }
    signAllInputs(keyPair, sighashTypes) {
        if (!keyPair || !keyPair.publicKey) throw new Error('Need Signer to sign input');
        // TODO: Add a pubkey/pubkeyhash cache to each input
        // as input information is added, then eventually
        // optimize this method.
        const results = [];
        for (const i of range(this.data.inputs.length)){
            try {
                this.signInput(i, keyPair, sighashTypes);
                results.push(true);
            } catch (err) {
                results.push(false);
            }
        }
        if (results.every((v)=>v === false)) {
            throw new Error('No inputs were signed');
        }
        return this;
    }
    signAllInputsAsync(keyPair, sighashTypes) {
        return new Promise((resolve, reject)=>{
            if (!keyPair || !keyPair.publicKey) return reject(new Error('Need Signer to sign input'));
            // TODO: Add a pubkey/pubkeyhash cache to each input
            // as input information is added, then eventually
            // optimize this method.
            const results = [];
            const promises = [];
            for (const [i] of this.data.inputs.entries()){
                promises.push(this.signInputAsync(i, keyPair, sighashTypes).then(()=>{
                    results.push(true);
                }, ()=>{
                    results.push(false);
                }));
            }
            return Promise.all(promises).then(()=>{
                if (results.every((v)=>v === false)) {
                    return reject(new Error('No inputs were signed'));
                }
                resolve();
            });
        });
    }
    signInput(inputIndex, keyPair, sighashTypes) {
        if (!keyPair || !keyPair.publicKey) throw new Error('Need Signer to sign input');
        const input = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["checkForInput"])(this.data.inputs, inputIndex);
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$psbt$2f$bip371$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isTaprootInput"])(input)) {
            return this._signTaprootInput(inputIndex, input, keyPair, undefined, sighashTypes);
        }
        return this._signInput(inputIndex, keyPair, sighashTypes);
    }
    signTaprootInput(inputIndex, keyPair, tapLeafHashToSign, sighashTypes) {
        if (!keyPair || !keyPair.publicKey) throw new Error('Need Signer to sign input');
        const input = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["checkForInput"])(this.data.inputs, inputIndex);
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$psbt$2f$bip371$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isTaprootInput"])(input)) return this._signTaprootInput(inputIndex, input, keyPair, tapLeafHashToSign, sighashTypes);
        throw new Error(`Input #${inputIndex} is not of type Taproot.`);
    }
    _signInput(inputIndex, keyPair, sighashTypes = [
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$transaction$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transaction"].SIGHASH_ALL
    ]) {
        const { hash, sighashType } = getHashAndSighashType(this.data.inputs, inputIndex, keyPair.publicKey, this.__CACHE, sighashTypes);
        const partialSig = [
            {
                pubkey: keyPair.publicKey,
                signature: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$script$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.signature.encode(keyPair.sign(hash), sighashType)
            }
        ];
        this.data.updateInput(inputIndex, {
            partialSig
        });
        return this;
    }
    _signTaprootInput(inputIndex, input, keyPair, tapLeafHashToSign, allowedSighashTypes = [
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$transaction$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transaction"].SIGHASH_DEFAULT
    ]) {
        const hashesForSig = this.checkTaprootHashesForSig(inputIndex, input, keyPair, tapLeafHashToSign, allowedSighashTypes);
        const tapKeySig = hashesForSig.filter((h)=>!h.leafHash).map((h)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$psbt$2f$bip371$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["serializeTaprootSignature"])(keyPair.signSchnorr(h.hash), input.sighashType))[0];
        const tapScriptSig = hashesForSig.filter((h)=>!!h.leafHash).map((h)=>({
                pubkey: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$psbt$2f$bip371$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["toXOnly"])(keyPair.publicKey),
                signature: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$psbt$2f$bip371$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["serializeTaprootSignature"])(keyPair.signSchnorr(h.hash), input.sighashType),
                leafHash: h.leafHash
            }));
        if (tapKeySig) {
            this.data.updateInput(inputIndex, {
                tapKeySig
            });
        }
        if (tapScriptSig.length) {
            this.data.updateInput(inputIndex, {
                tapScriptSig
            });
        }
        return this;
    }
    signInputAsync(inputIndex, keyPair, sighashTypes) {
        return Promise.resolve().then(()=>{
            if (!keyPair || !keyPair.publicKey) throw new Error('Need Signer to sign input');
            const input = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["checkForInput"])(this.data.inputs, inputIndex);
            if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$psbt$2f$bip371$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isTaprootInput"])(input)) return this._signTaprootInputAsync(inputIndex, input, keyPair, undefined, sighashTypes);
            return this._signInputAsync(inputIndex, keyPair, sighashTypes);
        });
    }
    signTaprootInputAsync(inputIndex, keyPair, tapLeafHash, sighashTypes) {
        return Promise.resolve().then(()=>{
            if (!keyPair || !keyPair.publicKey) throw new Error('Need Signer to sign input');
            const input = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["checkForInput"])(this.data.inputs, inputIndex);
            if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$psbt$2f$bip371$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isTaprootInput"])(input)) return this._signTaprootInputAsync(inputIndex, input, keyPair, tapLeafHash, sighashTypes);
            throw new Error(`Input #${inputIndex} is not of type Taproot.`);
        });
    }
    _signInputAsync(inputIndex, keyPair, sighashTypes = [
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$transaction$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transaction"].SIGHASH_ALL
    ]) {
        const { hash, sighashType } = getHashAndSighashType(this.data.inputs, inputIndex, keyPair.publicKey, this.__CACHE, sighashTypes);
        return Promise.resolve(keyPair.sign(hash)).then((signature)=>{
            const partialSig = [
                {
                    pubkey: keyPair.publicKey,
                    signature: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$script$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.signature.encode(signature, sighashType)
                }
            ];
            this.data.updateInput(inputIndex, {
                partialSig
            });
        });
    }
    async _signTaprootInputAsync(inputIndex, input, keyPair, tapLeafHash, sighashTypes = [
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$transaction$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transaction"].SIGHASH_DEFAULT
    ]) {
        const hashesForSig = this.checkTaprootHashesForSig(inputIndex, input, keyPair, tapLeafHash, sighashTypes);
        const signaturePromises = [];
        const tapKeyHash = hashesForSig.filter((h)=>!h.leafHash)[0];
        if (tapKeyHash) {
            const tapKeySigPromise = Promise.resolve(keyPair.signSchnorr(tapKeyHash.hash)).then((sig)=>{
                return {
                    tapKeySig: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$psbt$2f$bip371$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["serializeTaprootSignature"])(sig, input.sighashType)
                };
            });
            signaturePromises.push(tapKeySigPromise);
        }
        const tapScriptHashes = hashesForSig.filter((h)=>!!h.leafHash);
        if (tapScriptHashes.length) {
            const tapScriptSigPromises = tapScriptHashes.map((tsh)=>{
                return Promise.resolve(keyPair.signSchnorr(tsh.hash)).then((signature)=>{
                    const tapScriptSig = [
                        {
                            pubkey: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$psbt$2f$bip371$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["toXOnly"])(keyPair.publicKey),
                            signature: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$psbt$2f$bip371$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["serializeTaprootSignature"])(signature, input.sighashType),
                            leafHash: tsh.leafHash
                        }
                    ];
                    return {
                        tapScriptSig
                    };
                });
            });
            signaturePromises.push(...tapScriptSigPromises);
        }
        return Promise.all(signaturePromises).then((results)=>{
            results.forEach((v)=>this.data.updateInput(inputIndex, v));
        });
    }
    checkTaprootHashesForSig(inputIndex, input, keyPair, tapLeafHashToSign, allowedSighashTypes) {
        if (typeof keyPair.signSchnorr !== 'function') throw new Error(`Need Schnorr Signer to sign taproot input #${inputIndex}.`);
        const hashesForSig = getTaprootHashesForSig(inputIndex, input, this.data.inputs, keyPair.publicKey, this.__CACHE, tapLeafHashToSign, allowedSighashTypes);
        if (!hashesForSig || !hashesForSig.length) throw new Error(`Can not sign for input #${inputIndex} with the key ${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.toHex(keyPair.publicKey)}`);
        return hashesForSig;
    }
    toBuffer() {
        checkCache(this.__CACHE);
        return this.data.toBuffer();
    }
    toHex() {
        checkCache(this.__CACHE);
        return this.data.toHex();
    }
    toBase64() {
        checkCache(this.__CACHE);
        return this.data.toBase64();
    }
    updateGlobal(updateData) {
        this.data.updateGlobal(updateData);
        return this;
    }
    updateInput(inputIndex, updateData) {
        if (updateData.witnessScript) checkInvalidP2WSH(updateData.witnessScript);
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$psbt$2f$bip371$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["checkTaprootInputFields"])(this.data.inputs[inputIndex], updateData, 'updateInput');
        this.data.updateInput(inputIndex, updateData);
        if (updateData.nonWitnessUtxo) {
            addNonWitnessTxCache(this.__CACHE, this.data.inputs[inputIndex], inputIndex);
        }
        return this;
    }
    updateOutput(outputIndex, updateData) {
        const outputData = this.data.outputs[outputIndex];
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$psbt$2f$bip371$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["checkTaprootOutputFields"])(outputData, updateData, 'updateOutput');
        this.data.updateOutput(outputIndex, updateData);
        return this;
    }
    addUnknownKeyValToGlobal(keyVal) {
        this.data.addUnknownKeyValToGlobal(keyVal);
        return this;
    }
    addUnknownKeyValToInput(inputIndex, keyVal) {
        this.data.addUnknownKeyValToInput(inputIndex, keyVal);
        return this;
    }
    addUnknownKeyValToOutput(outputIndex, keyVal) {
        this.data.addUnknownKeyValToOutput(outputIndex, keyVal);
        return this;
    }
    clearFinalizedInput(inputIndex) {
        this.data.clearFinalizedInput(inputIndex);
        return this;
    }
}
/**
 * This function is needed to pass to the bip174 base class's fromBuffer.
 * It takes the "transaction buffer" portion of the psbt buffer and returns a
 * Transaction (From the bip174 library) interface.
 */ const transactionFromBuffer = (buffer)=>new PsbtTransaction(buffer);
/**
 * This class implements the Transaction interface from bip174 library.
 * It contains a bitcoinjs-lib Transaction object.
 */ class PsbtTransaction {
    tx;
    constructor(buffer = Uint8Array.from([
        2,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
    ])){
        this.tx = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$transaction$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transaction"].fromBuffer(buffer);
        checkTxEmpty(this.tx);
        Object.defineProperty(this, 'tx', {
            enumerable: false,
            writable: true
        });
    }
    getInputOutputCounts() {
        return {
            inputCount: this.tx.ins.length,
            outputCount: this.tx.outs.length
        };
    }
    addInput(input) {
        if (input.hash === undefined || input.index === undefined || !(input.hash instanceof Uint8Array) && typeof input.hash !== 'string' || typeof input.index !== 'number') {
            throw new Error('Error adding input.');
        }
        const hash = typeof input.hash === 'string' ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$bufferutils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["reverseBuffer"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.fromHex(input.hash)) : input.hash;
        this.tx.addInput(hash, input.index, input.sequence);
    }
    addOutput(output) {
        if (output.script === undefined || output.value === undefined || !(output.script instanceof Uint8Array) || typeof output.value !== 'bigint') {
            throw new Error('Error adding output.');
        }
        this.tx.addOutput(output.script, output.value);
    }
    toBuffer() {
        return this.tx.toBuffer();
    }
}
function canFinalize(input, script, scriptType) {
    switch(scriptType){
        case 'pubkey':
        case 'pubkeyhash':
        case 'witnesspubkeyhash':
            return hasSigs(1, input.partialSig);
        case 'multisig':
            const p2ms = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.p2ms({
                output: script
            });
            return hasSigs(p2ms.m, input.partialSig, p2ms.pubkeys);
        default:
            return false;
    }
}
function checkCache(cache) {
    if (cache.__UNSAFE_SIGN_NONSEGWIT !== false) {
        throw new Error('Not BIP174 compliant, can not export');
    }
}
function hasSigs(neededSigs, partialSig, pubkeys) {
    if (!partialSig) return false;
    let sigs;
    if (pubkeys) {
        sigs = pubkeys.map((pkey)=>{
            const pubkey = compressPubkey(pkey);
            return partialSig.find((pSig)=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.compare(pSig.pubkey, pubkey) === 0);
        }).filter((v)=>!!v);
    } else {
        sigs = partialSig;
    }
    if (sigs.length > neededSigs) throw new Error('Too many signatures');
    return sigs.length === neededSigs;
}
function isFinalized(input) {
    return !!input.finalScriptSig || !!input.finalScriptWitness;
}
function bip32DerivationIsMine(root) {
    return (d)=>{
        if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.compare(root.fingerprint, d.masterFingerprint)) return false;
        if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.compare(root.derivePath(d.path).publicKey, d.pubkey)) return false;
        return true;
    };
}
function check32Bit(num) {
    if (typeof num !== 'number' || num !== Math.floor(num) || num > 0xffffffff || num < 0) {
        throw new Error('Invalid 32 bit integer');
    }
}
function checkFees(psbt, cache, opts) {
    const feeRate = cache.__FEE_RATE || psbt.getFeeRate();
    const vsize = cache.__EXTRACTED_TX.virtualSize();
    const satoshis = feeRate * vsize;
    if (feeRate >= opts.maximumFeeRate) {
        throw new Error(`Warning: You are paying around ${(satoshis / 1e8).toFixed(8)} in ` + `fees, which is ${feeRate} satoshi per byte for a transaction ` + `with a VSize of ${vsize} bytes (segwit counted as 0.25 byte per ` + `byte). Use setMaximumFeeRate method to raise your threshold, or ` + `pass true to the first arg of extractTransaction.`);
    }
}
function checkInputsForPartialSig(inputs, action) {
    inputs.forEach((input)=>{
        const throws = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$psbt$2f$bip371$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isTaprootInput"])(input) ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$psbt$2f$bip371$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["checkTaprootInputForSigs"])(input, action) : (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$psbt$2f$psbtutils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["checkInputForSig"])(input, action);
        if (throws) throw new Error('Can not modify transaction, signatures exist.');
    });
}
function checkPartialSigSighashes(input) {
    if (!input.sighashType || !input.partialSig) return;
    const { partialSig, sighashType } = input;
    partialSig.forEach((pSig)=>{
        const { hashType } = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$script$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.signature.decode(pSig.signature);
        if (sighashType !== hashType) {
            throw new Error('Signature sighash does not match input sighash type');
        }
    });
}
function checkScriptForPubkey(pubkey, script, action) {
    if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$psbt$2f$psbtutils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["pubkeyInScript"])(pubkey, script)) {
        throw new Error(`Can not ${action} for this input with the key ${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.toHex(pubkey)}`);
    }
}
function checkTxEmpty(tx) {
    const isEmpty = tx.ins.every((input)=>input.script && input.script.length === 0 && input.witness && input.witness.length === 0);
    if (!isEmpty) {
        throw new Error('Format Error: Transaction ScriptSigs are not empty');
    }
}
function checkTxForDupeIns(tx, cache) {
    tx.ins.forEach((input)=>{
        checkTxInputCache(cache, input);
    });
}
function checkTxInputCache(cache, input) {
    const key = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.toHex((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$bufferutils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["reverseBuffer"])(Uint8Array.from(input.hash))) + ':' + input.index;
    if (cache.__TX_IN_CACHE[key]) throw new Error('Duplicate input detected.');
    cache.__TX_IN_CACHE[key] = 1;
}
function scriptCheckerFactory(payment, paymentScriptName) {
    return (inputIndex, scriptPubKey, redeemScript, ioType)=>{
        const redeemScriptOutput = payment({
            redeem: {
                output: redeemScript
            }
        }).output;
        if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.compare(scriptPubKey, redeemScriptOutput)) {
            throw new Error(`${paymentScriptName} for ${ioType} #${inputIndex} doesn't match the scriptPubKey in the prevout`);
        }
    };
}
const checkRedeemScript = scriptCheckerFactory(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.p2sh, 'Redeem script');
const checkWitnessScript = scriptCheckerFactory(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.p2wsh, 'Witness script');
function getTxCacheValue(key, name, inputs, c) {
    if (!inputs.every(isFinalized)) throw new Error(`PSBT must be finalized to calculate ${name}`);
    if (key === '__FEE_RATE' && c.__FEE_RATE) return c.__FEE_RATE;
    if (key === '__FEE' && c.__FEE) return c.__FEE;
    let tx;
    let mustFinalize = true;
    if (c.__EXTRACTED_TX) {
        tx = c.__EXTRACTED_TX;
        mustFinalize = false;
    } else {
        tx = c.__TX.clone();
    }
    inputFinalizeGetAmts(inputs, tx, c, mustFinalize);
    if (key === '__FEE_RATE') return c.__FEE_RATE;
    else if (key === '__FEE') return c.__FEE;
}
function getFinalScripts(inputIndex, input, script, isSegwit, isP2SH, isP2WSH) {
    const scriptType = classifyScript(script);
    if (!canFinalize(input, script, scriptType)) throw new Error(`Can not finalize input #${inputIndex}`);
    return prepareFinalScripts(script, scriptType, input.partialSig, isSegwit, isP2SH, isP2WSH);
}
function prepareFinalScripts(script, scriptType, partialSig, isSegwit, isP2SH, isP2WSH) {
    let finalScriptSig;
    let finalScriptWitness;
    // Wow, the payments API is very handy
    const payment = getPayment(script, scriptType, partialSig);
    const p2wsh = !isP2WSH ? null : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.p2wsh({
        redeem: payment
    });
    const p2sh = !isP2SH ? null : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.p2sh({
        redeem: p2wsh || payment
    });
    if (isSegwit) {
        if (p2wsh) {
            finalScriptWitness = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$psbt$2f$psbtutils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["witnessStackToScriptWitness"])(p2wsh.witness);
        } else {
            finalScriptWitness = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$psbt$2f$psbtutils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["witnessStackToScriptWitness"])(payment.witness);
        }
        if (p2sh) {
            finalScriptSig = p2sh.input;
        }
    } else {
        if (p2sh) {
            finalScriptSig = p2sh.input;
        } else {
            finalScriptSig = payment.input;
        }
    }
    return {
        finalScriptSig,
        finalScriptWitness
    };
}
function getHashAndSighashType(inputs, inputIndex, pubkey, cache, sighashTypes) {
    const input = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["checkForInput"])(inputs, inputIndex);
    const { hash, sighashType, script } = getHashForSig(inputIndex, input, cache, false, sighashTypes);
    checkScriptForPubkey(pubkey, script, 'sign');
    return {
        hash,
        sighashType
    };
}
function getHashForSig(inputIndex, input, cache, forValidate, sighashTypes) {
    const unsignedTx = cache.__TX;
    const sighashType = input.sighashType || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$transaction$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transaction"].SIGHASH_ALL;
    checkSighashTypeAllowed(sighashType, sighashTypes);
    let hash;
    let prevout;
    if (input.nonWitnessUtxo) {
        const nonWitnessUtxoTx = nonWitnessUtxoTxFromCache(cache, input, inputIndex);
        const prevoutHash = unsignedTx.ins[inputIndex].hash;
        const utxoHash = nonWitnessUtxoTx.getHash();
        // If a non-witness UTXO is provided, its hash must match the hash specified in the prevout
        if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.compare(prevoutHash, utxoHash) !== 0) {
            throw new Error(`Non-witness UTXO hash for input #${inputIndex} doesn't match the hash specified in the prevout`);
        }
        const prevoutIndex = unsignedTx.ins[inputIndex].index;
        prevout = nonWitnessUtxoTx.outs[prevoutIndex];
    } else if (input.witnessUtxo) {
        prevout = input.witnessUtxo;
    } else {
        throw new Error('Need a Utxo input item for signing');
    }
    const { meaningfulScript, type } = getMeaningfulScript(prevout.script, inputIndex, 'input', input.redeemScript, input.witnessScript);
    if ([
        'p2sh-p2wsh',
        'p2wsh'
    ].indexOf(type) >= 0) {
        hash = unsignedTx.hashForWitnessV0(inputIndex, meaningfulScript, prevout.value, sighashType);
    } else if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$psbt$2f$psbtutils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isP2WPKH"])(meaningfulScript)) {
        // P2WPKH uses the P2PKH template for prevoutScript when signing
        const signingScript = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.p2pkh({
            hash: meaningfulScript.slice(2)
        }).output;
        hash = unsignedTx.hashForWitnessV0(inputIndex, signingScript, prevout.value, sighashType);
    } else {
        // non-segwit
        if (input.nonWitnessUtxo === undefined && cache.__UNSAFE_SIGN_NONSEGWIT === false) throw new Error(`Input #${inputIndex} has witnessUtxo but non-segwit script: ` + `${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.toHex(meaningfulScript)}`);
        if (!forValidate && cache.__UNSAFE_SIGN_NONSEGWIT !== false) console.warn('Warning: Signing non-segwit inputs without the full parent transaction ' + 'means there is a chance that a miner could feed you incorrect information ' + "to trick you into paying large fees. This behavior is the same as Psbt's predecessor " + '(TransactionBuilder - now removed) when signing non-segwit scripts. You are not ' + 'able to export this Psbt with toBuffer|toBase64|toHex since it is not ' + 'BIP174 compliant.\n*********************\nPROCEED WITH CAUTION!\n' + '*********************');
        hash = unsignedTx.hashForSignature(inputIndex, meaningfulScript, sighashType);
    }
    return {
        script: meaningfulScript,
        sighashType,
        hash
    };
}
function getAllTaprootHashesForSig(inputIndex, input, inputs, cache) {
    const allPublicKeys = [];
    if (input.tapInternalKey) {
        const key = getPrevoutTaprootKey(inputIndex, input, cache);
        if (key) {
            allPublicKeys.push(key);
        }
    }
    if (input.tapScriptSig) {
        const tapScriptPubkeys = input.tapScriptSig.map((tss)=>tss.pubkey);
        allPublicKeys.push(...tapScriptPubkeys);
    }
    const allHashes = allPublicKeys.map((publicKey)=>getTaprootHashesForSig(inputIndex, input, inputs, publicKey, cache));
    return allHashes.flat();
}
function getPrevoutTaprootKey(inputIndex, input, cache) {
    const { script } = getScriptAndAmountFromUtxo(inputIndex, input, cache);
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$psbt$2f$psbtutils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isP2TR"])(script) ? script.subarray(2, 34) : null;
}
function trimTaprootSig(signature) {
    return signature.length === 64 ? signature : signature.subarray(0, 64);
}
function getTaprootHashesForSig(inputIndex, input, inputs, pubkey, cache, tapLeafHashToSign, allowedSighashTypes) {
    const unsignedTx = cache.__TX;
    const sighashType = input.sighashType || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$transaction$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transaction"].SIGHASH_DEFAULT;
    checkSighashTypeAllowed(sighashType, allowedSighashTypes);
    const prevOuts = inputs.map((i, index)=>getScriptAndAmountFromUtxo(index, i, cache));
    const signingScripts = prevOuts.map((o)=>o.script);
    const values = prevOuts.map((o)=>o.value);
    const hashes = [];
    if (input.tapInternalKey && !tapLeafHashToSign) {
        const outputKey = getPrevoutTaprootKey(inputIndex, input, cache) || Uint8Array.from([]);
        if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.compare((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$psbt$2f$bip371$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["toXOnly"])(pubkey), outputKey) === 0) {
            const tapKeyHash = unsignedTx.hashForWitnessV1(inputIndex, signingScripts, values, sighashType);
            hashes.push({
                pubkey,
                hash: tapKeyHash
            });
        }
    }
    const tapLeafHashes = (input.tapLeafScript || []).filter((tapLeaf)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$psbt$2f$psbtutils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["pubkeyInScript"])(pubkey, tapLeaf.script)).map((tapLeaf)=>{
        const hash = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$bip341$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["tapleafHash"])({
            output: tapLeaf.script,
            version: tapLeaf.leafVersion
        });
        return Object.assign({
            hash
        }, tapLeaf);
    }).filter((tapLeaf)=>!tapLeafHashToSign || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.compare(tapLeafHashToSign, tapLeaf.hash) === 0).map((tapLeaf)=>{
        const tapScriptHash = unsignedTx.hashForWitnessV1(inputIndex, signingScripts, values, sighashType, tapLeaf.hash);
        return {
            pubkey,
            hash: tapScriptHash,
            leafHash: tapLeaf.hash
        };
    });
    return hashes.concat(tapLeafHashes);
}
function checkSighashTypeAllowed(sighashType, sighashTypes) {
    if (sighashTypes && sighashTypes.indexOf(sighashType) < 0) {
        const str = sighashTypeToString(sighashType);
        throw new Error(`Sighash type is not allowed. Retry the sign method passing the ` + `sighashTypes array of whitelisted types. Sighash type: ${str}`);
    }
}
function getPayment(script, scriptType, partialSig) {
    let payment;
    switch(scriptType){
        case 'multisig':
            const sigs = getSortedSigs(script, partialSig);
            payment = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.p2ms({
                output: script,
                signatures: sigs
            });
            break;
        case 'pubkey':
            payment = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.p2pk({
                output: script,
                signature: partialSig[0].signature
            });
            break;
        case 'pubkeyhash':
            payment = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.p2pkh({
                output: script,
                pubkey: partialSig[0].pubkey,
                signature: partialSig[0].signature
            });
            break;
        case 'witnesspubkeyhash':
            payment = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.p2wpkh({
                output: script,
                pubkey: partialSig[0].pubkey,
                signature: partialSig[0].signature
            });
            break;
    }
    return payment;
}
function getScriptFromInput(inputIndex, input, cache) {
    const unsignedTx = cache.__TX;
    const res = {
        script: null,
        isSegwit: false,
        isP2SH: false,
        isP2WSH: false
    };
    res.isP2SH = !!input.redeemScript;
    res.isP2WSH = !!input.witnessScript;
    if (input.witnessScript) {
        res.script = input.witnessScript;
    } else if (input.redeemScript) {
        res.script = input.redeemScript;
    } else {
        if (input.nonWitnessUtxo) {
            const nonWitnessUtxoTx = nonWitnessUtxoTxFromCache(cache, input, inputIndex);
            const prevoutIndex = unsignedTx.ins[inputIndex].index;
            res.script = nonWitnessUtxoTx.outs[prevoutIndex].script;
        } else if (input.witnessUtxo) {
            res.script = input.witnessUtxo.script;
        }
    }
    if (input.witnessScript || (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$psbt$2f$psbtutils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isP2WPKH"])(res.script)) {
        res.isSegwit = true;
    }
    return res;
}
function getSignersFromHD(inputIndex, inputs, hdKeyPair) {
    const input = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bip174$2f$src$2f$esm$2f$lib$2f$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["checkForInput"])(inputs, inputIndex);
    if (!input.bip32Derivation || input.bip32Derivation.length === 0) {
        throw new Error('Need bip32Derivation to sign with HD');
    }
    const myDerivations = input.bip32Derivation.map((bipDv)=>{
        if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.compare(bipDv.masterFingerprint, hdKeyPair.fingerprint) === 0) {
            return bipDv;
        } else {
            return;
        }
    }).filter((v)=>!!v);
    if (myDerivations.length === 0) {
        throw new Error('Need one bip32Derivation masterFingerprint to match the HDSigner fingerprint');
    }
    const signers = myDerivations.map((bipDv)=>{
        const node = hdKeyPair.derivePath(bipDv.path);
        if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.compare(bipDv.pubkey, node.publicKey) !== 0) {
            throw new Error('pubkey did not match bip32Derivation');
        }
        return node;
    });
    return signers;
}
function getSortedSigs(script, partialSig) {
    const p2ms = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.p2ms({
        output: script
    });
    // for each pubkey in order of p2ms script
    return p2ms.pubkeys.map((pk)=>{
        // filter partialSig array by pubkey being equal
        return (partialSig.filter((ps)=>{
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uint8array$2d$tools$2f$src$2f$mjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.compare(ps.pubkey, pk) === 0;
        })[0] || {}).signature;
    // Any pubkey without a match will return undefined
    // this last filter removes all the undefined items in the array.
    }).filter((v)=>!!v);
}
function scriptWitnessToWitnessStack(buffer) {
    let offset = 0;
    function readSlice(n) {
        offset += n;
        return buffer.slice(offset - n, offset);
    }
    function readVarInt() {
        const vi = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$varuint$2d$bitcoin$2f$src$2f$esm$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.decode(buffer, offset);
        offset += __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$varuint$2d$bitcoin$2f$src$2f$esm$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.encodingLength(vi.bigintValue);
        return vi.numberValue;
    }
    function readVarSlice() {
        return readSlice(readVarInt());
    }
    function readVector() {
        const count = readVarInt();
        const vector = [];
        for(let i = 0; i < count; i++)vector.push(readVarSlice());
        return vector;
    }
    return readVector();
}
function sighashTypeToString(sighashType) {
    let text = sighashType & __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$transaction$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transaction"].SIGHASH_ANYONECANPAY ? 'SIGHASH_ANYONECANPAY | ' : '';
    const sigMod = sighashType & 0x1f;
    switch(sigMod){
        case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$transaction$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transaction"].SIGHASH_ALL:
            text += 'SIGHASH_ALL';
            break;
        case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$transaction$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transaction"].SIGHASH_SINGLE:
            text += 'SIGHASH_SINGLE';
            break;
        case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$transaction$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transaction"].SIGHASH_NONE:
            text += 'SIGHASH_NONE';
            break;
    }
    return text;
}
function addNonWitnessTxCache(cache, input, inputIndex) {
    cache.__NON_WITNESS_UTXO_BUF_CACHE[inputIndex] = input.nonWitnessUtxo;
    const tx = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$transaction$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transaction"].fromBuffer(input.nonWitnessUtxo);
    cache.__NON_WITNESS_UTXO_TX_CACHE[inputIndex] = tx;
    const self = cache;
    const selfIndex = inputIndex;
    delete input.nonWitnessUtxo;
    Object.defineProperty(input, 'nonWitnessUtxo', {
        enumerable: true,
        get () {
            const buf = self.__NON_WITNESS_UTXO_BUF_CACHE[selfIndex];
            const txCache = self.__NON_WITNESS_UTXO_TX_CACHE[selfIndex];
            if (buf !== undefined) {
                return buf;
            } else {
                const newBuf = txCache.toBuffer();
                self.__NON_WITNESS_UTXO_BUF_CACHE[selfIndex] = newBuf;
                return newBuf;
            }
        },
        set (data) {
            self.__NON_WITNESS_UTXO_BUF_CACHE[selfIndex] = data;
        }
    });
}
function inputFinalizeGetAmts(inputs, tx, cache, mustFinalize) {
    let inputAmount = 0n;
    inputs.forEach((input, idx)=>{
        if (mustFinalize && input.finalScriptSig) tx.ins[idx].script = input.finalScriptSig;
        if (mustFinalize && input.finalScriptWitness) {
            tx.ins[idx].witness = scriptWitnessToWitnessStack(input.finalScriptWitness);
        }
        if (input.witnessUtxo) {
            inputAmount += input.witnessUtxo.value;
        } else if (input.nonWitnessUtxo) {
            const nwTx = nonWitnessUtxoTxFromCache(cache, input, idx);
            const vout = tx.ins[idx].index;
            const out = nwTx.outs[vout];
            inputAmount += out.value;
        }
    });
    const outputAmount = tx.outs.reduce((total, o)=>total + o.value, 0n);
    const fee = inputAmount - outputAmount;
    if (fee < 0) {
        throw new Error('Outputs are spending more than Inputs');
    }
    const bytes = tx.virtualSize();
    cache.__FEE = fee;
    cache.__EXTRACTED_TX = tx;
    cache.__FEE_RATE = Math.floor(Number(fee / BigInt(bytes)));
}
function nonWitnessUtxoTxFromCache(cache, input, inputIndex) {
    const c = cache.__NON_WITNESS_UTXO_TX_CACHE;
    if (!c[inputIndex]) {
        addNonWitnessTxCache(cache, input, inputIndex);
    }
    return c[inputIndex];
}
function getScriptFromUtxo(inputIndex, input, cache) {
    const { script } = getScriptAndAmountFromUtxo(inputIndex, input, cache);
    return script;
}
function getScriptAndAmountFromUtxo(inputIndex, input, cache) {
    if (input.witnessUtxo !== undefined) {
        return {
            script: input.witnessUtxo.script,
            value: input.witnessUtxo.value
        };
    } else if (input.nonWitnessUtxo !== undefined) {
        const nonWitnessUtxoTx = nonWitnessUtxoTxFromCache(cache, input, inputIndex);
        const o = nonWitnessUtxoTx.outs[cache.__TX.ins[inputIndex].index];
        return {
            script: o.script,
            value: o.value
        };
    } else {
        throw new Error("Can't find pubkey in input without Utxo data");
    }
}
function pubkeyInInput(pubkey, input, inputIndex, cache) {
    const script = getScriptFromUtxo(inputIndex, input, cache);
    const { meaningfulScript } = getMeaningfulScript(script, inputIndex, 'input', input.redeemScript, input.witnessScript);
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$psbt$2f$psbtutils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["pubkeyInScript"])(pubkey, meaningfulScript);
}
function pubkeyInOutput(pubkey, output, outputIndex, cache) {
    const script = cache.__TX.outs[outputIndex].script;
    const { meaningfulScript } = getMeaningfulScript(script, outputIndex, 'output', output.redeemScript, output.witnessScript);
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$psbt$2f$psbtutils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["pubkeyInScript"])(pubkey, meaningfulScript);
}
function redeemFromFinalScriptSig(finalScript) {
    if (!finalScript) return;
    const decomp = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$script$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.decompile(finalScript);
    if (!decomp) return;
    const lastItem = decomp[decomp.length - 1];
    if (!(lastItem instanceof Uint8Array) || isPubkeyLike(lastItem) || isSigLike(lastItem)) return;
    const sDecomp = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$script$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.decompile(lastItem);
    if (!sDecomp) return;
    return lastItem;
}
function redeemFromFinalWitnessScript(finalScript) {
    if (!finalScript) return;
    const decomp = scriptWitnessToWitnessStack(finalScript);
    const lastItem = decomp[decomp.length - 1];
    if (isPubkeyLike(lastItem)) return;
    const sDecomp = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$script$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.decompile(lastItem);
    if (!sDecomp) return;
    return lastItem;
}
function compressPubkey(pubkey) {
    if (pubkey.length === 65) {
        const parity = pubkey[64] & 1;
        const newKey = pubkey.slice(0, 33);
        newKey[0] = 2 | parity;
        return newKey;
    }
    return pubkey.slice();
}
function isPubkeyLike(buf) {
    return buf.length === 33 && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$script$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.isCanonicalPubKey(buf);
}
function isSigLike(buf) {
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$script$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__.isCanonicalScriptSignature(buf);
}
function getMeaningfulScript(script, index, ioType, redeemScript, witnessScript) {
    const isP2SH = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$psbt$2f$psbtutils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isP2SHScript"])(script);
    const isP2SHP2WSH = isP2SH && redeemScript && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$psbt$2f$psbtutils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isP2WSHScript"])(redeemScript);
    const isP2WSH = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$psbt$2f$psbtutils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isP2WSHScript"])(script);
    if (isP2SH && redeemScript === undefined) throw new Error('scriptPubkey is P2SH but redeemScript missing');
    if ((isP2WSH || isP2SHP2WSH) && witnessScript === undefined) throw new Error('scriptPubkey or redeemScript is P2WSH but witnessScript missing');
    let meaningfulScript;
    if (isP2SHP2WSH) {
        meaningfulScript = witnessScript;
        checkRedeemScript(index, script, redeemScript, ioType);
        checkWitnessScript(index, redeemScript, witnessScript, ioType);
        checkInvalidP2WSH(meaningfulScript);
    } else if (isP2WSH) {
        meaningfulScript = witnessScript;
        checkWitnessScript(index, script, witnessScript, ioType);
        checkInvalidP2WSH(meaningfulScript);
    } else if (isP2SH) {
        meaningfulScript = redeemScript;
        checkRedeemScript(index, script, redeemScript, ioType);
    } else {
        meaningfulScript = script;
    }
    return {
        meaningfulScript,
        type: isP2SHP2WSH ? 'p2sh-p2wsh' : isP2SH ? 'p2sh' : isP2WSH ? 'p2wsh' : 'raw'
    };
}
function checkInvalidP2WSH(script) {
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$psbt$2f$psbtutils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isP2WPKH"])(script) || (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$psbt$2f$psbtutils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isP2SHScript"])(script)) {
        throw new Error('P2WPKH or P2SH can not be contained within P2WSH');
    }
}
function classifyScript(script) {
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$psbt$2f$psbtutils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isP2WPKH"])(script)) return 'witnesspubkeyhash';
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$psbt$2f$psbtutils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isP2PKH"])(script)) return 'pubkeyhash';
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$psbt$2f$psbtutils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isP2MS"])(script)) return 'multisig';
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$psbt$2f$psbtutils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isP2PK"])(script)) return 'pubkey';
    return 'nonstandard';
}
function range(n) {
    return [
        ...Array(n).keys()
    ];
}
}}),
"[project]/node_modules/bitcoinjs-lib/src/esm/index.js [app-ssr] (ecmascript) <locals>": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({});
;
;
;
;
;
;
;
;
;
;
;
}}),
"[project]/node_modules/bitcoinjs-lib/src/esm/index.js [app-ssr] (ecmascript) <module evaluation>": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, t: __turbopack_require_real__ } = __turbopack_context__;
{
__turbopack_esm__({});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$address$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/address.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$crypto$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/crypto.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$networks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/networks.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$payments$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/payments/index.js [app-ssr] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$script$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/script.js [app-ssr] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$block$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/block.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$psbt$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/psbt.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$ops$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/ops.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$transaction$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/transaction.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$ecc_lib$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/ecc_lib.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/index.js [app-ssr] (ecmascript) <locals>");
}}),
"[project]/node_modules/bitcoinjs-lib/src/esm/networks.js [app-ssr] (ecmascript) <export * as networks>": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, t: __turbopack_require_real__ } = __turbopack_context__;
{
__turbopack_esm__({
    "networks": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$networks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$networks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/networks.js [app-ssr] (ecmascript)");
}}),
"[project]/node_modules/bitcoinjs-lib/src/esm/address.js [app-ssr] (ecmascript) <export * as address>": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, t: __turbopack_require_real__ } = __turbopack_context__;
{
__turbopack_esm__({
    "address": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$address$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$address$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/address.js [app-ssr] (ecmascript)");
}}),

};

//# sourceMappingURL=node_modules_bitcoinjs-lib_src_esm_192e96._.js.map