module.exports = {

"[project]/node_modules/@lifi/sdk/src/_esm/config.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "config": (()=>config)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$types$2f$src$2f$_esm$2f$chains$2f$base$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/types/src/_esm/chains/base.js [app-ssr] (ecmascript)");
;
const config = (()=>{
    const _config = {
        integrator: 'lifi-sdk',
        apiUrl: 'https://li.quest/v1',
        rpcUrls: {},
        chains: [],
        providers: [],
        preloadChains: true,
        debug: false
    };
    let _loading;
    return {
        set loading (loading){
            _loading = loading;
        },
        get () {
            return _config;
        },
        set (options) {
            const { chains, providers, rpcUrls, ...otherOptions } = options;
            Object.assign(_config, otherOptions);
            if (chains) {
                this.setChains(chains);
            }
            if (providers) {
                this.setProviders(providers);
            }
            if (rpcUrls) {
                this.setRPCUrls(rpcUrls);
            }
            return _config;
        },
        setProviders (providers) {
            const providerMap = new Map(_config.providers.map((provider)=>[
                    provider.type,
                    provider
                ]));
            for (const provider of providers){
                providerMap.set(provider.type, provider);
            }
            _config.providers = Array.from(providerMap.values());
        },
        setChains (chains) {
            const rpcUrls = chains.reduce((rpcUrls, chain)=>{
                if (chain.metamask?.rpcUrls?.length) {
                    rpcUrls[chain.id] = chain.metamask.rpcUrls;
                }
                return rpcUrls;
            }, {});
            this.setRPCUrls(rpcUrls, [
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$types$2f$src$2f$_esm$2f$chains$2f$base$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ChainId"].SOL
            ]);
            _config.chains = chains;
            _loading = undefined;
        },
        async getChains () {
            if (_loading) {
                await _loading;
            }
            return _config.chains;
        },
        async getChainById (chainId) {
            if (_loading) {
                await _loading;
            }
            const chain = _config.chains?.find((chain)=>chain.id === chainId);
            if (!chain) {
                throw new Error(`ChainId ${chainId} not found`);
            }
            return chain;
        },
        setRPCUrls (rpcUrls, skipChains) {
            for(const rpcUrlsKey in rpcUrls){
                const chainId = Number(rpcUrlsKey);
                const urls = rpcUrls[chainId];
                if (!urls?.length) {
                    continue;
                }
                if (!_config.rpcUrls[chainId]?.length) {
                    _config.rpcUrls[chainId] = Array.from(urls);
                } else if (!skipChains?.includes(chainId)) {
                    const filteredUrls = urls.filter((url)=>!_config.rpcUrls[chainId]?.includes(url));
                    _config.rpcUrls[chainId].push(...filteredUrls);
                }
            }
        },
        async getRPCUrls () {
            if (_loading) {
                await _loading;
            }
            return _config.rpcUrls;
        }
    };
})(); //# sourceMappingURL=config.js.map
}}),
"[project]/node_modules/@lifi/sdk/src/_esm/version.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "name": (()=>name),
    "version": (()=>version)
});
const name = '@lifi/sdk';
const version = '3.5.0'; //# sourceMappingURL=version.js.map
}}),
"[project]/node_modules/@lifi/sdk/src/_esm/errors/SDKError.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "SDKError": (()=>SDKError)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$version$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/version.js [app-ssr] (ecmascript)");
;
class SDKError extends Error {
    constructor(cause, step, process){
        const errorMessage = `${cause.message ? `[${cause.name}] ${cause.message}` : 'Unknown error occurred'}\nLI.FI SDK version: ${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$version$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["version"]}`;
        super(errorMessage);
        Object.defineProperty(this, "step", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "process", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "code", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "name", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 'SDKError'
        });
        Object.defineProperty(this, "cause", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.name = 'SDKError';
        this.step = step;
        this.process = process;
        this.cause = cause;
        this.stack = this.cause.stack;
        this.code = cause.code;
    }
} //# sourceMappingURL=SDKError.js.map
}}),
"[project]/node_modules/@lifi/sdk/src/_esm/errors/constants.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "ErrorMessage": (()=>ErrorMessage),
    "ErrorName": (()=>ErrorName),
    "LiFiErrorCode": (()=>LiFiErrorCode)
});
var ErrorName;
(function(ErrorName) {
    ErrorName["RPCError"] = "RPCError";
    ErrorName["ProviderError"] = "ProviderError";
    ErrorName["ServerError"] = "ServerError";
    ErrorName["TransactionError"] = "TransactionError";
    ErrorName["ValidationError"] = "ValidationError";
    ErrorName["BalanceError"] = "BalanceError";
    ErrorName["NotFoundError"] = "NotFoundError";
    ErrorName["UnknownError"] = "UnknownError";
    ErrorName["SlippageError"] = "SlippageError";
    ErrorName["HTTPError"] = "HTTPError";
})(ErrorName || (ErrorName = {}));
var LiFiErrorCode;
(function(LiFiErrorCode) {
    LiFiErrorCode[LiFiErrorCode["InternalError"] = 1000] = "InternalError";
    LiFiErrorCode[LiFiErrorCode["ValidationError"] = 1001] = "ValidationError";
    LiFiErrorCode[LiFiErrorCode["TransactionUnderpriced"] = 1002] = "TransactionUnderpriced";
    LiFiErrorCode[LiFiErrorCode["TransactionFailed"] = 1003] = "TransactionFailed";
    LiFiErrorCode[LiFiErrorCode["Timeout"] = 1004] = "Timeout";
    LiFiErrorCode[LiFiErrorCode["ProviderUnavailable"] = 1005] = "ProviderUnavailable";
    LiFiErrorCode[LiFiErrorCode["NotFound"] = 1006] = "NotFound";
    LiFiErrorCode[LiFiErrorCode["ChainSwitchError"] = 1007] = "ChainSwitchError";
    LiFiErrorCode[LiFiErrorCode["TransactionUnprepared"] = 1008] = "TransactionUnprepared";
    LiFiErrorCode[LiFiErrorCode["GasLimitError"] = 1009] = "GasLimitError";
    LiFiErrorCode[LiFiErrorCode["TransactionCanceled"] = 1010] = "TransactionCanceled";
    LiFiErrorCode[LiFiErrorCode["SlippageError"] = 1011] = "SlippageError";
    LiFiErrorCode[LiFiErrorCode["SignatureRejected"] = 1012] = "SignatureRejected";
    LiFiErrorCode[LiFiErrorCode["BalanceError"] = 1013] = "BalanceError";
    LiFiErrorCode[LiFiErrorCode["AllowanceRequired"] = 1014] = "AllowanceRequired";
    LiFiErrorCode[LiFiErrorCode["InsufficientFunds"] = 1015] = "InsufficientFunds";
    LiFiErrorCode[LiFiErrorCode["ExchangeRateUpdateCanceled"] = 1016] = "ExchangeRateUpdateCanceled";
    LiFiErrorCode[LiFiErrorCode["WalletChangedDuringExecution"] = 1017] = "WalletChangedDuringExecution";
    LiFiErrorCode[LiFiErrorCode["TransactionExpired"] = 1018] = "TransactionExpired";
    LiFiErrorCode[LiFiErrorCode["TransactionSimulationFailed"] = 1019] = "TransactionSimulationFailed";
    LiFiErrorCode[LiFiErrorCode["TransactionConflict"] = 1020] = "TransactionConflict";
})(LiFiErrorCode || (LiFiErrorCode = {}));
var ErrorMessage;
(function(ErrorMessage) {
    ErrorMessage["UnknownError"] = "Unknown error occurred.";
    ErrorMessage["SlippageError"] = "The slippage is larger than the defined threshold. Please request a new route to get a fresh quote.";
    ErrorMessage["GasLimitLow"] = "Gas limit is too low.";
    ErrorMessage["TransactionUnderpriced"] = "Transaction is underpriced.";
    ErrorMessage["TransactionReverted"] = "Transaction was reverted.";
})(ErrorMessage || (ErrorMessage = {})); //# sourceMappingURL=constants.js.map
}}),
"[project]/node_modules/@lifi/sdk/src/_esm/errors/utils/rootCause.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "getRootCause": (()=>getRootCause)
});
const getRootCause = (e)=>{
    let rootCause = e;
    while(rootCause?.cause){
        rootCause = rootCause.cause;
    }
    return rootCause;
}; //# sourceMappingURL=rootCause.js.map
}}),
"[project]/node_modules/@lifi/sdk/src/_esm/errors/baseError.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "BaseError": (()=>BaseError)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$utils$2f$rootCause$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/errors/utils/rootCause.js [app-ssr] (ecmascript)");
;
class BaseError extends Error {
    constructor(name, code, message, cause){
        super(message);
        Object.defineProperty(this, "code", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "cause", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.name = name;
        this.code = code;
        this.cause = cause;
        const rootCause = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$utils$2f$rootCause$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getRootCause"])(this.cause);
        if (rootCause?.stack) {
            this.stack = rootCause.stack;
        }
    }
} //# sourceMappingURL=baseError.js.map
}}),
"[project]/node_modules/@lifi/sdk/src/_esm/errors/errors.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "BalanceError": (()=>BalanceError),
    "ProviderError": (()=>ProviderError),
    "RPCError": (()=>RPCError),
    "ServerError": (()=>ServerError),
    "TransactionError": (()=>TransactionError),
    "UnknownError": (()=>UnknownError),
    "ValidationError": (()=>ValidationError)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/errors/constants.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$baseError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/errors/baseError.js [app-ssr] (ecmascript)");
;
;
class RPCError extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$baseError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["BaseError"] {
    constructor(code, message, cause){
        super(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ErrorName"].RPCError, code, message, cause);
    }
}
class ProviderError extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$baseError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["BaseError"] {
    constructor(code, message, cause){
        super(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ErrorName"].ProviderError, code, message, cause);
    }
}
class TransactionError extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$baseError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["BaseError"] {
    constructor(code, message, cause){
        super(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ErrorName"].TransactionError, code, message, cause);
    }
}
class UnknownError extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$baseError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["BaseError"] {
    constructor(message, cause){
        super(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ErrorName"].UnknownError, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["LiFiErrorCode"].InternalError, message, cause);
    }
}
class BalanceError extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$baseError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["BaseError"] {
    constructor(message, cause){
        super(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ErrorName"].BalanceError, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["LiFiErrorCode"].BalanceError, message, cause);
    }
}
class ServerError extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$baseError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["BaseError"] {
    constructor(message){
        super(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ErrorName"].ServerError, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["LiFiErrorCode"].InternalError, message);
    }
}
class ValidationError extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$baseError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["BaseError"] {
    constructor(message){
        super(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ErrorName"].ValidationError, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["LiFiErrorCode"].ValidationError, message);
    }
} //# sourceMappingURL=errors.js.map
}}),
"[project]/node_modules/@lifi/sdk/src/_esm/helpers.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "checkPackageUpdates": (()=>checkPackageUpdates),
    "convertQuoteToRoute": (()=>convertQuoteToRoute),
    "fetchTxErrorDetails": (()=>fetchTxErrorDetails)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$version$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/version.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$SDKError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/errors/SDKError.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$errors$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/errors/errors.js [app-ssr] (ecmascript)");
;
;
;
const checkPackageUpdates = async (packageName, packageVersion)=>{
    try {
        const pkgName = packageName ?? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$version$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["name"];
        const response = await fetch(`https://registry.npmjs.org/${pkgName}/latest`);
        const reponseBody = await response.json();
        const latestVersion = reponseBody.version;
        const currentVersion = packageVersion ?? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$version$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["version"];
        if (latestVersion > currentVersion) {
            console.warn(`${pkgName}: new package version is available. Please update as soon as possible to enjoy the newest features. Current version: ${currentVersion}. Latest version: ${latestVersion}.`);
        }
    } catch (_error) {
    // Cannot verify version, might be network error etc. We don't bother showing anything in that case
    }
};
const convertQuoteToRoute = (step)=>{
    if (!step.estimate.fromAmountUSD) {
        throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$SDKError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["SDKError"](new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$errors$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ValidationError"]("Missing 'fromAmountUSD' in step estimate."));
    }
    if (!step.estimate.toAmountUSD) {
        throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$SDKError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["SDKError"](new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$errors$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ValidationError"]("Missing 'toAmountUSD' in step estimate."));
    }
    const route = {
        fromToken: step.action.fromToken,
        toToken: step.action.toToken,
        fromAmount: step.action.fromAmount,
        toAmount: step.estimate.toAmount,
        id: step.id,
        fromChainId: step.action.fromToken.chainId,
        toChainId: step.action.toToken.chainId,
        fromAmountUSD: step.estimate.fromAmountUSD,
        toAmountUSD: step.estimate.toAmountUSD,
        steps: [
            step
        ],
        toAmountMin: step.estimate.toAmountMin,
        insurance: {
            state: 'NOT_INSURABLE',
            feeAmountUsd: '0'
        }
    };
    return route;
};
const fetchTxErrorDetails = async (txHash, chainId)=>{
    try {
        const response = await fetch(`https://api.tenderly.co/api/v1/public-contract/${chainId}/tx/${txHash}`);
        const reponseBody = await response.json();
        return reponseBody;
    } catch (_) {}
}; //# sourceMappingURL=helpers.js.map
}}),
"[project]/node_modules/@lifi/sdk/src/_esm/errors/httpError.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "HTTPError": (()=>HTTPError)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/errors/constants.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$baseError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/errors/baseError.js [app-ssr] (ecmascript)");
;
;
;
const statusCodeToErrorClassificationMap = new Map([
    [
        400,
        {
            type: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ErrorName"].ValidationError,
            code: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["LiFiErrorCode"].ValidationError
        }
    ],
    [
        404,
        {
            type: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ErrorName"].NotFoundError,
            code: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["LiFiErrorCode"].NotFound
        }
    ],
    [
        409,
        {
            type: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ErrorName"].SlippageError,
            code: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["LiFiErrorCode"].SlippageError,
            message: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ErrorMessage"].SlippageError
        }
    ],
    [
        500,
        {
            type: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ErrorName"].ServerError,
            code: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["LiFiErrorCode"].InternalError
        }
    ]
]);
const getErrorClassificationFromStatusCode = (code)=>statusCodeToErrorClassificationMap.get(code) ?? {
        type: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ErrorName"].ServerError,
        code: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["LiFiErrorCode"].InternalError
    };
const createInitialMessage = (response)=>{
    const statusCode = response.status || response.status === 0 ? response.status : '';
    const title = response.statusText || '';
    const status = `${statusCode} ${title}`.trim();
    const reason = status ? `status code ${status}` : 'an unknown error';
    return `Request failed with ${reason}`;
};
class HTTPError extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$baseError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["BaseError"] {
    constructor(response, url, options){
        const errorClassification = getErrorClassificationFromStatusCode(response.status);
        const additionalMessage = errorClassification?.message ? `\n${errorClassification.message}` : '';
        const message = createInitialMessage(response) + additionalMessage;
        super(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ErrorName"].HTTPError, errorClassification.code, message);
        Object.defineProperty(this, "response", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "status", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "url", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "fetchOptions", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "type", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "responseBody", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.type = errorClassification.type;
        this.response = response;
        this.status = response.status;
        this.message = message;
        this.url = url;
        this.fetchOptions = options;
    }
    async buildAdditionalDetails() {
        if (this.type) {
            this.message = `[${this.type}] ${this.message}`;
        }
        try {
            this.responseBody = await this.response.json();
            if (this.responseBody) {
                this.message += this.message.endsWith('.') ? ` ${this.responseBody?.message.toString()}` : `. ${this.responseBody?.message.toString()}`;
            }
        } catch  {}
        return this;
    }
} //# sourceMappingURL=httpError.js.map
}}),
"[project]/node_modules/@lifi/sdk/src/_esm/utils/sleep.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "sleep": (()=>sleep)
});
function sleep(ms) {
    return new Promise((resolve)=>{
        setTimeout(()=>resolve(null), ms);
    });
} //# sourceMappingURL=sleep.js.map
}}),
"[project]/node_modules/@lifi/sdk/src/_esm/request.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "request": (()=>request),
    "requestSettings": (()=>requestSettings)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$config$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/config.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$SDKError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/errors/SDKError.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$errors$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/errors/errors.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$version$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/version.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$httpError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/errors/httpError.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$utils$2f$sleep$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/utils/sleep.js [app-ssr] (ecmascript)");
;
;
;
;
;
;
const requestSettings = {
    retries: 1
};
const stripExtendRequestInitProperties = ({ retries, ...rest })=>({
        ...rest
    });
const request = async (url, options = {
    retries: requestSettings.retries
})=>{
    const { userId, integrator, widgetVersion, apiKey } = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$config$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["config"].get();
    if (!integrator) {
        throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$SDKError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["SDKError"](new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$errors$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ValidationError"]('You need to provide the Integrator property. Please see documentation https://docs.li.fi/integrate-li.fi-js-sdk/set-up-the-sdk'));
    }
    options.retries = options.retries ?? requestSettings.retries;
    try {
        if (apiKey) {
            options.headers = {
                ...options.headers,
                'x-lifi-api-key': apiKey
            };
        }
        if (userId) {
            options.headers = {
                ...options.headers,
                'x-lifi-userid': userId
            };
        }
        if (widgetVersion) {
            options.headers = {
                ...options.headers,
                'x-lifi-widget': widgetVersion
            };
        }
        if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$version$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["version"]) {
            options.headers = {
                ...options.headers,
                'x-lifi-sdk': __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$version$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["version"]
            };
        }
        // integrator is mandatory during SDK initialization
        options.headers = {
            ...options.headers,
            'x-lifi-integrator': integrator
        };
        const response = await fetch(url, stripExtendRequestInitProperties(options));
        if (!response.ok) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$httpError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["HTTPError"](response, url, options);
        }
        return await response.json();
    } catch (error) {
        if (options.retries > 0 && error.status === 500) {
            await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$utils$2f$sleep$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["sleep"])(500);
            return request(url, {
                ...options,
                retries: options.retries - 1
            });
        }
        await error.buildAdditionalDetails?.();
        throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$SDKError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["SDKError"](error);
    }
}; //# sourceMappingURL=request.js.map
}}),
"[project]/node_modules/@lifi/sdk/src/_esm/utils/withDedupe.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * Map with a LRU (Least recently used) policy.
 *
 * https://en.wikipedia.org/wiki/Cache_replacement_policies#LRU
 */ __turbopack_esm__({
    "LruMap": (()=>LruMap),
    "promiseCache": (()=>promiseCache),
    "withDedupe": (()=>withDedupe)
});
class LruMap extends Map {
    constructor(size){
        super();
        Object.defineProperty(this, "maxSize", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.maxSize = size;
    }
    set(key, value) {
        super.set(key, value);
        if (this.maxSize && this.size > this.maxSize) {
            this.delete(this.keys().next().value);
        }
        return this;
    }
}
const promiseCache = /*#__PURE__*/ new LruMap(8192);
function withDedupe(fn, { enabled = true, id }) {
    if (!enabled || !id) {
        return fn();
    }
    if (promiseCache.get(id)) {
        return promiseCache.get(id);
    }
    const promise = fn().finally(()=>promiseCache.delete(id));
    promiseCache.set(id, promise);
    return promise;
} //# sourceMappingURL=withDedupe.js.map
}}),
"[project]/node_modules/@lifi/sdk/src/_esm/typeguards.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "isRoutesRequest": (()=>isRoutesRequest),
    "isStep": (()=>isStep),
    "isToken": (()=>isToken)
});
const isRoutesRequest = (routesRequest)=>{
    const { fromChainId, fromAmount, fromTokenAddress, toChainId, toTokenAddress, options } = routesRequest;
    return typeof fromChainId === 'number' && typeof fromAmount === 'string' && fromAmount !== '' && typeof fromTokenAddress === 'string' && fromTokenAddress !== '' && typeof toChainId === 'number' && typeof toTokenAddress === 'string' && toTokenAddress !== '' && (!options || isRoutesOptions(options));
};
const isRoutesOptions = (routeOptions)=>!routeOptions?.slippage || typeof routeOptions.slippage === 'number';
const isStep = (step)=>{
    const { id, type, tool, action, estimate } = step;
    return typeof id === 'string' && [
        'swap',
        'cross',
        'lifi'
    ].includes(type) && typeof tool === 'string' && isAction(action) && isEstimate(estimate);
};
const isAction = (action)=>{
    const { fromChainId, fromAmount, fromToken, toChainId, toToken, slippage } = action;
    return typeof fromChainId === 'number' && typeof fromAmount === 'string' && fromAmount !== '' && isToken(fromToken) && typeof toChainId === 'number' && isToken(toToken) && typeof slippage === 'number';
};
const isEstimate = (estimate)=>{
    const { fromAmount, toAmount, toAmountMin, approvalAddress } = estimate;
    return typeof fromAmount === 'string' && fromAmount !== '' && typeof toAmount === 'string' && toAmount !== '' && typeof toAmountMin === 'string' && toAmountMin !== '' && typeof approvalAddress === 'string';
};
const isToken = (token)=>{
    const { address, decimals, chainId } = token;
    return typeof address === 'string' && typeof decimals === 'number' && typeof chainId === 'number';
}; //# sourceMappingURL=typeguards.js.map
}}),
"[project]/node_modules/@lifi/sdk/src/_esm/services/api.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "getChains": (()=>getChains),
    "getConnections": (()=>getConnections),
    "getContractCallsQuote": (()=>getContractCallsQuote),
    "getGasRecommendation": (()=>getGasRecommendation),
    "getQuote": (()=>getQuote),
    "getRoutes": (()=>getRoutes),
    "getStatus": (()=>getStatus),
    "getStepTransaction": (()=>getStepTransaction),
    "getToken": (()=>getToken),
    "getTokens": (()=>getTokens),
    "getTools": (()=>getTools),
    "getTransactionHistory": (()=>getTransactionHistory)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$SDKError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/errors/SDKError.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$errors$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/errors/errors.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$request$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/request.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$config$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/config.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$types$2f$src$2f$_esm$2f$api$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/types/src/_esm/api.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$utils$2f$withDedupe$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/utils/withDedupe.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$typeguards$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/typeguards.js [app-ssr] (ecmascript)");
;
;
;
;
;
;
;
const getToken = async (chain, token, options)=>{
    if (!chain) {
        throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$SDKError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["SDKError"](new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$errors$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ValidationError"]('Required parameter "chain" is missing.'));
    }
    if (!token) {
        throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$SDKError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["SDKError"](new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$errors$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ValidationError"]('Required parameter "token" is missing.'));
    }
    return await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$request$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["request"])(`${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$config$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["config"].get().apiUrl}/token?${new URLSearchParams({
        chain,
        token
    })}`, {
        signal: options?.signal
    });
};
const getQuote = async (params, options)=>{
    const requiredParameters = [
        'fromChain',
        'fromToken',
        'fromAddress',
        'fromAmount',
        'toChain',
        'toToken'
    ];
    for (const requiredParameter of requiredParameters){
        if (!params[requiredParameter]) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$SDKError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["SDKError"](new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$errors$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ValidationError"](`Required parameter "${requiredParameter}" is missing.`));
        }
    }
    const _config = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$config$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["config"].get();
    // apply defaults
    params.integrator ??= _config.integrator;
    params.order ??= _config.routeOptions?.order;
    params.slippage ??= _config.routeOptions?.slippage;
    params.referrer ??= _config.routeOptions?.referrer;
    params.fee ??= _config.routeOptions?.fee;
    params.allowBridges ??= _config.routeOptions?.bridges?.allow;
    params.denyBridges ??= _config.routeOptions?.bridges?.deny;
    params.preferBridges ??= _config.routeOptions?.bridges?.prefer;
    params.allowExchanges ??= _config.routeOptions?.exchanges?.allow;
    params.denyExchanges ??= _config.routeOptions?.exchanges?.deny;
    params.preferExchanges ??= _config.routeOptions?.exchanges?.prefer;
    for (const key of Object.keys(params)){
        if (!params[key]) {
            delete params[key];
        }
    }
    return await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$request$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["request"])(`${_config.apiUrl}/quote?${new URLSearchParams(params)}`, {
        signal: options?.signal
    });
};
const getContractCallsQuote = async (params, options)=>{
    // validation
    const requiredParameters = [
        'fromChain',
        'fromToken',
        'fromAddress',
        'toChain',
        'toToken',
        'contractCalls'
    ];
    for (const requiredParameter of requiredParameters){
        if (!params[requiredParameter]) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$SDKError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["SDKError"](new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$errors$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ValidationError"](`Required parameter "${requiredParameter}" is missing.`));
        }
    }
    if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$types$2f$src$2f$_esm$2f$api$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isContractCallsRequestWithFromAmount"])(params) && !(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$types$2f$src$2f$_esm$2f$api$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isContractCallsRequestWithToAmount"])(params)) {
        throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$SDKError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["SDKError"](new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$errors$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ValidationError"](`Required parameter "fromAmount" or "toAmount" is missing.`));
    }
    const _config = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$config$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["config"].get();
    // apply defaults
    // option.order is not used in this endpoint
    params.integrator ??= _config.integrator;
    params.slippage ??= _config.routeOptions?.slippage;
    params.referrer ??= _config.routeOptions?.referrer;
    params.fee ??= _config.routeOptions?.fee;
    params.allowBridges ??= _config.routeOptions?.bridges?.allow;
    params.denyBridges ??= _config.routeOptions?.bridges?.deny;
    params.preferBridges ??= _config.routeOptions?.bridges?.prefer;
    params.allowExchanges ??= _config.routeOptions?.exchanges?.allow;
    params.denyExchanges ??= _config.routeOptions?.exchanges?.deny;
    params.preferExchanges ??= _config.routeOptions?.exchanges?.prefer;
    // send request
    return await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$request$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["request"])(`${_config.apiUrl}/quote/contractCalls`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(params),
        signal: options?.signal
    });
};
const getStatus = async (params, options)=>{
    if (!params.txHash) {
        throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$SDKError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["SDKError"](new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$errors$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ValidationError"]('Required parameter "txHash" is missing.'));
    }
    const queryParams = new URLSearchParams(params);
    return await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$request$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["request"])(`${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$config$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["config"].get().apiUrl}/status?${queryParams}`, {
        signal: options?.signal
    });
};
const getChains = async (params, options)=>{
    if (params) {
        for (const key of Object.keys(params)){
            if (!params[key]) {
                delete params[key];
            }
        }
    }
    const urlSearchParams = new URLSearchParams(params).toString();
    const response = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$utils$2f$withDedupe$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["withDedupe"])(()=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$request$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["request"])(`${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$config$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["config"].get().apiUrl}/chains?${urlSearchParams}`, {
            signal: options?.signal
        }), {
        id: `${getChains.name}.${urlSearchParams}`
    });
    return response.chains;
};
const getRoutes = async (params, options)=>{
    if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$typeguards$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isRoutesRequest"])(params)) {
        throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$SDKError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["SDKError"](new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$errors$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ValidationError"]('Invalid routes request.'));
    }
    const _config = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$config$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["config"].get();
    // apply defaults
    params.options = {
        integrator: _config.integrator,
        ..._config.routeOptions,
        ...params.options
    };
    return await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$request$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["request"])(`${_config.apiUrl}/advanced/routes`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(params),
        signal: options?.signal
    });
};
const getStepTransaction = async (step, options)=>{
    if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$typeguards$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isStep"])(step)) {
        // While the validation fails for some users we should not enforce it
        console.warn('SDK Validation: Invalid Step', step);
    }
    return await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$request$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["request"])(`${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$config$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["config"].get().apiUrl}/advanced/stepTransaction`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(step),
        signal: options?.signal
    });
};
const getTools = async (params, options)=>{
    if (params) {
        for (const key of Object.keys(params)){
            if (!params[key]) {
                delete params[key];
            }
        }
    }
    return await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$request$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["request"])(`${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$config$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["config"].get().apiUrl}/tools?${new URLSearchParams(params)}`, {
        signal: options?.signal
    });
};
const getTokens = async (params, options)=>{
    if (params) {
        for (const key of Object.keys(params)){
            if (!params[key]) {
                delete params[key];
            }
        }
    }
    const urlSearchParams = new URLSearchParams(params).toString();
    const response = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$utils$2f$withDedupe$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["withDedupe"])(()=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$request$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["request"])(`${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$config$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["config"].get().apiUrl}/tokens?${urlSearchParams}`, {
            signal: options?.signal
        }), {
        id: `${getTokens.name}.${urlSearchParams}`
    });
    return response;
};
const getGasRecommendation = async (params, options)=>{
    if (!params.chainId) {
        throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$SDKError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["SDKError"](new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$errors$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ValidationError"]('Required parameter "chainId" is missing.'));
    }
    const url = new URL(`${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$config$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["config"].get().apiUrl}/gas/suggestion/${params.chainId}`);
    if (params.fromChain) {
        url.searchParams.append('fromChain', params.fromChain);
    }
    if (params.fromToken) {
        url.searchParams.append('fromToken', params.fromToken);
    }
    return await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$request$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["request"])(url.toString(), {
        signal: options?.signal
    });
};
const getConnections = async (connectionRequest, options)=>{
    const url = new URL(`${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$config$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["config"].get().apiUrl}/connections`);
    const { fromChain, fromToken, toChain, toToken } = connectionRequest;
    if (fromChain) {
        url.searchParams.append('fromChain', fromChain);
    }
    if (fromToken) {
        url.searchParams.append('fromToken', fromToken);
    }
    if (toChain) {
        url.searchParams.append('toChain', toChain);
    }
    if (toToken) {
        url.searchParams.append('toToken', toToken);
    }
    const connectionRequestArrayParams = [
        'allowBridges',
        'denyBridges',
        'preferBridges',
        'allowExchanges',
        'denyExchanges',
        'preferExchanges'
    ];
    for (const parameter of connectionRequestArrayParams){
        const connectionRequestArrayParam = connectionRequest[parameter];
        if (connectionRequestArrayParam?.length) {
            for (const value of connectionRequestArrayParam){
                url.searchParams.append(parameter, value);
            }
        }
    }
    return await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$request$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["request"])(url, options);
};
const getTransactionHistory = async ({ wallet, status, fromTimestamp, toTimestamp }, options)=>{
    if (!wallet) {
        throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$SDKError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["SDKError"](new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$errors$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ValidationError"]('Required parameter "wallet" is missing.'));
    }
    const _config = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$config$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["config"].get();
    const url = new URL(`${_config.apiUrl}/analytics/transfers`);
    url.searchParams.append('integrator', _config.integrator);
    url.searchParams.append('wallet', wallet);
    if (status) {
        url.searchParams.append('status', status);
    }
    if (fromTimestamp) {
        url.searchParams.append('fromTimestamp', fromTimestamp.toString());
    }
    if (toTimestamp) {
        url.searchParams.append('toTimestamp', toTimestamp.toString());
    }
    return await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$request$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["request"])(url, options);
}; //# sourceMappingURL=api.js.map
}}),
"[project]/node_modules/@lifi/sdk/src/_esm/createConfig.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "createChainsConfig": (()=>createChainsConfig),
    "createConfig": (()=>createConfig)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$config$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/config.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$helpers$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/helpers.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$version$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/version.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$services$2f$api$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/services/api.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$types$2f$src$2f$_esm$2f$chains$2f$Chain$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/types/src/_esm/chains/Chain.js [app-ssr] (ecmascript)");
;
;
;
;
;
function createBaseConfig(options) {
    if (!options.integrator) {
        throw new Error('Integrator not found. Please see documentation https://docs.li.fi/integrate-li.fi-js-sdk/set-up-the-sdk');
    }
    const _config = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$config$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["config"].set(options);
    if (!options.disableVersionCheck && ("TURBOPACK compile-time value", "development") === 'development') {
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$helpers$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["checkPackageUpdates"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$version$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["name"], __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$version$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["version"]);
    }
    return _config;
}
async function createChainsConfig() {
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$config$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["config"].loading = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$services$2f$api$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getChains"])({
        chainTypes: [
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$types$2f$src$2f$_esm$2f$chains$2f$Chain$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ChainType"].EVM,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$types$2f$src$2f$_esm$2f$chains$2f$Chain$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ChainType"].SVM,
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$types$2f$src$2f$_esm$2f$chains$2f$Chain$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ChainType"].UTXO
        ]
    }).then((chains)=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$config$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["config"].setChains(chains)).catch();
    await __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$config$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["config"].loading;
}
function createConfig(options) {
    const _config = createBaseConfig(options);
    if (_config.preloadChains) {
        createChainsConfig();
    }
    return _config;
} //# sourceMappingURL=createConfig.js.map
}}),
"[project]/node_modules/@lifi/sdk/src/_esm/core/rpc.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "getRpcUrl": (()=>getRpcUrl),
    "getRpcUrls": (()=>getRpcUrls)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$config$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/config.js [app-ssr] (ecmascript)");
;
const getRpcUrl = async (chainId)=>{
    const rpcUrls = await getRpcUrls(chainId);
    return rpcUrls[0];
};
const getRpcUrls = async (chainId)=>{
    const rpcUrls = (await __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$config$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["config"].getRPCUrls())[chainId];
    if (!rpcUrls?.length) {
        throw new Error('RPC URL not found');
    }
    return rpcUrls;
}; //# sourceMappingURL=rpc.js.map
}}),
"[project]/node_modules/@lifi/sdk/src/_esm/core/EVM/publicClient.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "getPublicClient": (()=>getPublicClient)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$rpc$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/core/rpc.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$viem$2f$_esm$2f$clients$2f$transports$2f$http$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/viem/_esm/clients/transports/http.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$viem$2f$_esm$2f$clients$2f$transports$2f$webSocket$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/viem/_esm/clients/transports/webSocket.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$config$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/config.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$types$2f$src$2f$_esm$2f$chains$2f$base$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/types/src/_esm/chains/base.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$viem$2f$_esm$2f$chains$2f$definitions$2f$mainnet$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/viem/_esm/chains/definitions/mainnet.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$viem$2f$_esm$2f$clients$2f$createClient$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/viem/_esm/clients/createClient.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$viem$2f$_esm$2f$clients$2f$transports$2f$fallback$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/viem/_esm/clients/transports/fallback.js [app-ssr] (ecmascript)");
;
;
;
;
;
// cached providers
const publicClients = {};
const getPublicClient = async (chainId)=>{
    if (!publicClients[chainId]) {
        const urls = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$rpc$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getRpcUrls"])(chainId);
        const fallbackTransports = urls.map((url)=>url.startsWith('wss') ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$viem$2f$_esm$2f$clients$2f$transports$2f$webSocket$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["webSocket"])(url) : (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$viem$2f$_esm$2f$clients$2f$transports$2f$http$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["http"])(url, {
                batch: {
                    batchSize: 64
                }
            }));
        const _chain = await __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$config$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["config"].getChainById(chainId);
        const chain = {
            ..._chain,
            ..._chain.metamask,
            name: _chain.metamask.chainName,
            rpcUrls: {
                default: {
                    http: _chain.metamask.rpcUrls
                },
                public: {
                    http: _chain.metamask.rpcUrls
                }
            }
        };
        // Add ENS contracts
        if (chain.id === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$types$2f$src$2f$_esm$2f$chains$2f$base$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ChainId"].ETH) {
            chain.contracts = {
                ...__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$viem$2f$_esm$2f$chains$2f$definitions$2f$mainnet$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["mainnet"].contracts,
                ...chain.contracts
            };
        }
        publicClients[chainId] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$viem$2f$_esm$2f$clients$2f$createClient$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createClient"])({
            chain: chain,
            transport: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$viem$2f$_esm$2f$clients$2f$transports$2f$fallback$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["fallback"])(fallbackTransports),
            batch: {
                multicall: true
            }
        });
    }
    if (!publicClients[chainId]) {
        throw new Error(`Unable to configure provider for chain ${chainId}`);
    }
    return publicClients[chainId];
}; //# sourceMappingURL=publicClient.js.map
}}),
"[project]/node_modules/@lifi/sdk/src/_esm/core/EVM/getENSAddress.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "getENSAddress": (()=>getENSAddress)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$EVM$2f$publicClient$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/core/EVM/publicClient.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$types$2f$src$2f$_esm$2f$chains$2f$base$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/types/src/_esm/chains/base.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$viem$2f$_esm$2f$actions$2f$ens$2f$getEnsAddress$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/viem/_esm/actions/ens/getEnsAddress.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$viem$2f$_esm$2f$utils$2f$ens$2f$normalize$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/viem/_esm/utils/ens/normalize.js [app-ssr] (ecmascript)");
;
;
;
const getENSAddress = async (name)=>{
    try {
        const client = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$EVM$2f$publicClient$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getPublicClient"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$types$2f$src$2f$_esm$2f$chains$2f$base$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ChainId"].ETH);
        const address = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$viem$2f$_esm$2f$actions$2f$ens$2f$getEnsAddress$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getEnsAddress"])(client, {
            name: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$viem$2f$_esm$2f$utils$2f$ens$2f$normalize$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["normalize"])(name)
        });
        return address;
    } catch (_) {
        // ignore
        return;
    }
}; //# sourceMappingURL=getENSAddress.js.map
}}),
"[project]/node_modules/@lifi/sdk/src/_esm/utils/median.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "median": (()=>median)
});
const median = (arr)=>{
    if (!arr.length) {
        return;
    }
    const s = [
        ...arr
    ].sort((a, b)=>a > b ? 1 : a < b ? -1 : 0);
    const mid = Math.floor(s.length / 2);
    if (s.length % 2 === 0) {
        return (s[mid - 1] + s[mid]) / 2n;
    }
    return s[mid];
}; //# sourceMappingURL=median.js.map
}}),
"[project]/node_modules/@lifi/sdk/src/_esm/core/EVM/utils.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "getMaxPriorityFeePerGas": (()=>getMaxPriorityFeePerGas),
    "getMulticallAddress": (()=>getMulticallAddress),
    "retryCount": (()=>retryCount),
    "retryDelay": (()=>retryDelay)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$viem$2f$_esm$2f$actions$2f$public$2f$getBlock$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/viem/_esm/actions/public/getBlock.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$utils$2f$median$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/utils/median.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$config$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/config.js [app-ssr] (ecmascript)");
;
;
;
const getMaxPriorityFeePerGas = async (client)=>{
    const block = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$viem$2f$_esm$2f$actions$2f$public$2f$getBlock$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getBlock"])(client, {
        includeTransactions: true
    });
    const maxPriorityFeePerGasList = block.transactions.filter((tx)=>tx.maxPriorityFeePerGas).map((tx)=>tx.maxPriorityFeePerGas);
    if (!maxPriorityFeePerGasList.length) {
        return;
    }
    let maxPriorityFeePerGasSum = 0n;
    for (const value of maxPriorityFeePerGasList){
        maxPriorityFeePerGasSum += value;
    }
    const maxPriorityFeePerGasMedian = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$utils$2f$median$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["median"])(maxPriorityFeePerGasList) ?? 0n;
    const maxPriorityFeePerGasAvg = maxPriorityFeePerGasSum / BigInt(maxPriorityFeePerGasList.length);
    return maxPriorityFeePerGasMedian > maxPriorityFeePerGasAvg ? maxPriorityFeePerGasAvg : maxPriorityFeePerGasMedian;
};
const getMulticallAddress = async (chainId)=>{
    const chains = await __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$config$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["config"].getChains();
    return chains.find((chain)=>chain.id === chainId)?.multicallAddress;
};
const retryDelay = ({ count })=>Math.min(~~(1 << count) * 200, 3000);
const retryCount = 30; //# sourceMappingURL=utils.js.map
}}),
"[project]/node_modules/@lifi/sdk/src/_esm/constants.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "AddressZero": (()=>AddressZero),
    "AlternativeAddressZero": (()=>AlternativeAddressZero),
    "SolSystemProgram": (()=>SolSystemProgram),
    "wrappedSolAddress": (()=>wrappedSolAddress)
});
const AddressZero = '0x0000000000000000000000000000000000000000';
const AlternativeAddressZero = '0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee';
const wrappedSolAddress = 'So11111111111111111111111111111111111111112';
const SolSystemProgram = '11111111111111111111111111111111'; //# sourceMappingURL=constants.js.map
}}),
"[project]/node_modules/@lifi/sdk/src/_esm/utils/isZeroAddress.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "isNativeTokenAddress": (()=>isNativeTokenAddress),
    "isZeroAddress": (()=>isZeroAddress)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/constants.js [app-ssr] (ecmascript)");
;
const isZeroAddress = (address)=>{
    if (address === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["AddressZero"] || address === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["AlternativeAddressZero"]) {
        return true;
    }
    return false;
};
const isNativeTokenAddress = (address)=>{
    if (address === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["AddressZero"] || address === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["AlternativeAddressZero"] || // CELO native token
    address === '0x471ece3750da237f93b8e339c536989b8978a438') {
        return true;
    }
    return false;
}; //# sourceMappingURL=isZeroAddress.js.map
}}),
"[project]/node_modules/@lifi/sdk/src/_esm/core/EVM/abi.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "allowanceAbi": (()=>allowanceAbi),
    "approveAbi": (()=>approveAbi),
    "balanceOfAbi": (()=>balanceOfAbi),
    "getEthBalanceAbi": (()=>getEthBalanceAbi)
});
const approveAbi = [
    {
        name: 'approve',
        inputs: [
            {
                internalType: 'address',
                name: 'spender',
                type: 'address'
            },
            {
                internalType: 'uint256',
                name: 'amount',
                type: 'uint256'
            }
        ],
        outputs: [
            {
                internalType: 'bool',
                name: 'approved',
                type: 'bool'
            }
        ],
        stateMutability: 'nonpayable',
        type: 'function'
    }
];
const allowanceAbi = [
    {
        name: 'allowance',
        inputs: [
            {
                internalType: 'address',
                name: 'owner',
                type: 'address'
            },
            {
                internalType: 'address',
                name: 'spender',
                type: 'address'
            }
        ],
        outputs: [
            {
                internalType: 'uint256',
                name: 'allowance',
                type: 'uint256'
            }
        ],
        stateMutability: 'view',
        type: 'function'
    }
];
const getEthBalanceAbi = [
    {
        inputs: [
            {
                name: '_owner',
                type: 'address'
            }
        ],
        name: 'getEthBalance',
        outputs: [
            {
                name: 'balance',
                type: 'uint256'
            }
        ],
        type: 'function',
        stateMutability: 'view'
    }
];
const balanceOfAbi = [
    {
        inputs: [
            {
                name: '_owner',
                type: 'address'
            }
        ],
        name: 'balanceOf',
        outputs: [
            {
                name: 'balance',
                type: 'uint256'
            }
        ],
        type: 'function',
        stateMutability: 'view'
    }
]; //# sourceMappingURL=abi.js.map
}}),
"[project]/node_modules/@lifi/sdk/src/_esm/core/EVM/getEVMBalance.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "getEVMBalance": (()=>getEVMBalance)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$EVM$2f$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/core/EVM/utils.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$EVM$2f$publicClient$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/core/EVM/publicClient.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$utils$2f$isZeroAddress$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/utils/isZeroAddress.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$EVM$2f$abi$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/core/EVM/abi.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$viem$2f$_esm$2f$actions$2f$public$2f$getBlockNumber$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/viem/_esm/actions/public/getBlockNumber.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$viem$2f$_esm$2f$actions$2f$public$2f$multicall$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/viem/_esm/actions/public/multicall.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$viem$2f$_esm$2f$actions$2f$public$2f$readContract$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/viem/_esm/actions/public/readContract.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$viem$2f$_esm$2f$actions$2f$public$2f$getBalance$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/viem/_esm/actions/public/getBalance.js [app-ssr] (ecmascript)");
;
;
;
;
;
const getEVMBalance = async (walletAddress, tokens)=>{
    if (tokens.length === 0) {
        return [];
    }
    const { chainId } = tokens[0];
    for (const token of tokens){
        if (token.chainId !== chainId) {
            console.warn('Requested tokens have to be on the same chain.');
        }
    }
    const multicallAddress = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$EVM$2f$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getMulticallAddress"])(chainId);
    if (multicallAddress && tokens.length > 1) {
        return getEVMBalanceMulticall(chainId, tokens, walletAddress, multicallAddress);
    }
    return getEVMBalanceDefault(chainId, tokens, walletAddress);
};
const getEVMBalanceMulticall = async (chainId, tokens, walletAddress, multicallAddress)=>{
    const client = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$EVM$2f$publicClient$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getPublicClient"])(chainId);
    const contracts = tokens.map((token)=>{
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$utils$2f$isZeroAddress$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isZeroAddress"])(token.address)) {
            return {
                address: multicallAddress,
                abi: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$EVM$2f$abi$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getEthBalanceAbi"],
                functionName: 'getEthBalance',
                args: [
                    walletAddress
                ]
            };
        }
        return {
            address: token.address,
            abi: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$EVM$2f$abi$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["balanceOfAbi"],
            functionName: 'balanceOf',
            args: [
                walletAddress
            ]
        };
    });
    const blockNumber = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$viem$2f$_esm$2f$actions$2f$public$2f$getBlockNumber$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getBlockNumber"])(client);
    const results = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$viem$2f$_esm$2f$actions$2f$public$2f$multicall$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["multicall"])(client, {
        contracts,
        multicallAddress: multicallAddress,
        blockNumber
    });
    if (!results.length) {
        return [];
    }
    return tokens.map((token, i)=>{
        return {
            ...token,
            amount: results[i].result,
            blockNumber
        };
    });
};
const getEVMBalanceDefault = async (chainId, tokens, walletAddress)=>{
    const client = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$EVM$2f$publicClient$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getPublicClient"])(chainId);
    const blockNumber = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$viem$2f$_esm$2f$actions$2f$public$2f$getBlockNumber$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getBlockNumber"])(client);
    const queue = tokens.map((token)=>{
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$utils$2f$isZeroAddress$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isZeroAddress"])(token.address)) {
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$viem$2f$_esm$2f$actions$2f$public$2f$getBalance$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getBalance"])(client, {
                address: walletAddress
            });
        }
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$viem$2f$_esm$2f$actions$2f$public$2f$readContract$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["readContract"])(client, {
            address: token.address,
            abi: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$EVM$2f$abi$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["balanceOfAbi"],
            functionName: 'balanceOf',
            args: [
                walletAddress
            ]
        });
    });
    const results = await Promise.allSettled(queue);
    const tokenAmounts = tokens.map((token, index)=>{
        const result = results[index];
        if (result.status === 'rejected') {
            return {
                ...token,
                blockNumber
            };
        }
        return {
            ...token,
            amount: result.value,
            blockNumber
        };
    });
    return tokenAmounts;
}; //# sourceMappingURL=getEVMBalance.js.map
}}),
"[project]/node_modules/@lifi/sdk/src/_esm/core/EVM/switchChain.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "switchChain": (()=>switchChain)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$viem$2f$_esm$2f$utils$2f$getAction$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/viem/_esm/utils/getAction.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$viem$2f$_esm$2f$actions$2f$public$2f$getChainId$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/viem/_esm/actions/public/getChainId.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$errors$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/errors/errors.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/errors/constants.js [app-ssr] (ecmascript)");
;
;
;
;
const switchChain = async (client, statusManager, step, allowUserInteraction, switchChainHook)=>{
    // if we are already on the correct chain we can proceed directly
    const currentChainId = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$viem$2f$_esm$2f$utils$2f$getAction$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getAction"])(client, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$viem$2f$_esm$2f$actions$2f$public$2f$getChainId$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getChainId"], 'getChainId')(undefined);
    if (currentChainId === step.action.fromChainId) {
        return client;
    }
    // -> set status message
    step.execution = statusManager.initExecutionObject(step);
    statusManager.updateExecution(step, 'ACTION_REQUIRED');
    let switchProcess = statusManager.findOrCreateProcess({
        step,
        type: 'SWITCH_CHAIN',
        status: 'ACTION_REQUIRED'
    });
    if (!allowUserInteraction) {
        return;
    }
    try {
        const updatedClient = await switchChainHook?.(step.action.fromChainId);
        let updatedChainId;
        if (updatedClient) {
            updatedChainId = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$viem$2f$_esm$2f$utils$2f$getAction$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getAction"])(updatedClient, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$viem$2f$_esm$2f$actions$2f$public$2f$getChainId$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getChainId"], 'getChainId')(undefined);
        }
        if (updatedChainId !== step.action.fromChainId) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$errors$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ProviderError"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["LiFiErrorCode"].ChainSwitchError, 'Chain switch required.');
        }
        switchProcess = statusManager.updateProcess(step, switchProcess.type, 'DONE');
        statusManager.updateExecution(step, 'PENDING');
        return updatedClient;
    } catch (error) {
        statusManager.updateProcess(step, switchProcess.type, 'FAILED', {
            error: {
                message: error.message,
                code: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["LiFiErrorCode"].ChainSwitchError
            }
        });
        statusManager.updateExecution(step, 'FAILED');
        throw error;
    }
}; //# sourceMappingURL=switchChain.js.map
}}),
"[project]/node_modules/@lifi/sdk/src/_esm/core/EVM/parseEVMErrors.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "parseEVMErrors": (()=>parseEVMErrors)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$SDKError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/errors/SDKError.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/errors/constants.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$helpers$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/helpers.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$errors$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/errors/errors.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$baseError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/errors/baseError.js [app-ssr] (ecmascript)");
;
;
;
;
;
const parseEVMErrors = async (e, step, process)=>{
    if (e instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$SDKError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["SDKError"]) {
        e.step = e.step ?? step;
        e.process = e.process ?? process;
        return e;
    }
    const baseError = await handleSpecificErrors(e, step, process);
    return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$SDKError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["SDKError"](baseError, step, process);
};
const handleSpecificErrors = async (e, step, process)=>{
    if (e.cause?.name === 'UserRejectedRequestError') {
        return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$errors$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["TransactionError"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["LiFiErrorCode"].SignatureRejected, e.message, e);
    }
    if (step && process?.txHash && e.code === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["LiFiErrorCode"].TransactionFailed && e.message === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ErrorMessage"].TransactionReverted) {
        const response = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$helpers$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["fetchTxErrorDetails"])(process.txHash, step.action.fromChainId);
        const errorMessage = response?.error_message;
        if (errorMessage?.toLowerCase().includes('out of gas')) {
            return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$errors$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["TransactionError"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["LiFiErrorCode"].GasLimitError, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ErrorMessage"].GasLimitLow, e);
        }
    }
    if (e instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$baseError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["BaseError"]) {
        return e;
    }
    return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$errors$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["UnknownError"](e.message || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ErrorMessage"].UnknownError, e);
}; //# sourceMappingURL=parseEVMErrors.js.map
}}),
"[project]/node_modules/@lifi/sdk/src/_esm/core/EVM/getAllowance.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "getAllowance": (()=>getAllowance),
    "getAllowanceMulticall": (()=>getAllowanceMulticall),
    "getTokenAllowance": (()=>getTokenAllowance),
    "getTokenAllowanceMulticall": (()=>getTokenAllowanceMulticall)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$EVM$2f$publicClient$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/core/EVM/publicClient.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$viem$2f$_esm$2f$actions$2f$public$2f$readContract$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/viem/_esm/actions/public/readContract.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$EVM$2f$abi$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/core/EVM/abi.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$EVM$2f$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/core/EVM/utils.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$viem$2f$_esm$2f$actions$2f$public$2f$multicall$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/viem/_esm/actions/public/multicall.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$utils$2f$isZeroAddress$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/utils/isZeroAddress.js [app-ssr] (ecmascript)");
;
;
;
;
;
const getAllowance = async (chainId, tokenAddress, ownerAddress, spenderAddress)=>{
    const client = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$EVM$2f$publicClient$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getPublicClient"])(chainId);
    try {
        const approved = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$viem$2f$_esm$2f$actions$2f$public$2f$readContract$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["readContract"])(client, {
            address: tokenAddress,
            abi: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$EVM$2f$abi$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["allowanceAbi"],
            functionName: 'allowance',
            args: [
                ownerAddress,
                spenderAddress
            ]
        });
        return approved;
    } catch (_e) {
        return 0n;
    }
};
const getAllowanceMulticall = async (chainId, tokens, ownerAddress)=>{
    if (!tokens.length) {
        return [];
    }
    const multicallAddress = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$EVM$2f$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getMulticallAddress"])(chainId);
    if (!multicallAddress) {
        throw new Error(`No multicall address configured for chainId ${chainId}.`);
    }
    const client = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$EVM$2f$publicClient$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getPublicClient"])(chainId);
    const contracts = tokens.map((token)=>({
            address: token.token.address,
            abi: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$EVM$2f$abi$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["allowanceAbi"],
            functionName: 'allowance',
            args: [
                ownerAddress,
                token.spenderAddress
            ]
        }));
    const results = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$viem$2f$_esm$2f$actions$2f$public$2f$multicall$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["multicall"])(client, {
        contracts,
        multicallAddress: multicallAddress
    });
    if (!results.length) {
        throw new Error(`Couldn't load allowance from chainId ${chainId} using multicall.`);
    }
    return tokens.map(({ token, spenderAddress }, i)=>({
            token,
            spenderAddress,
            allowance: results[i].result
        }));
};
const getTokenAllowance = async (token, ownerAddress, spenderAddress)=>{
    // native token don't need approval
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$utils$2f$isZeroAddress$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isNativeTokenAddress"])(token.address)) {
        return;
    }
    const approved = await getAllowance(token.chainId, token.address, ownerAddress, spenderAddress);
    return approved;
};
const getTokenAllowanceMulticall = async (ownerAddress, tokens)=>{
    // filter out native tokens
    const filteredTokens = tokens.filter(({ token })=>!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$utils$2f$isZeroAddress$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isNativeTokenAddress"])(token.address));
    // group by chain
    const tokenDataByChain = {};
    for (const data of filteredTokens){
        if (!tokenDataByChain[data.token.chainId]) {
            tokenDataByChain[data.token.chainId] = [];
        }
        tokenDataByChain[data.token.chainId].push(data);
    }
    const chainKeys = Object.keys(tokenDataByChain).map(Number.parseInt);
    const allowances = (await Promise.all(chainKeys.map(async (chainId)=>{
        // get allowances for current chain and token list
        return getAllowanceMulticall(chainId, tokenDataByChain[chainId], ownerAddress);
    }))).flat();
    return allowances;
}; //# sourceMappingURL=getAllowance.js.map
}}),
"[project]/node_modules/@lifi/sdk/src/_esm/core/EVM/setAllowance.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "revokeTokenApproval": (()=>revokeTokenApproval),
    "setAllowance": (()=>setAllowance),
    "setTokenAllowance": (()=>setTokenAllowance)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$viem$2f$_esm$2f$utils$2f$abi$2f$encodeFunctionData$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/viem/_esm/utils/abi/encodeFunctionData.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$EVM$2f$abi$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/core/EVM/abi.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$EVM$2f$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/core/EVM/utils.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$viem$2f$_esm$2f$utils$2f$getAction$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/viem/_esm/utils/getAction.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$viem$2f$_esm$2f$actions$2f$wallet$2f$sendTransaction$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/viem/_esm/actions/wallet/sendTransaction.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$utils$2f$isZeroAddress$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/utils/isZeroAddress.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$EVM$2f$getAllowance$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/core/EVM/getAllowance.js [app-ssr] (ecmascript)");
;
;
;
;
;
;
;
const setAllowance = async (client, tokenAddress, contractAddress, amount, settings, returnPopulatedTransaction)=>{
    const data = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$viem$2f$_esm$2f$utils$2f$abi$2f$encodeFunctionData$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["encodeFunctionData"])({
        abi: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$EVM$2f$abi$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["approveAbi"],
        functionName: 'approve',
        args: [
            contractAddress,
            amount
        ]
    });
    if (returnPopulatedTransaction) {
        return data;
    }
    let transactionRequest = {
        to: tokenAddress,
        data,
        maxPriorityFeePerGas: client.account?.type === 'local' ? await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$EVM$2f$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getMaxPriorityFeePerGas"])(client) : undefined
    };
    if (settings?.updateTransactionRequestHook) {
        const customizedTransactionRequest = await settings.updateTransactionRequestHook({
            requestType: 'approve',
            ...transactionRequest
        });
        transactionRequest = {
            ...transactionRequest,
            ...customizedTransactionRequest
        };
    }
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$viem$2f$_esm$2f$utils$2f$getAction$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getAction"])(client, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$viem$2f$_esm$2f$actions$2f$wallet$2f$sendTransaction$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["sendTransaction"], 'sendTransaction')({
        to: transactionRequest.to,
        account: client.account,
        data: transactionRequest.data,
        gas: transactionRequest.gas,
        gasPrice: transactionRequest.gasPrice,
        maxFeePerGas: transactionRequest.maxFeePerGas,
        maxPriorityFeePerGas: transactionRequest.maxPriorityFeePerGas,
        chain: null
    });
};
const setTokenAllowance = async ({ walletClient, token, spenderAddress, amount })=>{
    // native token don't need approval
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$utils$2f$isZeroAddress$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isNativeTokenAddress"])(token.address)) {
        return;
    }
    const approvedAmount = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$EVM$2f$getAllowance$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getAllowance"])(token.chainId, token.address, walletClient.account.address, spenderAddress);
    if (amount > approvedAmount) {
        const approveTx = await setAllowance(walletClient, token.address, spenderAddress, amount);
        return approveTx;
    }
};
const revokeTokenApproval = async ({ walletClient, token, spenderAddress })=>{
    // native token don't need approval
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$utils$2f$isZeroAddress$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isNativeTokenAddress"])(token.address)) {
        return;
    }
    const approvedAmount = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$EVM$2f$getAllowance$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getAllowance"])(token.chainId, token.address, walletClient.account.address, spenderAddress);
    if (approvedAmount > 0) {
        const approveTx = await setAllowance(walletClient, token.address, spenderAddress, 0n);
        return approveTx;
    }
}; //# sourceMappingURL=setAllowance.js.map
}}),
"[project]/node_modules/@lifi/sdk/src/_esm/core/EVM/waitForTransactionReceipt.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "waitForTransactionReceipt": (()=>waitForTransactionReceipt)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$EVM$2f$publicClient$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/core/EVM/publicClient.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$errors$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/errors/errors.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/errors/constants.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$viem$2f$_esm$2f$actions$2f$public$2f$waitForTransactionReceipt$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/viem/_esm/actions/public/waitForTransactionReceipt.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$EVM$2f$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/core/EVM/utils.js [app-ssr] (ecmascript)");
;
;
;
;
;
async function waitForTransactionReceipt({ client, chainId, txHash, onReplaced }) {
    let { transactionReceipt, replacementReason } = await waitForReceipt(client, txHash, onReplaced);
    if (!transactionReceipt?.status) {
        const publicClient = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$EVM$2f$publicClient$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getPublicClient"])(chainId);
        const result = await waitForReceipt(publicClient, txHash, onReplaced);
        transactionReceipt = result.transactionReceipt;
        replacementReason = result.replacementReason;
    }
    if (transactionReceipt?.status === 'reverted') {
        throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$errors$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["TransactionError"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["LiFiErrorCode"].TransactionFailed, 'Transaction was reverted.');
    }
    if (replacementReason === 'cancelled') {
        throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$errors$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["TransactionError"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["LiFiErrorCode"].TransactionCanceled, 'User canceled transaction.');
    }
    return transactionReceipt;
}
async function waitForReceipt(client, txHash, onReplaced) {
    let replacementReason;
    let transactionReceipt;
    try {
        transactionReceipt = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$viem$2f$_esm$2f$actions$2f$public$2f$waitForTransactionReceipt$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["waitForTransactionReceipt"])(client, {
            hash: txHash,
            onReplaced: (response)=>{
                replacementReason = response.reason;
                onReplaced?.(response);
            },
            retryCount: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$EVM$2f$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["retryCount"],
            retryDelay: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$EVM$2f$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["retryDelay"]
        });
    } catch  {
    // We can ignore errors from waitForTransactionReceipt as we have a status check fallback
    }
    return {
        transactionReceipt,
        replacementReason
    };
} //# sourceMappingURL=waitForTransactionReceipt.js.map
}}),
"[project]/node_modules/@lifi/sdk/src/_esm/core/EVM/checkAllowance.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "checkAllowance": (()=>checkAllowance)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$EVM$2f$getAllowance$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/core/EVM/getAllowance.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$EVM$2f$setAllowance$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/core/EVM/setAllowance.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$EVM$2f$parseEVMErrors$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/core/EVM/parseEVMErrors.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$EVM$2f$waitForTransactionReceipt$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/core/EVM/waitForTransactionReceipt.js [app-ssr] (ecmascript)");
;
;
;
;
const checkAllowance = async (client, chain, step, statusManager, settings, allowUserInteraction = false, shouldBatchTransactions = false)=>{
    // Ask the user to set an allowance
    let allowanceProcess = statusManager.findOrCreateProcess({
        step,
        type: 'TOKEN_ALLOWANCE',
        chainId: step.action.fromChainId
    });
    // Check allowance
    try {
        if (allowanceProcess.txHash && allowanceProcess.status !== 'DONE') {
            await waitForApprovalTransaction(client, allowanceProcess.txHash, allowanceProcess.type, step, chain, statusManager);
        } else {
            allowanceProcess = statusManager.updateProcess(step, allowanceProcess.type, 'STARTED');
            const approved = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$EVM$2f$getAllowance$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getAllowance"])(chain.id, step.action.fromToken.address, client.account.address, step.estimate.approvalAddress);
            const fromAmount = BigInt(step.action.fromAmount);
            if (fromAmount > approved) {
                if (!allowUserInteraction) {
                    return;
                }
                if (shouldBatchTransactions) {
                    const approveTxHash = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$EVM$2f$setAllowance$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["setAllowance"])(client, step.action.fromToken.address, step.estimate.approvalAddress, fromAmount, settings, true);
                    allowanceProcess = statusManager.updateProcess(step, allowanceProcess.type, 'DONE');
                    return approveTxHash;
                }
                const approveTxHash = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$EVM$2f$setAllowance$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["setAllowance"])(client, step.action.fromToken.address, step.estimate.approvalAddress, fromAmount);
                await waitForApprovalTransaction(client, approveTxHash, allowanceProcess.type, step, chain, statusManager);
            } else {
                allowanceProcess = statusManager.updateProcess(step, allowanceProcess.type, 'DONE');
            }
        }
    } catch (e) {
        const error = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$EVM$2f$parseEVMErrors$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["parseEVMErrors"])(e, step, allowanceProcess);
        allowanceProcess = statusManager.updateProcess(step, allowanceProcess.type, 'FAILED', {
            error: {
                message: error.cause.message,
                code: error.code
            }
        });
        statusManager.updateExecution(step, 'FAILED');
        throw error;
    }
};
const waitForApprovalTransaction = async (client, txHash, processType, step, chain, statusManager)=>{
    statusManager.updateProcess(step, processType, 'PENDING', {
        txHash,
        txLink: `${chain.metamask.blockExplorerUrls[0]}tx/${txHash}`
    });
    const transactionReceipt = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$EVM$2f$waitForTransactionReceipt$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["waitForTransactionReceipt"])({
        client: client,
        chainId: chain.id,
        txHash: txHash,
        onReplaced (response) {
            statusManager.updateProcess(step, processType, 'PENDING', {
                txHash: response.transaction.hash,
                txLink: `${chain.metamask.blockExplorerUrls[0]}tx/${response.transaction.hash}`
            });
        }
    });
    const transactionHash = transactionReceipt?.transactionHash || txHash;
    statusManager.updateProcess(step, processType, 'DONE', {
        txHash: transactionHash,
        txLink: `${chain.metamask.blockExplorerUrls[0]}tx/${transactionHash}`
    });
}; //# sourceMappingURL=checkAllowance.js.map
}}),
"[project]/node_modules/@lifi/sdk/src/_esm/core/EVM/multisig.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "updateMultisigRouteProcess": (()=>updateMultisigRouteProcess)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$errors$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/errors/errors.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/errors/constants.js [app-ssr] (ecmascript)");
;
;
const updateMultisigRouteProcess = async (internalTxHash, step, processType, fromChain, statusManager, multisig)=>{
    if (!multisig?.getMultisigTransactionDetails) {
        throw new Error('getMultisigTransactionDetails is missing in multisig config.');
    }
    const updateIntermediateMultisigStatus = ()=>{
        statusManager.updateProcess(step, processType, 'PENDING');
    };
    const multisigStatusResponse = await multisig?.getMultisigTransactionDetails(internalTxHash, fromChain.id, updateIntermediateMultisigStatus);
    if (multisigStatusResponse.status === 'DONE') {
        statusManager.updateProcess(step, processType, 'PENDING', {
            txHash: multisigStatusResponse.txHash,
            multisigTxHash: undefined,
            txLink: `${fromChain.metamask.blockExplorerUrls[0]}tx/${multisigStatusResponse.txHash}`
        });
    }
    if (multisigStatusResponse.status === 'FAILED') {
        throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$errors$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["TransactionError"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["LiFiErrorCode"].TransactionFailed, 'Multisig transaction failed.');
    }
    if (multisigStatusResponse.status === 'CANCELLED') {
        throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$errors$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["TransactionError"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["LiFiErrorCode"].SignatureRejected, 'Transaction was rejected by user.');
    }
}; //# sourceMappingURL=multisig.js.map
}}),
"[project]/node_modules/@lifi/sdk/src/_esm/services/balance.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "getTokenBalance": (()=>getTokenBalance),
    "getTokenBalances": (()=>getTokenBalances),
    "getTokenBalancesByChain": (()=>getTokenBalancesByChain)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$errors$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/errors/errors.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$typeguards$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/typeguards.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$config$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/config.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$types$2f$src$2f$_esm$2f$chains$2f$Chain$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/types/src/_esm/chains/Chain.js [app-ssr] (ecmascript)");
;
;
;
;
const getTokenBalance = async (walletAddress, token)=>{
    const tokenAmounts = await getTokenBalances(walletAddress, [
        token
    ]);
    return tokenAmounts.length ? tokenAmounts[0] : null;
};
const getTokenBalances = async (walletAddress, tokens)=>{
    // split by chain
    const tokensByChain = tokens.reduce((tokens, token)=>{
        if (!tokens[token.chainId]) {
            tokens[token.chainId] = [];
        }
        tokens[token.chainId].push(token);
        return tokens;
    }, {});
    const tokenAmountsByChain = await getTokenBalancesByChain(walletAddress, tokensByChain);
    return Object.values(tokenAmountsByChain).flat();
};
const getTokenBalancesByChain = async (walletAddress, tokensByChain)=>{
    if (!walletAddress) {
        throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$errors$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ValidationError"]('Missing walletAddress.');
    }
    const tokenList = Object.values(tokensByChain).flat();
    const invalidTokens = tokenList.filter((token)=>!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$typeguards$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isToken"])(token));
    if (invalidTokens.length) {
        throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$errors$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ValidationError"]('Invalid tokens passed.');
    }
    const tokenAmountsByChain = {};
    const tokenAmountsSettled = await Promise.allSettled(Object.keys(tokensByChain).map(async (chainIdStr)=>{
        const chainId = Number.parseInt(chainIdStr);
        const chain = await __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$config$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["config"].getChainById(chainId);
        const tokenAddress = tokensByChain[chainId][0].address;
        const provider = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$config$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["config"].get().providers.find((provider)=>chain.chainType === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$types$2f$src$2f$_esm$2f$chains$2f$Chain$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ChainType"].UTXO ? provider.isAddress(walletAddress) : provider.isAddress(tokenAddress));
        if (!provider) {
            throw new Error(`SDK Token Provider for ${chain.chainType} is not found.`);
        }
        const tokenAmounts = await provider.getBalance(walletAddress, tokensByChain[chainId]);
        tokenAmountsByChain[chainId] = tokenAmounts;
    }));
    if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$config$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["config"].get().debug) {
        for (const result of tokenAmountsSettled){
            if (result.status === 'rejected') {
                console.warn("Couldn't fetch token balance.", result.reason);
            }
        }
    }
    return tokenAmountsByChain;
}; //# sourceMappingURL=balance.js.map
}}),
"[project]/node_modules/@lifi/sdk/src/_esm/core/checkBalance.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "checkBalance": (()=>checkBalance)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$services$2f$balance$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/services/balance.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$utils$2f$sleep$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/utils/sleep.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$viem$2f$_esm$2f$utils$2f$unit$2f$formatUnits$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/viem/_esm/utils/unit/formatUnits.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$errors$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/errors/errors.js [app-ssr] (ecmascript)");
;
;
;
;
const checkBalance = async (walletAddress, step, depth = 0)=>{
    const token = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$services$2f$balance$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getTokenBalance"])(walletAddress, step.action.fromToken);
    if (token) {
        const currentBalance = token.amount ?? 0n;
        const neededBalance = BigInt(step.action.fromAmount);
        if (currentBalance < neededBalance) {
            if (depth <= 3) {
                await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$utils$2f$sleep$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["sleep"])(200);
                await checkBalance(walletAddress, step, depth + 1);
            } else if (neededBalance * BigInt((1 - step.action.slippage) * 1_000_000_000) / 1000000000n <= currentBalance) {
                // adjust amount in slippage limits
                step.action.fromAmount = currentBalance.toString();
            } else {
                const neeeded = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$viem$2f$_esm$2f$utils$2f$unit$2f$formatUnits$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["formatUnits"])(neededBalance, token.decimals);
                const current = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$viem$2f$_esm$2f$utils$2f$unit$2f$formatUnits$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["formatUnits"])(currentBalance, token.decimals);
                let _errorMessage = `Your ${token.symbol} balance is too low, you try to transfer ${neeeded} ${token.symbol}, but your wallet only holds ${current} ${token.symbol}. No funds have been sent.`;
                if (currentBalance !== 0n) {
                    _errorMessage += `If the problem consists, please delete this transfer and start a new one with a maximum of ${current} ${token.symbol}.`;
                }
                throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$errors$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["BalanceError"]('The balance is too low.');
            }
        }
    }
}; //# sourceMappingURL=checkBalance.js.map
}}),
"[project]/node_modules/@lifi/sdk/src/_esm/core/utils.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * Used to check if changed exchange rate is in the range of slippage threshold.
 * We use a slippage value as a threshold to trigger the rate change hook.
 * This can result in almost doubled slippage for the user and need to be revisited.
 * @param oldStep - old step
 * @param newStep - new step
 * @returns Boolean
 */ __turbopack_esm__({
    "checkStepSlippageThreshold": (()=>checkStepSlippageThreshold)
});
function checkStepSlippageThreshold(oldStep, newStep) {
    const setSlippage = oldStep.action.slippage;
    const oldEstimatedToAmount = BigInt(oldStep.estimate.toAmountMin);
    const newEstimatedToAmount = BigInt(newStep.estimate.toAmountMin);
    const amountDifference = oldEstimatedToAmount - newEstimatedToAmount;
    // oldEstimatedToAmount can be 0 when we use contract calls
    let actualSlippage = 0;
    if (oldEstimatedToAmount > 0) {
        actualSlippage = Number(amountDifference * 1000000000n / oldEstimatedToAmount) / 1_000_000_000;
    }
    return actualSlippage <= setSlippage;
} //# sourceMappingURL=utils.js.map
}}),
"[project]/node_modules/@lifi/sdk/src/_esm/core/stepComparison.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "stepComparison": (()=>stepComparison)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/core/utils.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$errors$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/errors/errors.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/errors/constants.js [app-ssr] (ecmascript)");
;
;
;
const stepComparison = async (statusManager, oldStep, newStep, allowUserInteraction, executionOptions)=>{
    // Check if changed exchange rate is in the range of slippage threshold
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["checkStepSlippageThreshold"])(oldStep, newStep)) {
        return statusManager.updateStepInRoute(newStep);
    }
    let allowStepUpdate;
    if (allowUserInteraction) {
        allowStepUpdate = await executionOptions?.acceptExchangeRateUpdateHook?.({
            oldToAmount: oldStep.estimate.toAmount,
            newToAmount: newStep.estimate.toAmount,
            toToken: newStep.action.toToken
        });
    }
    if (!allowStepUpdate) {
        // The user declined the new exchange rate, so we are not going to proceed
        throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$errors$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["TransactionError"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["LiFiErrorCode"].ExchangeRateUpdateCanceled, 'Exchange rate has changed!\nTransaction was not sent, your funds are still in your wallet.\nThe exchange rate has changed and the previous estimation can not be fulfilled due to value loss.');
    }
    return statusManager.updateStepInRoute(newStep);
}; //# sourceMappingURL=stepComparison.js.map
}}),
"[project]/node_modules/@lifi/sdk/src/_esm/core/processMessages.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "getProcessMessage": (()=>getProcessMessage),
    "getSubstatusMessage": (()=>getSubstatusMessage)
});
const processMessages = {
    TOKEN_ALLOWANCE: {
        STARTED: 'Setting token allowance.',
        PENDING: 'Waiting for token allowance.',
        DONE: 'Token allowance set.'
    },
    SWITCH_CHAIN: {
        PENDING: 'Chain switch required.',
        DONE: 'Chain switched successfully.'
    },
    SWAP: {
        STARTED: 'Preparing swap transaction.',
        ACTION_REQUIRED: 'Please sign the transaction.',
        PENDING: 'Waiting for swap transaction.',
        DONE: 'Swap completed.'
    },
    CROSS_CHAIN: {
        STARTED: 'Preparing bridge transaction.',
        ACTION_REQUIRED: 'Please sign the transaction.',
        PENDING: 'Waiting for bridge transaction.',
        DONE: 'Bridge transaction confirmed.'
    },
    RECEIVING_CHAIN: {
        PENDING: 'Waiting for destination chain.',
        DONE: 'Bridge completed.'
    },
    TRANSACTION: {}
};
const substatusMessages = {
    PENDING: {
        BRIDGE_NOT_AVAILABLE: 'Bridge communication is temporarily unavailable.',
        CHAIN_NOT_AVAILABLE: 'RPC communication is temporarily unavailable.',
        UNKNOWN_ERROR: 'An unexpected error occurred. Please seek assistance in the LI.FI discord server.',
        WAIT_SOURCE_CONFIRMATIONS: 'The bridge deposit has been received. The bridge is waiting for more confirmations to start the off-chain logic.',
        WAIT_DESTINATION_TRANSACTION: 'The bridge off-chain logic is being executed. Wait for the transaction to appear on the destination chain.'
    },
    DONE: {
        PARTIAL: 'Some of the received tokens are not the requested destination tokens.',
        REFUNDED: 'The tokens were refunded to the sender address.',
        COMPLETED: 'The transfer is complete.'
    },
    FAILED: {},
    INVALID: {},
    NOT_FOUND: {}
};
function getProcessMessage(type, status) {
    const processMessage = processMessages[type][status];
    return processMessage;
}
function getSubstatusMessage(status, substatus) {
    if (!substatus) {
        return;
    }
    const message = substatusMessages[status][substatus];
    return message;
} //# sourceMappingURL=processMessages.js.map
}}),
"[project]/node_modules/@lifi/sdk/src/_esm/utils/waitForResult.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "waitForResult": (()=>waitForResult)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$utils$2f$sleep$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/utils/sleep.js [app-ssr] (ecmascript)");
;
const waitForResult = async (fn, interval = 5000)=>{
    let result;
    while(!result){
        result = await fn();
        if (!result) {
            await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$utils$2f$sleep$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["sleep"])(interval);
        }
    }
    return result;
}; //# sourceMappingURL=waitForResult.js.map
}}),
"[project]/node_modules/@lifi/sdk/src/_esm/core/waitForReceivingTransaction.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "waitForReceivingTransaction": (()=>waitForReceivingTransaction)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$services$2f$api$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/services/api.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$processMessages$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/core/processMessages.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$utils$2f$waitForResult$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/utils/waitForResult.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$errors$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/errors/errors.js [app-ssr] (ecmascript)");
;
;
;
;
const TRANSACTION_HASH_OBSERVERS = {};
async function waitForReceivingTransaction(txHash, statusManager, processType, step, interval = 5_000) {
    const _getStatus = ()=>{
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$services$2f$api$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getStatus"])({
            fromChain: step.action.fromChainId,
            toChain: step.action.toChainId,
            txHash,
            ...step.tool !== 'custom' && {
                bridge: step.tool
            }
        }).then((statusResponse)=>{
            switch(statusResponse.status){
                case 'DONE':
                    return statusResponse;
                case 'PENDING':
                    statusManager?.updateProcess(step, processType, 'PENDING', {
                        substatus: statusResponse.substatus,
                        substatusMessage: statusResponse.substatusMessage || (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$processMessages$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getSubstatusMessage"])(statusResponse.status, statusResponse.substatus),
                        txLink: statusResponse.bridgeExplorerLink
                    });
                    return undefined;
                case 'NOT_FOUND':
                    return undefined;
                default:
                    return Promise.reject();
            }
        }).catch((e)=>{
            console.debug('Fetching status from backend failed.', e);
            return undefined;
        });
    };
    let status = TRANSACTION_HASH_OBSERVERS[txHash];
    if (!status) {
        status = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$utils$2f$waitForResult$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["waitForResult"])(_getStatus, interval);
        TRANSACTION_HASH_OBSERVERS[txHash] = status;
    }
    const resolvedStatus = await status;
    if (!('receiving' in resolvedStatus)) {
        throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$errors$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ServerError"]("Status doesn't contain receiving information.");
    }
    return resolvedStatus;
} //# sourceMappingURL=waitForReceivingTransaction.js.map
}}),
"[project]/node_modules/@lifi/sdk/src/_esm/utils/getTransactionMessage.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "getTransactionFailedMessage": (()=>getTransactionFailedMessage),
    "getTransactionNotSentMessage": (()=>getTransactionNotSentMessage)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$config$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/config.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$viem$2f$_esm$2f$utils$2f$unit$2f$formatUnits$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/viem/_esm/utils/unit/formatUnits.js [app-ssr] (ecmascript)");
;
;
const getTransactionNotSentMessage = async (step, process)=>{
    let transactionNotSend = 'Transaction was not sent, your funds are still in your wallet';
    // add information about funds if available
    if (step) {
        const chain = await __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$config$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["config"].getChainById(step.action.fromChainId);
        transactionNotSend += ` (${(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$viem$2f$_esm$2f$utils$2f$unit$2f$formatUnits$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["formatUnits"])(BigInt(step.action.fromAmount), step.action.fromToken.decimals)} ${step.action.fromToken.symbol} on ${chain.name})`;
    }
    transactionNotSend += ", please retry.<br/>If it still doesn't work, it is safe to delete this transfer and start a new one.";
    // add transaction explorer link if available
    transactionNotSend += process?.txLink ? `<br>You can check the failed transaction&nbsp;<a href="${process.txLink}" target="_blank" rel="nofollow noreferrer">here</a>.` : '';
    return transactionNotSend;
};
const getTransactionFailedMessage = async (step, txLink)=>{
    const chain = await __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$config$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["config"].getChainById(step.action.toChainId);
    const baseString = `It appears that your transaction may not have been successful.
  However, to confirm this, please check your ${chain.name} wallet for ${step.action.toToken.symbol}.`;
    return txLink ? `${baseString}
    You can also check the&nbsp;<a href="${txLink}" target="_blank" rel="nofollow noreferrer">block explorer</a> for more information.` : baseString;
}; //# sourceMappingURL=getTransactionMessage.js.map
}}),
"[project]/node_modules/@lifi/sdk/src/_esm/core/executionState.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "executionState": (()=>executionState)
});
const executionState = {
    state: {},
    get (routeId) {
        return this.state[routeId];
    },
    create (params) {
        this.state[params.route.id] = {
            ...this.state[params.route.id],
            ...params,
            executors: this.state[params.route.id]?.executors ?? []
        };
        return this.state[params.route.id];
    },
    update (state) {
        if (this.state[state.route.id]) {
            this.state[state.route.id] = {
                ...this.state[state.route.id],
                ...state
            };
        }
    },
    delete (routeId) {
        delete this.state[routeId];
    }
}; //# sourceMappingURL=executionState.js.map
}}),
"[project]/node_modules/@lifi/sdk/src/_esm/core/StatusManager.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "StatusManager": (()=>StatusManager)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$processMessages$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/core/processMessages.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$executionState$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/core/executionState.js [app-ssr] (ecmascript)");
;
;
class StatusManager {
    constructor(routeId){
        Object.defineProperty(this, "routeId", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "shouldUpdate", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: true
        });
        /**
         * Initializes the execution object of a Step.
         * @param step  The current step in execution
         * @returns The initialized execution object for this step and a function to update this step
         */ Object.defineProperty(this, "initExecutionObject", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (step)=>{
                if (!step.execution) {
                    step.execution = {
                        status: 'PENDING',
                        process: []
                    };
                    this.updateStepInRoute(step);
                }
                // Change status to PENDING after resuming from FAILED
                if (step.execution.status === 'FAILED') {
                    step.execution.status = 'PENDING';
                    this.updateStepInRoute(step);
                }
                return step.execution;
            }
        });
        /**
         * Create and push a new process into the execution.
         * @param step.step The step that should contain the new process.
         * @param step.type Type of the process. Used to identify already existing processes.
         * @param step.chainId Chain Id of the process.
         * @param step.status By default created procces is set to the STARTED status. We can override new process with the needed status.
         * @param root0
         * @param root0.step
         * @param root0.type
         * @param root0.chainId
         * @param root0.status
         * @returns Returns process.
         */ Object.defineProperty(this, "findOrCreateProcess", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: ({ step, type, chainId, status })=>{
                if (!step.execution?.process) {
                    throw new Error("Execution hasn't been initialized.");
                }
                const process = step.execution.process.find((p)=>p.type === type);
                if (process) {
                    if (status && process.status !== status) {
                        process.status = status;
                        this.updateStepInRoute(step);
                    }
                    return process;
                }
                const newProcess = {
                    type: type,
                    startedAt: Date.now(),
                    message: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$processMessages$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getProcessMessage"])(type, status ?? 'STARTED'),
                    status: status ?? 'STARTED',
                    chainId: chainId
                };
                step.execution.process.push(newProcess);
                this.updateStepInRoute(step);
                return newProcess;
            }
        });
        /**
         * Update a process object.
         * @param step The step where the process should be updated
         * @param type  The process type to update
         * @param status The status the process gets.
         * @param [params] Additional parameters to append to the process.
         * @returns The update process
         */ Object.defineProperty(this, "updateProcess", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (step, type, status, params)=>{
                if (!step.execution) {
                    throw new Error("Can't update an empty step execution.");
                }
                const currentProcess = step?.execution?.process.find((p)=>p.type === type);
                if (!currentProcess) {
                    throw new Error("Can't find a process for the given type.");
                }
                switch(status){
                    case 'CANCELLED':
                        currentProcess.doneAt = Date.now();
                        break;
                    case 'FAILED':
                        currentProcess.doneAt = Date.now();
                        step.execution.status = 'FAILED';
                        break;
                    case 'DONE':
                        currentProcess.doneAt = Date.now();
                        break;
                    case 'PENDING':
                        step.execution.status = 'PENDING';
                        break;
                    case 'ACTION_REQUIRED':
                        step.execution.status = 'ACTION_REQUIRED';
                        break;
                    default:
                        break;
                }
                currentProcess.status = status;
                currentProcess.message = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$processMessages$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getProcessMessage"])(type, status);
                // set extra parameters or overwritte the standard params set in the switch statement
                if (params) {
                    for (const [key, value] of Object.entries(params)){
                        currentProcess[key] = value;
                    }
                }
                // Sort processes, the ones with DONE status go first
                step.execution.process = [
                    ...step.execution.process.filter((process)=>process.status === 'DONE'),
                    ...step.execution.process.filter((process)=>process.status !== 'DONE')
                ];
                this.updateStepInRoute(step); // updates the step in the route
                return currentProcess;
            }
        });
        /**
         * Remove a process from the execution
         * @param step The step where the process should be removed from
         * @param type  The process type to remove
         */ Object.defineProperty(this, "removeProcess", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (step, type)=>{
                if (!step.execution) {
                    throw new Error("Execution hasn't been initialized.");
                }
                const index = step.execution.process.findIndex((p)=>p.type === type);
                step.execution.process.splice(index, 1);
                this.updateStepInRoute(step);
            }
        });
        Object.defineProperty(this, "updateStepInRoute", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (step)=>{
                if (!this.shouldUpdate) {
                    return step;
                }
                const data = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$executionState$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["executionState"].get(this.routeId);
                if (!data) {
                    throw new Error('Execution data not found.');
                }
                const stepIndex = data.route.steps.findIndex((routeStep)=>routeStep.id === step.id);
                if (stepIndex === -1) {
                    throw new Error("Couldn't find a step to update.");
                }
                data.route.steps[stepIndex] = {
                    ...data.route.steps[stepIndex],
                    ...step
                };
                data.executionOptions?.updateRouteHook?.(data.route);
                return data.route.steps[stepIndex];
            }
        });
        this.routeId = routeId;
    }
    /**
     * Updates the execution object of a Step.
     * @param step  The current step in execution
     * @param status  The status for the execution
     * @param execution Optional. Information about received tokens
     * @returns The step with the updated execution object
     */ updateExecution(step, status, execution) {
        if (!step.execution) {
            throw Error("Can't update empty execution.");
        }
        step.execution.status = status;
        if (execution) {
            step.execution = {
                ...step.execution,
                ...execution
            };
        }
        this.updateStepInRoute(step);
        return step;
    }
    allowUpdates(value) {
        this.shouldUpdate = value;
    }
} //# sourceMappingURL=StatusManager.js.map
}}),
"[project]/node_modules/@lifi/sdk/src/_esm/core/BaseStepExecutor.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "BaseStepExecutor": (()=>BaseStepExecutor)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$StatusManager$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/core/StatusManager.js [app-ssr] (ecmascript)");
;
// Please be careful when changing the defaults as it may break the behavior (e.g., background execution)
const defaultInteractionSettings = {
    allowInteraction: true,
    allowUpdates: true,
    allowExecution: true
};
class BaseStepExecutor {
    constructor(options){
        Object.defineProperty(this, "executionOptions", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "statusManager", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "allowUserInteraction", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: true
        });
        Object.defineProperty(this, "allowExecution", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: true
        });
        Object.defineProperty(this, "setInteraction", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (settings)=>{
                const interactionSettings = {
                    ...defaultInteractionSettings,
                    ...settings
                };
                this.allowUserInteraction = interactionSettings.allowInteraction;
                this.statusManager.allowUpdates(interactionSettings.allowUpdates);
                this.allowExecution = interactionSettings.allowExecution;
            }
        });
        this.statusManager = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$StatusManager$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["StatusManager"](options.routeId);
        this.executionOptions = options.executionOptions;
    }
} //# sourceMappingURL=BaseStepExecutor.js.map
}}),
"[project]/node_modules/@lifi/sdk/src/_esm/core/EVM/EVMStepExecutor.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "EVMStepExecutor": (()=>EVMStepExecutor)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$EVM$2f$switchChain$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/core/EVM/switchChain.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$viem$2f$_esm$2f$utils$2f$getAction$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/viem/_esm/utils/getAction.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$viem$2f$_esm$2f$actions$2f$wallet$2f$getAddresses$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/viem/_esm/actions/wallet/getAddresses.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/errors/constants.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$EVM$2f$parseEVMErrors$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/core/EVM/parseEVMErrors.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$errors$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/errors/errors.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$config$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/config.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$utils$2f$isZeroAddress$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/utils/isZeroAddress.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$EVM$2f$checkAllowance$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/core/EVM/checkAllowance.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$EVM$2f$multisig$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/core/EVM/multisig.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$checkBalance$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/core/checkBalance.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$services$2f$api$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/services/api.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$stepComparison$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/core/stepComparison.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$EVM$2f$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/core/EVM/utils.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$viem$2f$_esm$2f$actions$2f$wallet$2f$sendTransaction$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/viem/_esm/actions/wallet/sendTransaction.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$EVM$2f$waitForTransactionReceipt$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/core/EVM/waitForTransactionReceipt.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$waitForReceivingTransaction$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/core/waitForReceivingTransaction.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$processMessages$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/core/processMessages.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$utils$2f$getTransactionMessage$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/utils/getTransactionMessage.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$BaseStepExecutor$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/core/BaseStepExecutor.js [app-ssr] (ecmascript)");
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
class EVMStepExecutor extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$BaseStepExecutor$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["BaseStepExecutor"] {
    constructor(options){
        super(options);
        Object.defineProperty(this, "client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "multisig", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        // Ensure that we are using the right chain and wallet when executing transactions.
        Object.defineProperty(this, "checkClient", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: async (step, process)=>{
                const updatedClient = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$EVM$2f$switchChain$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["switchChain"])(this.client, this.statusManager, step, this.allowUserInteraction, this.executionOptions?.switchChainHook);
                if (updatedClient) {
                    this.client = updatedClient;
                }
                // Prevent execution of the quote by wallet different from the one which requested the quote
                let accountAddress = this.client.account?.address;
                if (!accountAddress) {
                    const accountAddresses = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$viem$2f$_esm$2f$utils$2f$getAction$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getAction"])(this.client, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$viem$2f$_esm$2f$actions$2f$wallet$2f$getAddresses$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getAddresses"], 'getAddresses')(undefined);
                    accountAddress = accountAddresses?.[0];
                }
                if (accountAddress !== step.action.fromAddress) {
                    let processToUpdate = process;
                    if (!processToUpdate) {
                        // We need to create some process if we don't have one so we can show the error
                        processToUpdate = this.statusManager.findOrCreateProcess({
                            step,
                            type: 'TRANSACTION'
                        });
                    }
                    const errorMessage = 'The wallet address that requested the quote does not match the wallet address attempting to sign the transaction.';
                    this.statusManager.updateProcess(step, processToUpdate.type, 'FAILED', {
                        error: {
                            code: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["LiFiErrorCode"].WalletChangedDuringExecution,
                            message: errorMessage
                        }
                    });
                    this.statusManager.updateExecution(step, 'FAILED');
                    throw await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$EVM$2f$parseEVMErrors$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["parseEVMErrors"])(new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$errors$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["TransactionError"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["LiFiErrorCode"].WalletChangedDuringExecution, errorMessage), step, process);
                }
                return updatedClient;
            }
        });
        Object.defineProperty(this, "executeStep", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: async (step)=>{
                step.execution = this.statusManager.initExecutionObject(step);
                // Find if it's bridging and the step is waiting for a transaction on the receiving chain
                const recievingChainProcess = step.execution?.process.find((process)=>process.type === 'RECEIVING_CHAIN');
                // Make sure that the chain is still correct
                // If the step is waiting for a transaction on the receiving chain, we do not switch the chain
                // All changes are already done from the source chain
                // Return the step
                if (recievingChainProcess?.substatus !== 'WAIT_DESTINATION_TRANSACTION') {
                    const updatedClient = await this.checkClient(step);
                    if (!updatedClient) {
                        return step;
                    }
                }
                const isMultisigClient = !!this.multisig?.isMultisigWalletClient;
                const multisigBatchTransactions = [];
                const shouldBatchTransactions = this.multisig?.shouldBatchTransactions && !!this.multisig.sendBatchTransaction;
                const fromChain = await __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$config$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["config"].getChainById(step.action.fromChainId);
                const toChain = await __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$config$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["config"].getChainById(step.action.toChainId);
                const isBridgeExecution = fromChain.id !== toChain.id;
                const currentProcessType = isBridgeExecution ? 'CROSS_CHAIN' : 'SWAP';
                // STEP 1: Check allowance
                const existingProcess = step.execution.process.find((p)=>p.type === currentProcessType);
                // Check token approval only if fromToken is not the native token => no approval needed in that case
                const checkForAllowance = !existingProcess?.txHash && !(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$utils$2f$isZeroAddress$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isZeroAddress"])(step.action.fromToken.address) && (shouldBatchTransactions || !isMultisigClient);
                if (checkForAllowance) {
                    const data = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$EVM$2f$checkAllowance$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["checkAllowance"])(this.client, fromChain, step, this.statusManager, this.executionOptions, this.allowUserInteraction, shouldBatchTransactions);
                    if (data) {
                        // allowance doesn't need value
                        const baseTransaction = {
                            to: step.action.fromToken.address,
                            data
                        };
                        multisigBatchTransactions.push(baseTransaction);
                    }
                }
                // STEP 2: Get transaction
                let process = this.statusManager.findOrCreateProcess({
                    step,
                    type: currentProcessType,
                    chainId: fromChain.id
                });
                if (process.status !== 'DONE') {
                    const multisigProcess = step.execution.process.find((p)=>!!p.multisigTxHash);
                    try {
                        if (isMultisigClient && multisigProcess) {
                            const multisigTxHash = multisigProcess.multisigTxHash;
                            if (!multisigTxHash) {
                                throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$errors$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ValidationError"]('Multisig internal transaction hash is undefined.');
                            }
                            await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$EVM$2f$multisig$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["updateMultisigRouteProcess"])(multisigTxHash, step, process.type, fromChain, this.statusManager, this.multisig);
                        }
                        let txHash;
                        if (process.txHash) {
                            // Make sure that the chain is still correct
                            const updatedClient = await this.checkClient(step, process);
                            if (!updatedClient) {
                                return step;
                            }
                            // Wait for exiting transaction
                            txHash = process.txHash;
                        } else {
                            process = this.statusManager.updateProcess(step, process.type, 'STARTED');
                            // Check balance
                            await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$checkBalance$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["checkBalance"])(this.client.account.address, step);
                            // Create new transaction
                            if (!step.transactionRequest) {
                                const { execution, ...stepBase } = step;
                                const updatedStep = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$services$2f$api$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getStepTransaction"])(stepBase);
                                const comparedStep = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$stepComparison$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["stepComparison"])(this.statusManager, step, updatedStep, this.allowUserInteraction, this.executionOptions);
                                Object.assign(step, {
                                    ...comparedStep,
                                    execution: step.execution
                                });
                            }
                            if (!step.transactionRequest) {
                                throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$errors$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["TransactionError"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["LiFiErrorCode"].TransactionUnprepared, 'Unable to prepare transaction.');
                            }
                            // STEP 3: Send the transaction
                            // Make sure that the chain is still correct
                            const updatedClient = await this.checkClient(step, process);
                            if (!updatedClient) {
                                return step;
                            }
                            process = this.statusManager.updateProcess(step, process.type, 'ACTION_REQUIRED');
                            if (!this.allowUserInteraction) {
                                return step;
                            }
                            let transactionRequest = {
                                to: step.transactionRequest.to,
                                from: step.transactionRequest.from,
                                data: step.transactionRequest.data,
                                value: step.transactionRequest.value ? BigInt(step.transactionRequest.value) : undefined,
                                gas: step.transactionRequest.gasLimit ? BigInt(step.transactionRequest.gasLimit) : undefined,
                                // gasPrice: step.transactionRequest.gasPrice
                                //   ? BigInt(step.transactionRequest.gasPrice as string)
                                //   : undefined,
                                // maxFeePerGas: step.transactionRequest.maxFeePerGas
                                //   ? BigInt(step.transactionRequest.maxFeePerGas as string)
                                //   : undefined,
                                maxPriorityFeePerGas: this.client.account?.type === 'local' ? await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$EVM$2f$utils$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getMaxPriorityFeePerGas"])(this.client) : step.transactionRequest.maxPriorityFeePerGas ? BigInt(step.transactionRequest.maxPriorityFeePerGas) : undefined
                            };
                            if (this.executionOptions?.updateTransactionRequestHook) {
                                const customizedTransactionRequest = await this.executionOptions.updateTransactionRequestHook({
                                    requestType: 'transaction',
                                    ...transactionRequest
                                });
                                transactionRequest = {
                                    ...transactionRequest,
                                    ...customizedTransactionRequest
                                };
                            }
                            if (shouldBatchTransactions && this.multisig?.sendBatchTransaction) {
                                if (transactionRequest.to && transactionRequest.data) {
                                    const populatedTransaction = {
                                        value: transactionRequest.value,
                                        to: transactionRequest.to,
                                        data: transactionRequest.data
                                    };
                                    multisigBatchTransactions.push(populatedTransaction);
                                    txHash = await this.multisig?.sendBatchTransaction(multisigBatchTransactions);
                                } else {
                                    throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$errors$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["TransactionError"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["LiFiErrorCode"].TransactionUnprepared, 'Unable to prepare transaction.');
                                }
                            } else {
                                txHash = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$viem$2f$_esm$2f$utils$2f$getAction$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getAction"])(this.client, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$viem$2f$_esm$2f$actions$2f$wallet$2f$sendTransaction$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["sendTransaction"], 'sendTransaction')({
                                    to: transactionRequest.to,
                                    account: this.client.account,
                                    data: transactionRequest.data,
                                    value: transactionRequest.value,
                                    gas: transactionRequest.gas,
                                    gasPrice: transactionRequest.gasPrice,
                                    maxFeePerGas: transactionRequest.maxFeePerGas,
                                    maxPriorityFeePerGas: transactionRequest.maxPriorityFeePerGas,
                                    chain: null
                                });
                            }
                            // STEP 4: Wait for the transaction
                            if (isMultisigClient) {
                                process = this.statusManager.updateProcess(step, process.type, 'ACTION_REQUIRED', {
                                    multisigTxHash: txHash
                                });
                            } else {
                                process = this.statusManager.updateProcess(step, process.type, 'PENDING', {
                                    txHash: txHash,
                                    txLink: `${fromChain.metamask.blockExplorerUrls[0]}tx/${txHash}`
                                });
                            }
                        }
                        const transactionReceipt = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$EVM$2f$waitForTransactionReceipt$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["waitForTransactionReceipt"])({
                            client: this.client,
                            chainId: fromChain.id,
                            txHash,
                            onReplaced: (response)=>{
                                this.statusManager.updateProcess(step, process.type, 'PENDING', {
                                    txHash: response.transaction.hash,
                                    txLink: `${fromChain.metamask.blockExplorerUrls[0]}tx/${response.transaction.hash}`
                                });
                            }
                        });
                        // if it's multisig wallet client and the process is in ACTION_REQUIRED
                        // then signatures are still needed
                        if (isMultisigClient && process.status === 'ACTION_REQUIRED') {
                            await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$EVM$2f$multisig$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["updateMultisigRouteProcess"])(transactionReceipt?.transactionHash || txHash, step, process.type, fromChain, this.statusManager, this.multisig);
                        }
                        // Update pending process if the transaction hash from the receipt is different.
                        // This might happen if the transaction was replaced.
                        if (!isMultisigClient && transactionReceipt?.transactionHash && transactionReceipt.transactionHash !== txHash) {
                            process = this.statusManager.updateProcess(step, process.type, 'PENDING', {
                                txHash: transactionReceipt.transactionHash,
                                txLink: `${fromChain.metamask.blockExplorerUrls[0]}tx/${transactionReceipt.transactionHash}`
                            });
                        }
                        if (isBridgeExecution) {
                            process = this.statusManager.updateProcess(step, process.type, 'DONE');
                        }
                    } catch (e) {
                        const error = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$EVM$2f$parseEVMErrors$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["parseEVMErrors"])(e, step, process);
                        process = this.statusManager.updateProcess(step, process.type, 'FAILED', {
                            error: {
                                message: error.cause.message,
                                code: error.code
                            }
                        });
                        this.statusManager.updateExecution(step, 'FAILED');
                        throw error;
                    }
                }
                // STEP 5: Wait for the receiving chain
                const processTxHash = process.txHash;
                if (isBridgeExecution) {
                    process = this.statusManager.findOrCreateProcess({
                        step,
                        type: 'RECEIVING_CHAIN',
                        status: 'PENDING',
                        chainId: toChain.id
                    });
                }
                let statusResponse;
                try {
                    if (!processTxHash) {
                        throw new Error('Transaction hash is undefined.');
                    }
                    statusResponse = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$waitForReceivingTransaction$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["waitForReceivingTransaction"])(processTxHash, this.statusManager, process.type, step);
                    const statusReceiving = statusResponse.receiving;
                    process = this.statusManager.updateProcess(step, process.type, 'DONE', {
                        substatus: statusResponse.substatus,
                        substatusMessage: statusResponse.substatusMessage || (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$processMessages$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getSubstatusMessage"])(statusResponse.status, statusResponse.substatus),
                        txHash: statusReceiving?.txHash,
                        txLink: `${toChain.metamask.blockExplorerUrls[0]}tx/${statusReceiving?.txHash}`
                    });
                    this.statusManager.updateExecution(step, 'DONE', {
                        fromAmount: statusResponse.sending.amount,
                        toAmount: statusReceiving?.amount,
                        toToken: statusReceiving?.token,
                        gasCosts: [
                            {
                                amount: statusResponse.sending.gasAmount,
                                amountUSD: statusResponse.sending.gasAmountUSD,
                                token: statusResponse.sending.gasToken,
                                estimate: statusResponse.sending.gasUsed,
                                limit: statusResponse.sending.gasUsed,
                                price: statusResponse.sending.gasPrice,
                                type: 'SEND'
                            }
                        ]
                    });
                } catch (e) {
                    const htmlMessage = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$utils$2f$getTransactionMessage$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getTransactionFailedMessage"])(step, process.txLink);
                    process = this.statusManager.updateProcess(step, process.type, 'FAILED', {
                        error: {
                            code: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["LiFiErrorCode"].TransactionFailed,
                            message: 'Failed while waiting for receiving chain.',
                            htmlMessage
                        }
                    });
                    this.statusManager.updateExecution(step, 'FAILED');
                    throw await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$EVM$2f$parseEVMErrors$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["parseEVMErrors"])(e, step, process);
                }
                // DONE
                return step;
            }
        });
        this.client = options.client;
        this.multisig = options.multisig;
    }
} //# sourceMappingURL=EVMStepExecutor.js.map
}}),
"[project]/node_modules/@lifi/sdk/src/_esm/core/EVM/EVM.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "EVM": (()=>EVM)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$types$2f$src$2f$_esm$2f$chains$2f$Chain$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/types/src/_esm/chains/Chain.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$viem$2f$_esm$2f$utils$2f$address$2f$isAddress$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/viem/_esm/utils/address/isAddress.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$EVM$2f$getENSAddress$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/core/EVM/getENSAddress.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$EVM$2f$getEVMBalance$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/core/EVM/getEVMBalance.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$EVM$2f$EVMStepExecutor$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/core/EVM/EVMStepExecutor.js [app-ssr] (ecmascript)");
;
;
;
;
;
function EVM(options) {
    const _options = options ?? {};
    return {
        get type () {
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$types$2f$src$2f$_esm$2f$chains$2f$Chain$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ChainType"].EVM;
        },
        get multisig () {
            return _options.multisig;
        },
        isAddress: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$viem$2f$_esm$2f$utils$2f$address$2f$isAddress$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isAddress"],
        resolveAddress: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$EVM$2f$getENSAddress$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getENSAddress"],
        getBalance: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$EVM$2f$getEVMBalance$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getEVMBalance"],
        async getStepExecutor (options) {
            if (!_options.getWalletClient) {
                throw new Error('Client is not provided.');
            }
            const walletClient = await _options.getWalletClient();
            const executor = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$EVM$2f$EVMStepExecutor$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["EVMStepExecutor"]({
                client: walletClient,
                multisig: _options.multisig,
                routeId: options.routeId,
                executionOptions: {
                    ...options.executionOptions,
                    switchChainHook: _options.switchChain ?? options.executionOptions?.switchChainHook
                }
            });
            return executor;
        },
        setOptions (options) {
            Object.assign(_options, options);
        }
    };
} //# sourceMappingURL=EVM.js.map
}}),
"[project]/node_modules/@lifi/sdk/src/_esm/core/Solana/isSVMAddress.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "isSVMAddress": (()=>isSVMAddress)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$web3$2e$js$2f$lib$2f$index$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@solana/web3.js/lib/index.esm.js [app-ssr] (ecmascript)");
;
function isSVMAddress(address) {
    try {
        new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$web3$2e$js$2f$lib$2f$index$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PublicKey"](address);
        return true;
    } catch (_error) {
        return false;
    }
} //# sourceMappingURL=isSVMAddress.js.map
}}),
"[project]/node_modules/@lifi/sdk/src/_esm/core/Solana/getSNSAddress.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "getSNSAddress": (()=>getSNSAddress)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$Solana$2f$isSVMAddress$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/core/Solana/isSVMAddress.js [app-ssr] (ecmascript)");
;
const getSNSAddress = async (name)=>{
    try {
        if (!name.endsWith('.sol')) {
            return;
        }
        // const rpcUrl = await getRpcUrl(ChainId.SOL)
        const snsWorkerUrl = `https://sns-sdk-proxy.bonfida.workers.dev/resolve/${name}`;
        const response = await fetch(snsWorkerUrl);
        if (!response.ok) {
            return;
        }
        const data = await response.json();
        if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$Solana$2f$isSVMAddress$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isSVMAddress"])(data.result)) {
            return;
        }
        return data.result;
    } catch (_) {
        // ignore
        return;
    }
}; //# sourceMappingURL=getSNSAddress.js.map
}}),
"[project]/node_modules/@lifi/sdk/src/_esm/core/Solana/types.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "TokenProgramAddress": (()=>TokenProgramAddress),
    "isSolana": (()=>isSolana)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$types$2f$src$2f$_esm$2f$chains$2f$Chain$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/types/src/_esm/chains/Chain.js [app-ssr] (ecmascript)");
;
function isSolana(provider) {
    return provider.type === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$types$2f$src$2f$_esm$2f$chains$2f$Chain$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ChainType"].SVM;
}
const TokenProgramAddress = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'; //# sourceMappingURL=types.js.map
}}),
"[project]/node_modules/@lifi/sdk/src/_esm/core/Solana/connection.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "callSolanaWithRetry": (()=>callSolanaWithRetry),
    "ensureConnections": (()=>ensureConnections),
    "getSolanaConnections": (()=>getSolanaConnections)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$web3$2e$js$2f$lib$2f$index$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@solana/web3.js/lib/index.esm.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$rpc$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/core/rpc.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$types$2f$src$2f$_esm$2f$chains$2f$base$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/types/src/_esm/chains/base.js [app-ssr] (ecmascript)");
;
;
;
const connections = new Map();
const ensureConnections = async ()=>{
    const rpcUrls = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$rpc$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getRpcUrls"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$types$2f$src$2f$_esm$2f$chains$2f$base$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ChainId"].SOL);
    for (const rpcUrl of rpcUrls){
        if (!connections.get(rpcUrl)) {
            const connection = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$web3$2e$js$2f$lib$2f$index$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Connection"](rpcUrl);
            connections.set(rpcUrl, connection);
        }
    }
};
const getSolanaConnections = async ()=>{
    await ensureConnections();
    return Array.from(connections.values());
};
async function callSolanaWithRetry(fn) {
    // Ensure connections are initialized
    await ensureConnections();
    let lastError = null;
    for (const connection of connections.values()){
        try {
            const result = await fn(connection);
            return result;
        } catch (error) {
            lastError = error;
        }
    }
    // Throw the last encountered error
    throw lastError;
} //# sourceMappingURL=connection.js.map
}}),
"[project]/node_modules/@lifi/sdk/src/_esm/core/Solana/getSolanaBalance.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "getSolanaBalance": (()=>getSolanaBalance)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$web3$2e$js$2f$lib$2f$index$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@solana/web3.js/lib/index.esm.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$Solana$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/core/Solana/types.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$utils$2f$withDedupe$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/utils/withDedupe.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$Solana$2f$connection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/core/Solana/connection.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/constants.js [app-ssr] (ecmascript)");
;
;
;
;
;
const getSolanaBalance = async (walletAddress, tokens)=>{
    if (tokens.length === 0) {
        return [];
    }
    const { chainId } = tokens[0];
    for (const token of tokens){
        if (token.chainId !== chainId) {
            console.warn('Requested tokens have to be on the same chain.');
        }
    }
    return getSolanaBalanceDefault(chainId, tokens, walletAddress);
};
const getSolanaBalanceDefault = async (_chainId, tokens, walletAddress)=>{
    const accountPublicKey = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$web3$2e$js$2f$lib$2f$index$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PublicKey"](walletAddress);
    const tokenProgramPublicKey = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$web3$2e$js$2f$lib$2f$index$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PublicKey"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$Solana$2f$types$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["TokenProgramAddress"]);
    const [slot, balance, tokenAccountsByOwner] = await Promise.allSettled([
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$utils$2f$withDedupe$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["withDedupe"])(()=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$Solana$2f$connection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["callSolanaWithRetry"])((connection)=>connection.getSlot('confirmed')), {
            id: `${getSolanaBalanceDefault.name}.getSlot`
        }),
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$utils$2f$withDedupe$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["withDedupe"])(()=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$Solana$2f$connection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["callSolanaWithRetry"])((connection)=>connection.getBalance(accountPublicKey, 'confirmed')), {
            id: `${getSolanaBalanceDefault.name}.getBalance`
        }),
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$utils$2f$withDedupe$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["withDedupe"])(()=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$Solana$2f$connection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["callSolanaWithRetry"])((connection)=>connection.getParsedTokenAccountsByOwner(accountPublicKey, {
                    programId: tokenProgramPublicKey
                }, 'confirmed')), {
            id: `${getSolanaBalanceDefault.name}.getParsedTokenAccountsByOwner`
        })
    ]);
    const blockNumber = slot.status === 'fulfilled' ? BigInt(slot.value) : 0n;
    const solBalance = balance.status === 'fulfilled' ? BigInt(balance.value) : 0n;
    const walletTokenAmounts = tokenAccountsByOwner.status === 'fulfilled' ? tokenAccountsByOwner.value.value.reduce((tokenAmounts, value)=>{
        const amount = BigInt(value.account.data.parsed.info.tokenAmount.amount);
        if (amount > 0n) {
            tokenAmounts[value.account.data.parsed.info.mint] = amount;
        }
        return tokenAmounts;
    }, {}) : {};
    walletTokenAmounts[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["SolSystemProgram"]] = solBalance;
    const tokenAmounts = tokens.map((token)=>{
        if (walletTokenAmounts[token.address]) {
            return {
                ...token,
                amount: walletTokenAmounts[token.address],
                blockNumber
            };
        }
        return {
            ...token,
            blockNumber
        };
    });
    return tokenAmounts;
}; //# sourceMappingURL=getSolanaBalance.js.map
}}),
"[project]/node_modules/@lifi/sdk/src/_esm/utils/base64ToUint8Array.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "base64ToUint8Array": (()=>base64ToUint8Array)
});
function base64ToUint8Array(base64String) {
    const binaryString = atob(base64String);
    const len = binaryString.length;
    const bytes = new Uint8Array(len);
    for(let i = 0; i < len; i++){
        bytes[i] = binaryString.charCodeAt(i);
    }
    return bytes;
} //# sourceMappingURL=base64ToUint8Array.js.map
}}),
"[project]/node_modules/@lifi/sdk/src/_esm/core/Solana/sendAndConfirmTransaction.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "sendAndConfirmTransaction": (()=>sendAndConfirmTransaction)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bs58$2f$src$2f$esm$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bs58/src/esm/index.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$Solana$2f$connection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/core/Solana/connection.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$utils$2f$sleep$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/utils/sleep.js [app-ssr] (ecmascript)");
;
;
;
async function sendAndConfirmTransaction(signedTx) {
    const connections = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$Solana$2f$connection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getSolanaConnections"])();
    const signedTxSerialized = signedTx.serialize();
    // Create transaction hash (signature)
    const txSignature = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bs58$2f$src$2f$esm$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].encode(signedTx.signatures[0]);
    if (!txSignature) {
        throw new Error('Transaction signature is missing.');
    }
    const rawTransactionOptions = {
        // We can skip preflight check after the first transaction has been sent
        // https://solana.com/docs/advanced/retry#the-cost-of-skipping-preflight
        skipPreflight: true,
        // Setting max retries to 0 as we are handling retries manually
        maxRetries: 0,
        // https://solana.com/docs/advanced/confirmation#use-an-appropriate-preflight-commitment-level
        preflightCommitment: 'confirmed'
    };
    for (const connection of connections){
        connection.sendRawTransaction(signedTxSerialized, rawTransactionOptions).catch();
    }
    const abortControllers = [];
    const confirmPromises = connections.map(async (connection)=>{
        const abortController = new AbortController();
        abortControllers.push(abortController);
        try {
            const blockhashResult = await connection.getLatestBlockhash('confirmed');
            const confirmTransactionPromise = connection.confirmTransaction({
                signature: txSignature,
                blockhash: blockhashResult.blockhash,
                lastValidBlockHeight: blockhashResult.lastValidBlockHeight,
                abortSignal: abortController.signal
            }, 'confirmed').then((result)=>result.value);
            let signatureResult = null;
            let blockHeight = await connection.getBlockHeight('confirmed');
            while(!signatureResult && blockHeight < blockhashResult.lastValidBlockHeight){
                await connection.sendRawTransaction(signedTxSerialized, rawTransactionOptions);
                signatureResult = await Promise.race([
                    confirmTransactionPromise,
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$utils$2f$sleep$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["sleep"])(1000)
                ]);
                if (signatureResult || abortController.signal.aborted) {
                    break;
                }
                blockHeight = await connection.getBlockHeight('confirmed');
            }
            abortController.abort();
            return signatureResult;
        } catch (error) {
            if (abortController.signal.aborted) {
                return Promise.reject(new Error('Confirmation aborted.'));
            }
            throw error;
        }
    });
    const signatureResult = await Promise.any(confirmPromises).catch(()=>null);
    for (const abortController of abortControllers){
        abortController.abort();
    }
    return {
        signatureResult,
        txSignature
    };
} //# sourceMappingURL=sendAndConfirmTransaction.js.map
}}),
"[project]/node_modules/@lifi/sdk/src/_esm/core/Solana/parseSolanaErrors.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "parseSolanaErrors": (()=>parseSolanaErrors)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$SDKError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/errors/SDKError.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$errors$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/errors/errors.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/errors/constants.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$baseError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/errors/baseError.js [app-ssr] (ecmascript)");
;
;
;
;
const parseSolanaErrors = async (e, step, process)=>{
    if (e instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$SDKError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["SDKError"]) {
        e.step = e.step ?? step;
        e.process = e.process ?? process;
        return e;
    }
    const baseError = handleSpecificErrors(e);
    return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$SDKError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["SDKError"](baseError, step, process);
};
const handleSpecificErrors = (e)=>{
    if (e.name === 'WalletSignTransactionError') {
        return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$errors$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["TransactionError"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["LiFiErrorCode"].SignatureRejected, e.message, e);
    }
    if (e.name === 'SendTransactionError') {
        return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$errors$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["TransactionError"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["LiFiErrorCode"].TransactionFailed, e.message, e);
    }
    if (e.name === 'TransactionExpiredBlockheightExceededError') {
        return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$errors$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["TransactionError"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["LiFiErrorCode"].TransactionExpired, e.message, e);
    }
    if (e.message?.includes('simulate')) {
        return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$errors$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["TransactionError"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["LiFiErrorCode"].TransactionSimulationFailed, e.message, e);
    }
    if (e instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$baseError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["BaseError"]) {
        return e;
    }
    return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$errors$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["UnknownError"](e.message || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ErrorMessage"].UnknownError, e);
}; //# sourceMappingURL=parseSolanaErrors.js.map
}}),
"[project]/node_modules/@lifi/sdk/src/_esm/core/Solana/SolanaStepExecutor.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "SolanaStepExecutor": (()=>SolanaStepExecutor)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$web3$2e$js$2f$lib$2f$index$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@solana/web3.js/lib/index.esm.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$errors$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/errors/errors.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/errors/constants.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$config$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/config.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$checkBalance$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/core/checkBalance.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$services$2f$api$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/services/api.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$stepComparison$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/core/stepComparison.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$utils$2f$base64ToUint8Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/utils/base64ToUint8Array.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$viem$2f$_esm$2f$utils$2f$promise$2f$withTimeout$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/viem/_esm/utils/promise/withTimeout.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$Solana$2f$connection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/core/Solana/connection.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$Solana$2f$sendAndConfirmTransaction$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/core/Solana/sendAndConfirmTransaction.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$Solana$2f$parseSolanaErrors$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/core/Solana/parseSolanaErrors.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$waitForReceivingTransaction$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/core/waitForReceivingTransaction.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$processMessages$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/core/processMessages.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$utils$2f$getTransactionMessage$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/utils/getTransactionMessage.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$BaseStepExecutor$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/core/BaseStepExecutor.js [app-ssr] (ecmascript)");
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
class SolanaStepExecutor extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$BaseStepExecutor$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["BaseStepExecutor"] {
    constructor(options){
        super(options);
        Object.defineProperty(this, "walletAdapter", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "checkWalletAdapter", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (step)=>{
                // Prevent execution of the quote by wallet different from the one which requested the quote
                if (this.walletAdapter.publicKey.toString() !== step.action.fromAddress) {
                    throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$errors$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["TransactionError"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["LiFiErrorCode"].WalletChangedDuringExecution, 'The wallet address that requested the quote does not match the wallet address attempting to sign the transaction.');
                }
            }
        });
        Object.defineProperty(this, "executeStep", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: async (step)=>{
                step.execution = this.statusManager.initExecutionObject(step);
                const fromChain = await __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$config$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["config"].getChainById(step.action.fromChainId);
                const toChain = await __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$config$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["config"].getChainById(step.action.toChainId);
                const isBridgeExecution = fromChain.id !== toChain.id;
                const currentProcessType = isBridgeExecution ? 'CROSS_CHAIN' : 'SWAP';
                // STEP 2: Get transaction
                let process = this.statusManager.findOrCreateProcess({
                    step,
                    type: currentProcessType
                });
                if (process.status !== 'DONE') {
                    try {
                        process = this.statusManager.updateProcess(step, process.type, 'STARTED');
                        // Check balance
                        await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$checkBalance$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["checkBalance"])(this.walletAdapter.publicKey.toString(), step);
                        // Create new transaction
                        if (!step.transactionRequest) {
                            const { execution, ...stepBase } = step;
                            const updatedStep = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$services$2f$api$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getStepTransaction"])(stepBase);
                            const comparedStep = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$stepComparison$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["stepComparison"])(this.statusManager, step, updatedStep, this.allowUserInteraction, this.executionOptions);
                            Object.assign(step, {
                                ...comparedStep,
                                execution: step.execution
                            });
                        }
                        if (!step.transactionRequest?.data) {
                            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$errors$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["TransactionError"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["LiFiErrorCode"].TransactionUnprepared, 'Unable to prepare transaction.');
                        }
                        process = this.statusManager.updateProcess(step, process.type, 'ACTION_REQUIRED');
                        if (!this.allowUserInteraction) {
                            return step;
                        }
                        let transactionRequest = {
                            data: step.transactionRequest.data
                        };
                        if (this.executionOptions?.updateTransactionRequestHook) {
                            const customizedTransactionRequest = await this.executionOptions.updateTransactionRequestHook({
                                requestType: 'transaction',
                                ...transactionRequest
                            });
                            transactionRequest = {
                                ...transactionRequest,
                                ...customizedTransactionRequest
                            };
                        }
                        if (!transactionRequest.data) {
                            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$errors$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["TransactionError"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["LiFiErrorCode"].TransactionUnprepared, 'Unable to prepare transaction.');
                        }
                        const versionedTransaction = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$web3$2e$js$2f$lib$2f$index$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["VersionedTransaction"].deserialize((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$utils$2f$base64ToUint8Array$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["base64ToUint8Array"])(transactionRequest.data));
                        this.checkWalletAdapter(step);
                        // We give users 2 minutes to sign the transaction or it should be considered expired
                        const signedTx = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$viem$2f$_esm$2f$utils$2f$promise$2f$withTimeout$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["withTimeout"])(()=>this.walletAdapter.signTransaction(versionedTransaction), {
                            // https://solana.com/docs/advanced/confirmation#transaction-expiration
                            // Use 2 minutes to account for fluctuations
                            timeout: 120_000,
                            errorInstance: new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$errors$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["TransactionError"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["LiFiErrorCode"].TransactionExpired, 'Transaction has expired: blockhash is no longer recent enough.')
                        });
                        process = this.statusManager.updateProcess(step, process.type, 'PENDING');
                        const simulationResult = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$Solana$2f$connection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["callSolanaWithRetry"])((connection)=>connection.simulateTransaction(signedTx, {
                                commitment: 'confirmed',
                                replaceRecentBlockhash: true
                            }));
                        if (simulationResult.value.err) {
                            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$errors$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["TransactionError"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["LiFiErrorCode"].TransactionSimulationFailed, 'Transaction simulation failed');
                        }
                        const confirmedTx = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$Solana$2f$sendAndConfirmTransaction$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["sendAndConfirmTransaction"])(signedTx);
                        if (!confirmedTx.signatureResult) {
                            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$errors$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["TransactionError"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["LiFiErrorCode"].TransactionExpired, 'Transaction has expired: The block height has exceeded the maximum allowed limit.');
                        }
                        if (confirmedTx.signatureResult.err) {
                            const reason = typeof confirmedTx.signatureResult.err === 'object' ? JSON.stringify(confirmedTx.signatureResult.err) : confirmedTx.signatureResult.err;
                            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$errors$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["TransactionError"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["LiFiErrorCode"].TransactionFailed, `Transaction failed: ${reason}`);
                        }
                        // Transaction has been confirmed and we can update the process
                        process = this.statusManager.updateProcess(step, process.type, 'PENDING', {
                            txHash: confirmedTx.txSignature,
                            txLink: `${fromChain.metamask.blockExplorerUrls[0]}tx/${confirmedTx.txSignature}`
                        });
                        if (isBridgeExecution) {
                            process = this.statusManager.updateProcess(step, process.type, 'DONE');
                        }
                    } catch (e) {
                        const error = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$Solana$2f$parseSolanaErrors$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["parseSolanaErrors"])(e, step, process);
                        process = this.statusManager.updateProcess(step, process.type, 'FAILED', {
                            error: {
                                message: error.cause.message,
                                code: error.code
                            }
                        });
                        this.statusManager.updateExecution(step, 'FAILED');
                        throw error;
                    }
                }
                // STEP 5: Wait for the receiving chain
                const processTxHash = process.txHash;
                if (isBridgeExecution) {
                    process = this.statusManager.findOrCreateProcess({
                        step,
                        type: 'RECEIVING_CHAIN',
                        status: 'PENDING',
                        chainId: toChain.id
                    });
                }
                let statusResponse;
                try {
                    if (!processTxHash) {
                        throw new Error('Transaction hash is undefined.');
                    }
                    statusResponse = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$waitForReceivingTransaction$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["waitForReceivingTransaction"])(processTxHash, this.statusManager, process.type, step);
                    const statusReceiving = statusResponse.receiving;
                    process = this.statusManager.updateProcess(step, process.type, 'DONE', {
                        substatus: statusResponse.substatus,
                        substatusMessage: statusResponse.substatusMessage || (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$processMessages$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getSubstatusMessage"])(statusResponse.status, statusResponse.substatus),
                        txHash: statusReceiving?.txHash,
                        txLink: `${toChain.metamask.blockExplorerUrls[0]}tx/${statusReceiving?.txHash}`
                    });
                    this.statusManager.updateExecution(step, 'DONE', {
                        fromAmount: statusResponse.sending.amount,
                        toAmount: statusReceiving?.amount,
                        toToken: statusReceiving?.token,
                        gasCosts: [
                            {
                                amount: statusResponse.sending.gasAmount,
                                amountUSD: statusResponse.sending.gasAmountUSD,
                                token: statusResponse.sending.gasToken,
                                estimate: statusResponse.sending.gasUsed,
                                limit: statusResponse.sending.gasUsed,
                                price: statusResponse.sending.gasPrice,
                                type: 'SEND'
                            }
                        ]
                    });
                } catch (e) {
                    const htmlMessage = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$utils$2f$getTransactionMessage$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getTransactionFailedMessage"])(step, process.txLink);
                    process = this.statusManager.updateProcess(step, process.type, 'FAILED', {
                        error: {
                            code: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["LiFiErrorCode"].TransactionFailed,
                            message: 'Failed while waiting for receiving chain.',
                            htmlMessage
                        }
                    });
                    this.statusManager.updateExecution(step, 'FAILED');
                    console.warn(e);
                    throw e;
                }
                // DONE
                return step;
            }
        });
        this.walletAdapter = options.walletAdapter;
    }
} //# sourceMappingURL=SolanaStepExecutor.js.map
}}),
"[project]/node_modules/@lifi/sdk/src/_esm/core/Solana/Solana.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "Solana": (()=>Solana)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$types$2f$src$2f$_esm$2f$chains$2f$Chain$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/types/src/_esm/chains/Chain.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$Solana$2f$isSVMAddress$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/core/Solana/isSVMAddress.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$Solana$2f$getSNSAddress$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/core/Solana/getSNSAddress.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$Solana$2f$getSolanaBalance$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/core/Solana/getSolanaBalance.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$Solana$2f$SolanaStepExecutor$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/core/Solana/SolanaStepExecutor.js [app-ssr] (ecmascript)");
;
;
;
;
;
function Solana(options) {
    const _options = options ?? {};
    return {
        get type () {
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$types$2f$src$2f$_esm$2f$chains$2f$Chain$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ChainType"].SVM;
        },
        isAddress: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$Solana$2f$isSVMAddress$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isSVMAddress"],
        resolveAddress: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$Solana$2f$getSNSAddress$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getSNSAddress"],
        getBalance: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$Solana$2f$getSolanaBalance$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getSolanaBalance"],
        async getStepExecutor (options) {
            if (!_options.getWalletAdapter) {
                throw new Error('getWalletAdapter is not provided.');
            }
            const walletAdapter = await _options.getWalletAdapter();
            const executor = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$Solana$2f$SolanaStepExecutor$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["SolanaStepExecutor"]({
                walletAdapter,
                routeId: options.routeId,
                executionOptions: {
                    ...options.executionOptions
                }
            });
            return executor;
        },
        setOptions (options) {
            Object.assign(_options, options);
        }
    };
} //# sourceMappingURL=Solana.js.map
}}),
"[project]/node_modules/@lifi/sdk/src/_esm/core/UTXO/getUTXOAPIPublicClient.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "getUTXOAPIPublicClient": (()=>getUTXOAPIPublicClient)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$config$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/config.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$viem$2f$_esm$2f$clients$2f$createClient$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/viem/_esm/clients/createClient.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$viem$2f$_esm$2f$clients$2f$transports$2f$fallback$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/viem/_esm/clients/transports/fallback.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$bigmi$2f$core$2f$dist$2f$esm$2f$transports$2f$utxo$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@bigmi/core/dist/esm/transports/utxo.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$bigmi$2f$core$2f$dist$2f$esm$2f$decorators$2f$UTXOAPIActions$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@bigmi/core/dist/esm/decorators/UTXOAPIActions.js [app-ssr] (ecmascript)");
;
;
;
;
// cached providers
const publicAPIClients = {};
const getUTXOAPIPublicClient = async (chainId)=>{
    if (!publicAPIClients[chainId]) {
        const _chain = await __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$config$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["config"].getChainById(chainId);
        const chain = {
            ..._chain,
            ..._chain.metamask,
            name: _chain.metamask.chainName,
            rpcUrls: {
                default: {
                    http: _chain.metamask.rpcUrls
                },
                public: {
                    http: _chain.metamask.rpcUrls
                }
            }
        };
        const client = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$viem$2f$_esm$2f$clients$2f$createClient$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createClient"])({
            chain,
            rpcSchema: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$viem$2f$_esm$2f$clients$2f$createClient$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["rpcSchema"])(),
            transport: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$viem$2f$_esm$2f$clients$2f$transports$2f$fallback$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["fallback"])([
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$bigmi$2f$core$2f$dist$2f$esm$2f$transports$2f$utxo$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["utxo"])('https://api.blockchair.com', {
                    key: 'blockchair',
                    includeChainToURL: true
                }),
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$bigmi$2f$core$2f$dist$2f$esm$2f$transports$2f$utxo$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["utxo"])('https://rpc.ankr.com/http/btc_blockbook/api/v2', {
                    key: 'ankr'
                }),
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$bigmi$2f$core$2f$dist$2f$esm$2f$transports$2f$utxo$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["utxo"])('https://api.blockcypher.com/v1/btc/main', {
                    key: 'blockcypher'
                }),
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$bigmi$2f$core$2f$dist$2f$esm$2f$transports$2f$utxo$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["utxo"])('https://mempool.space/api', {
                    key: 'mempool'
                })
            ])
        }).extend(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$bigmi$2f$core$2f$dist$2f$esm$2f$decorators$2f$UTXOAPIActions$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["UTXOAPIActions"]);
        publicAPIClients[chainId] = client;
    }
    if (!publicAPIClients[chainId]) {
        throw new Error(`Unable to configure provider for chain ${chainId}`);
    }
    return publicAPIClients[chainId];
}; //# sourceMappingURL=getUTXOAPIPublicClient.js.map
}}),
"[project]/node_modules/@lifi/sdk/src/_esm/core/UTXO/getUTXOPublicClient.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "getUTXOPublicClient": (()=>getUTXOPublicClient)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$rpc$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/core/rpc.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$viem$2f$_esm$2f$clients$2f$transports$2f$http$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/viem/_esm/clients/transports/http.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$config$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/config.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$viem$2f$_esm$2f$clients$2f$createClient$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/viem/_esm/clients/createClient.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$viem$2f$_esm$2f$clients$2f$transports$2f$fallback$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/viem/_esm/clients/transports/fallback.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$bigmi$2f$core$2f$dist$2f$esm$2f$decorators$2f$UTXOActions$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@bigmi/core/dist/esm/decorators/UTXOActions.js [app-ssr] (ecmascript)");
;
;
;
;
// cached providers
const publicClients = {};
const getUTXOPublicClient = async (chainId)=>{
    if (!publicClients[chainId]) {
        const urls = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$rpc$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getRpcUrls"])(chainId);
        const fallbackTransports = urls.map((url)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$viem$2f$_esm$2f$clients$2f$transports$2f$http$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["http"])(url));
        const _chain = await __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$config$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["config"].getChainById(chainId);
        const chain = {
            ..._chain,
            ..._chain.metamask,
            name: _chain.metamask.chainName,
            rpcUrls: {
                default: {
                    http: _chain.metamask.rpcUrls
                },
                public: {
                    http: _chain.metamask.rpcUrls
                }
            }
        };
        const client = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$viem$2f$_esm$2f$clients$2f$createClient$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createClient"])({
            chain,
            rpcSchema: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$viem$2f$_esm$2f$clients$2f$createClient$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["rpcSchema"])(),
            transport: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$viem$2f$_esm$2f$clients$2f$transports$2f$fallback$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["fallback"])(fallbackTransports),
            pollingInterval: 10_000
        }).extend(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$bigmi$2f$core$2f$dist$2f$esm$2f$decorators$2f$UTXOActions$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["UTXOActions"]);
        publicClients[chainId] = client;
    }
    if (!publicClients[chainId]) {
        throw new Error(`Unable to configure provider for chain ${chainId}`);
    }
    return publicClients[chainId];
}; //# sourceMappingURL=getUTXOPublicClient.js.map
}}),
"[project]/node_modules/@lifi/sdk/src/_esm/core/UTXO/getUTXOBalance.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "getUTXOBalance": (()=>getUTXOBalance)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$UTXO$2f$getUTXOAPIPublicClient$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/core/UTXO/getUTXOAPIPublicClient.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$types$2f$src$2f$_esm$2f$chains$2f$base$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/types/src/_esm/chains/base.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$UTXO$2f$getUTXOPublicClient$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/core/UTXO/getUTXOPublicClient.js [app-ssr] (ecmascript)");
;
;
;
const getUTXOBalance = async (walletAddress, tokens)=>{
    if (tokens.length === 0) {
        return [];
    }
    const { chainId } = tokens[0];
    for (const token of tokens){
        if (token.chainId !== chainId) {
            console.warn('Requested tokens have to be on the same chain.');
        }
    }
    const apiClient = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$UTXO$2f$getUTXOAPIPublicClient$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getUTXOAPIPublicClient"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$types$2f$src$2f$_esm$2f$chains$2f$base$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ChainId"].BTC);
    const client = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$UTXO$2f$getUTXOPublicClient$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getUTXOPublicClient"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$types$2f$src$2f$_esm$2f$chains$2f$base$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ChainId"].BTC);
    const [balance, blockCount] = await Promise.all([
        apiClient.getBalance({
            address: walletAddress
        }),
        client.getBlockCount()
    ]);
    return tokens.map((token)=>({
            ...token,
            amount: balance,
            blockNumber: BigInt(blockCount)
        }));
}; //# sourceMappingURL=getUTXOBalance.js.map
}}),
"[project]/node_modules/@lifi/sdk/src/_esm/core/UTXO/parseUTXOErrors.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "parseUTXOErrors": (()=>parseUTXOErrors)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$SDKError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/errors/SDKError.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$baseError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/errors/baseError.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$errors$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/errors/errors.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/errors/constants.js [app-ssr] (ecmascript)");
;
;
;
;
const parseUTXOErrors = async (e, step, process)=>{
    if (e instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$SDKError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["SDKError"]) {
        e.step = e.step ?? step;
        e.process = e.process ?? process;
        return e;
    }
    const baseError = handleSpecificErrors(e);
    return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$SDKError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["SDKError"](baseError, step, process);
};
const handleSpecificErrors = (e)=>{
    // txn-mempool-conflict
    if (e.details?.includes?.('conflict') || e.cause?.message?.includes?.('conflict')) {
        return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$errors$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["TransactionError"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["LiFiErrorCode"].TransactionConflict, 'Your transaction conflicts with another transaction already in the mempool. One or more inputs have been spent by another transaction.', e);
    }
    if (e.code === 4001 || e.code === -32000 || e.cause?.includes?.('rejected')) {
        return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$errors$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["TransactionError"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["LiFiErrorCode"].SignatureRejected, e.message, e);
    }
    if (e.code === -5 || e.code === -32700 || e.code === -32064) {
        return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$errors$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["TransactionError"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["LiFiErrorCode"].NotFound, e.message, e);
    }
    if (e instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$baseError$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["BaseError"]) {
        return e;
    }
    return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$errors$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["UnknownError"](e.message || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ErrorMessage"].UnknownError, e);
}; //# sourceMappingURL=parseUTXOErrors.js.map
}}),
"[project]/node_modules/@lifi/sdk/src/_esm/core/UTXO/UTXOStepExecutor.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "UTXOStepExecutor": (()=>UTXOStepExecutor)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/index.js [app-ssr] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$errors$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/errors/errors.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/errors/constants.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$config$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/config.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$UTXO$2f$getUTXOPublicClient$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/core/UTXO/getUTXOPublicClient.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$types$2f$src$2f$_esm$2f$chains$2f$base$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/types/src/_esm/chains/base.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$checkBalance$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/core/checkBalance.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$services$2f$api$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/services/api.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$stepComparison$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/core/stepComparison.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$psbt$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/psbt.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$networks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__networks$3e$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/networks.js [app-ssr] (ecmascript) <export * as networks>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$address$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__address$3e$__ = __turbopack_import__("[project]/node_modules/bitcoinjs-lib/src/esm/address.js [app-ssr] (ecmascript) <export * as address>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$viem$2f$_esm$2f$utils$2f$promise$2f$withTimeout$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/viem/_esm/utils/promise/withTimeout.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$bigmi$2f$core$2f$dist$2f$esm$2f$actions$2f$signPsbt$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@bigmi/core/dist/esm/actions/signPsbt.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$bigmi$2f$core$2f$dist$2f$esm$2f$actions$2f$waitForTransaction$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@bigmi/core/dist/esm/actions/waitForTransaction.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$UTXO$2f$parseUTXOErrors$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/core/UTXO/parseUTXOErrors.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$waitForReceivingTransaction$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/core/waitForReceivingTransaction.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$processMessages$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/core/processMessages.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$utils$2f$getTransactionMessage$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/utils/getTransactionMessage.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$BaseStepExecutor$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/core/BaseStepExecutor.js [app-ssr] (ecmascript)");
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
class UTXOStepExecutor extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$BaseStepExecutor$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["BaseStepExecutor"] {
    constructor(options){
        super(options);
        Object.defineProperty(this, "client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "checkClient", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (step)=>{
                // TODO: check chain and possibly implement chain switch?
                // Prevent execution of the quote by wallet different from the one which requested the quote
                if (this.client.account?.address !== step.action.fromAddress) {
                    throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$errors$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["TransactionError"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["LiFiErrorCode"].WalletChangedDuringExecution, 'The wallet address that requested the quote does not match the wallet address attempting to sign the transaction.');
                }
            }
        });
        Object.defineProperty(this, "executeStep", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: async (step)=>{
                step.execution = this.statusManager.initExecutionObject(step);
                const fromChain = await __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$config$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["config"].getChainById(step.action.fromChainId);
                const toChain = await __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$config$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["config"].getChainById(step.action.toChainId);
                const isBridgeExecution = fromChain.id !== toChain.id;
                const currentProcessType = isBridgeExecution ? 'CROSS_CHAIN' : 'SWAP';
                // STEP 2: Get transaction
                let process = this.statusManager.findOrCreateProcess({
                    step,
                    type: currentProcessType,
                    chainId: fromChain.id
                });
                const publicClient = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$UTXO$2f$getUTXOPublicClient$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getUTXOPublicClient"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$types$2f$src$2f$_esm$2f$chains$2f$base$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ChainId"].BTC);
                if (process.status !== 'DONE') {
                    try {
                        let txHash;
                        let txHex;
                        if (process.txHash) {
                            // Make sure that the chain is still correct
                            this.checkClient(step);
                            // Wait for exiting transaction
                            txHash = process.txHash;
                            txHex = process.txHex;
                        } else {
                            process = this.statusManager.updateProcess(step, process.type, 'STARTED');
                            // Check balance
                            await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$checkBalance$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["checkBalance"])(this.client.account.address, step);
                            // Create new transaction
                            if (!step.transactionRequest) {
                                const { execution, ...stepBase } = step;
                                const updatedStep = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$services$2f$api$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getStepTransaction"])(stepBase);
                                const comparedStep = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$stepComparison$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["stepComparison"])(this.statusManager, step, updatedStep, this.allowUserInteraction, this.executionOptions);
                                Object.assign(step, {
                                    ...comparedStep,
                                    execution: step.execution
                                });
                            }
                            if (!step.transactionRequest?.data) {
                                throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$errors$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["TransactionError"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["LiFiErrorCode"].TransactionUnprepared, 'Unable to prepare transaction.');
                            }
                            process = this.statusManager.updateProcess(step, process.type, 'ACTION_REQUIRED');
                            if (!this.allowUserInteraction) {
                                return step;
                            }
                            let transactionRequest = {
                                data: step.transactionRequest.data
                            };
                            if (this.executionOptions?.updateTransactionRequestHook) {
                                const customizedTransactionRequest = await this.executionOptions.updateTransactionRequestHook({
                                    requestType: 'transaction',
                                    ...transactionRequest
                                });
                                transactionRequest = {
                                    ...transactionRequest,
                                    ...customizedTransactionRequest
                                };
                            }
                            if (!transactionRequest.data) {
                                throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$errors$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["TransactionError"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["LiFiErrorCode"].TransactionUnprepared, 'Unable to prepare transaction.');
                            }
                            this.checkClient(step);
                            const psbtHex = transactionRequest.data;
                            const psbt = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$psbt$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Psbt"].fromHex(psbtHex, {
                                network: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$networks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__networks$3e$__["networks"].bitcoin
                            });
                            const inputsToSign = Array.from(psbt.data.inputs.reduce((map, input, index)=>{
                                const accountAddress = input.witnessUtxo ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$address$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__address$3e$__["address"].fromOutputScript(input.witnessUtxo.script, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$networks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__networks$3e$__["networks"].bitcoin) : this.client.account?.address;
                                if (map.has(accountAddress)) {
                                    map.get(accountAddress).signingIndexes.push(index);
                                } else {
                                    map.set(accountAddress, {
                                        address: accountAddress,
                                        sigHash: 1,
                                        signingIndexes: [
                                            index
                                        ]
                                    });
                                }
                                return map;
                            }, new Map()).values());
                            // We give users 10 minutes to sign the transaction or it should be considered expired
                            const signedPsbtHex = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$viem$2f$_esm$2f$utils$2f$promise$2f$withTimeout$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["withTimeout"])(()=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$bigmi$2f$core$2f$dist$2f$esm$2f$actions$2f$signPsbt$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["signPsbt"])(this.client, {
                                    psbt: psbtHex,
                                    inputsToSign: inputsToSign,
                                    finalize: false
                                }), {
                                timeout: 600_000,
                                errorInstance: new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$errors$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["TransactionError"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["LiFiErrorCode"].TransactionExpired, 'Transaction has expired.')
                            });
                            const signedPsbt = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$bitcoinjs$2d$lib$2f$src$2f$esm$2f$psbt$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Psbt"].fromHex(signedPsbtHex).finalizeAllInputs();
                            txHex = signedPsbt.extractTransaction().toHex();
                            txHash = await publicClient.sendUTXOTransaction({
                                hex: txHex
                            });
                            process = this.statusManager.updateProcess(step, process.type, 'PENDING', {
                                txHash: txHash,
                                txLink: `${fromChain.metamask.blockExplorerUrls[0]}tx/${txHash}`,
                                txHex
                            });
                        }
                        let replacementReason;
                        const transaction = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$bigmi$2f$core$2f$dist$2f$esm$2f$actions$2f$waitForTransaction$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["waitForTransaction"])(publicClient, {
                            txId: txHash,
                            txHex,
                            senderAddress: this.client.account?.address,
                            onReplaced: (response)=>{
                                replacementReason = response.reason;
                                process = this.statusManager.updateProcess(step, process.type, 'PENDING', {
                                    txHash: response.transaction.txid,
                                    txLink: `${fromChain.metamask.blockExplorerUrls[0]}tx/${response.transaction.txid}`
                                });
                            }
                        });
                        if (replacementReason === 'cancelled') {
                            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$errors$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["TransactionError"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["LiFiErrorCode"].TransactionCanceled, 'User canceled transaction.');
                        }
                        if (transaction.txid !== txHash) {
                            process = this.statusManager.updateProcess(step, process.type, 'PENDING', {
                                txHash: transaction.txid,
                                txLink: `${fromChain.metamask.blockExplorerUrls[0]}tx/${transaction.txid}`
                            });
                        }
                        if (isBridgeExecution) {
                            process = this.statusManager.updateProcess(step, process.type, 'DONE');
                        }
                    } catch (e) {
                        const error = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$UTXO$2f$parseUTXOErrors$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["parseUTXOErrors"])(e, step, process);
                        process = this.statusManager.updateProcess(step, process.type, 'FAILED', {
                            error: {
                                message: error.cause.message,
                                code: error.code
                            }
                        });
                        this.statusManager.updateExecution(step, 'FAILED');
                        throw error;
                    }
                }
                // STEP 5: Wait for the receiving chain
                const processTxHash = process.txHash;
                if (isBridgeExecution) {
                    process = this.statusManager.findOrCreateProcess({
                        step,
                        type: 'RECEIVING_CHAIN',
                        status: 'PENDING',
                        chainId: toChain.id
                    });
                }
                let statusResponse;
                try {
                    if (!processTxHash) {
                        throw new Error('Transaction hash is undefined.');
                    }
                    statusResponse = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$waitForReceivingTransaction$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["waitForReceivingTransaction"])(processTxHash, this.statusManager, process.type, step, 10_000);
                    const statusReceiving = statusResponse.receiving;
                    process = this.statusManager.updateProcess(step, process.type, 'DONE', {
                        substatus: statusResponse.substatus,
                        substatusMessage: statusResponse.substatusMessage || (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$processMessages$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getSubstatusMessage"])(statusResponse.status, statusResponse.substatus),
                        txHash: statusReceiving?.txHash,
                        txLink: `${toChain.metamask.blockExplorerUrls[0]}tx/${statusReceiving?.txHash}`
                    });
                    this.statusManager.updateExecution(step, 'DONE', {
                        fromAmount: statusResponse.sending.amount,
                        toAmount: statusReceiving?.amount,
                        toToken: statusReceiving?.token,
                        gasCosts: [
                            {
                                amount: statusResponse.sending.gasAmount,
                                amountUSD: statusResponse.sending.gasAmountUSD,
                                token: statusResponse.sending.gasToken,
                                estimate: statusResponse.sending.gasUsed,
                                limit: statusResponse.sending.gasUsed,
                                price: statusResponse.sending.gasPrice,
                                type: 'SEND'
                            }
                        ]
                    });
                } catch (e) {
                    const htmlMessage = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$utils$2f$getTransactionMessage$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getTransactionFailedMessage"])(step, process.txLink);
                    process = this.statusManager.updateProcess(step, process.type, 'FAILED', {
                        error: {
                            code: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$errors$2f$constants$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["LiFiErrorCode"].TransactionFailed,
                            message: 'Failed while waiting for receiving chain.',
                            htmlMessage
                        }
                    });
                    this.statusManager.updateExecution(step, 'FAILED');
                    console.warn(e);
                    throw e;
                }
                // DONE
                return step;
            }
        });
        this.client = options.client;
    }
} //# sourceMappingURL=UTXOStepExecutor.js.map
}}),
"[project]/node_modules/@lifi/sdk/src/_esm/core/UTXO/UTXO.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "UTXO": (()=>UTXO)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$types$2f$src$2f$_esm$2f$chains$2f$Chain$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/types/src/_esm/chains/Chain.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$bigmi$2f$core$2f$dist$2f$esm$2f$utils$2f$isUTXOAddress$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@bigmi/core/dist/esm/utils/isUTXOAddress.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$UTXO$2f$getUTXOBalance$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/core/UTXO/getUTXOBalance.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$UTXO$2f$UTXOStepExecutor$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/core/UTXO/UTXOStepExecutor.js [app-ssr] (ecmascript)");
;
;
;
;
function UTXO(options) {
    const _options = options ?? {};
    return {
        get type () {
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$types$2f$src$2f$_esm$2f$chains$2f$Chain$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["ChainType"].UTXO;
        },
        isAddress: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$bigmi$2f$core$2f$dist$2f$esm$2f$utils$2f$isUTXOAddress$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isUTXOAddress"],
        async resolveAddress (name) {
            // Not supported on UTXO yet
            return name;
        },
        getBalance: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$UTXO$2f$getUTXOBalance$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getUTXOBalance"],
        async getStepExecutor (options) {
            if (!_options.getWalletClient) {
                throw new Error('Client is not provided.');
            }
            const walletClient = await _options.getWalletClient();
            const executor = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$UTXO$2f$UTXOStepExecutor$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["UTXOStepExecutor"]({
                client: walletClient,
                routeId: options.routeId,
                executionOptions: {
                    ...options.executionOptions
                }
            });
            return executor;
        },
        setOptions (options) {
            Object.assign(_options, options);
        }
    };
} //# sourceMappingURL=UTXO.js.map
}}),
"[project]/node_modules/@lifi/sdk/src/_esm/core/prepareRestart.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "prepareRestart": (()=>prepareRestart)
});
const prepareRestart = async (route)=>{
    for(let index = 0; index < route.steps.length; index++){
        const step = route.steps[index];
        const stepHasFailed = step.execution?.status === 'FAILED';
        if (stepHasFailed) {
            deleteFailedProcesses(step);
            deleteTransactionData(step);
        }
    }
};
const deleteFailedProcesses = (step)=>{
    if (step.execution) {
        step.execution.process = step.execution.process.filter((process)=>process.status === 'DONE');
    }
};
const deleteTransactionData = (step)=>{
    step.transactionRequest = undefined;
}; //# sourceMappingURL=prepareRestart.js.map
}}),
"[project]/node_modules/@lifi/sdk/src/_esm/core/execution.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "executeRoute": (()=>executeRoute),
    "getActiveRoute": (()=>getActiveRoute),
    "getActiveRoutes": (()=>getActiveRoutes),
    "resumeRoute": (()=>resumeRoute),
    "stopRouteExecution": (()=>stopRouteExecution),
    "updateRouteExecution": (()=>updateRouteExecution)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$executionState$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/core/executionState.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$prepareRestart$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/core/prepareRestart.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$config$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/config.js [app-ssr] (ecmascript)");
;
;
;
const executeRoute = async (route, executionOptions)=>{
    // Deep clone to prevent side effects
    const clonedRoute = structuredClone(route);
    let executionPromise = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$executionState$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["executionState"].get(clonedRoute.id)?.promise;
    // Check if route is already running
    if (executionPromise) {
        return executionPromise;
    }
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$executionState$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["executionState"].create({
        route: clonedRoute,
        executionOptions
    });
    executionPromise = executeSteps(clonedRoute);
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$executionState$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["executionState"].update({
        route: clonedRoute,
        promise: executionPromise
    });
    return executionPromise;
};
const resumeRoute = async (route, executionOptions)=>{
    const execution = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$executionState$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["executionState"].get(route.id);
    if (execution) {
        const executionHalted = execution.executors.some((executor)=>!executor.allowExecution);
        if (!executionHalted) {
            // Check if we want to resume route execution in the background
            updateRouteExecution(route, {
                executeInBackground: executionOptions?.executeInBackground
            });
            if (!execution.promise) {
                // We should never reach this point if we do clean-up properly
                throw new Error('Route execution promise not found.');
            }
            return execution.promise;
        }
    }
    await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$prepareRestart$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["prepareRestart"])(route);
    return executeRoute(route, executionOptions);
};
const executeSteps = async (route)=>{
    // Loop over steps and execute them
    for(let index = 0; index < route.steps.length; index++){
        const execution = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$executionState$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["executionState"].get(route.id);
        // Check if execution has stopped in the meantime
        if (!execution) {
            break;
        }
        const step = route.steps[index];
        const previousStep = route.steps[index - 1];
        // Check if the step is already done
        //
        if (step.execution?.status === 'DONE') {
            continue;
        }
        // Update step fromAmount using output of the previous step execution. In the future this should be handled by calling `updateRoute`
        if (previousStep?.execution?.toAmount) {
            step.action.fromAmount = previousStep.execution.toAmount;
            if (step.includedSteps?.length) {
                step.includedSteps[0].action.fromAmount = previousStep.execution.toAmount;
            }
        }
        try {
            const fromAddress = step.action.fromAddress;
            if (!fromAddress) {
                throw new Error('Action fromAddress is not specified.');
            }
            const provider = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$config$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["config"].get().providers.find((provider)=>provider.isAddress(fromAddress));
            if (!provider) {
                throw new Error('SDK Execution Provider not found.');
            }
            const stepExecutor = await provider.getStepExecutor({
                routeId: route.id,
                executionOptions: execution.executionOptions
            });
            execution.executors.push(stepExecutor);
            // Check if we want to execute this step in the background
            if (execution.executionOptions) {
                updateRouteExecution(route, execution.executionOptions);
            }
            const executedStep = await stepExecutor.executeStep(step);
            // We may reach this point if user interaction isn't allowed. We want to stop execution until we resume it
            if (executedStep.execution?.status !== 'DONE') {
                stopRouteExecution(route);
            }
            // Execution stopped during the current step, we don't want to continue to the next step so we return already
            if (!stepExecutor.allowExecution) {
                return route;
            }
        } catch (e) {
            stopRouteExecution(route);
            throw e;
        }
    }
    // Clean up after the execution
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$executionState$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["executionState"].delete(route.id);
    return route;
};
const updateRouteExecution = (route, options)=>{
    const execution = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$executionState$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["executionState"].get(route.id);
    if (!execution) {
        return;
    }
    if ('executeInBackground' in options) {
        for (const executor of execution.executors){
            executor.setInteraction({
                allowInteraction: !options?.executeInBackground,
                allowUpdates: true
            });
        }
    }
    // Update active route settings so we know what the current state of execution is
    execution.executionOptions = {
        ...execution.executionOptions,
        ...options
    };
};
const stopRouteExecution = (route)=>{
    const execution = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$executionState$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["executionState"].get(route.id);
    if (!execution) {
        return route;
    }
    for (const executor of execution.executors){
        executor.setInteraction({
            allowInteraction: false,
            allowUpdates: false,
            allowExecution: false
        });
    }
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$executionState$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["executionState"].delete(route.id);
    return execution.route;
};
const getActiveRoutes = ()=>{
    return Object.values(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$executionState$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["executionState"].state).map((dict)=>dict?.route).filter(Boolean);
};
const getActiveRoute = (routeId)=>{
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$core$2f$executionState$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["executionState"].get(routeId)?.route;
}; //# sourceMappingURL=execution.js.map
}}),
"[project]/node_modules/@lifi/sdk/src/_esm/services/getNameServiceAddress.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "getNameServiceAddress": (()=>getNameServiceAddress)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$config$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@lifi/sdk/src/_esm/config.js [app-ssr] (ecmascript)");
;
const getNameServiceAddress = async (name, chainType)=>{
    try {
        let providers = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$lifi$2f$sdk$2f$src$2f$_esm$2f$config$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["config"].get().providers;
        if (chainType) {
            providers = providers.filter((provider)=>provider.type === chainType);
        }
        const resolvers = providers.map((provider)=>provider.resolveAddress);
        if (!resolvers.length) {
            return;
        }
        const result = await Promise.any(resolvers.map(async (resolve)=>{
            const address = await resolve(name);
            if (!address) {
                throw undefined;
            }
            return address;
        }));
        return result;
    } catch (_) {
        return;
    }
}; //# sourceMappingURL=getNameServiceAddress.js.map
}}),

};

//# sourceMappingURL=node_modules_%40lifi_sdk_src__esm_cd4f73._.js.map